Designs/Discussions/Decissions (to be made):

* what are the requirements for the Sept 25 release?

* deprecate sock channel in favor of ssm? this depends on performance and CPU
  load issues.

* threads: user vs. device.  how do we separate them but reuse code and make
  them peacefully coexist?  (the device may use threads even if
  MPICH_SINGLE_THREADED is defined)

* fault tolerance: required for master/slave (Rusty) and dynamic process
  support.  we need a design that defines appropriate actions for fault
  scenarios and reports errors in such a way that both internal and user code
  can recognize specific error conditions and react appropriately.  the design
  must include tracking of necessary data structures (vc->comms, comm->reqs).
  fortunately, tracking is only necessary if communicator error handler is not
  the fatal handler.

* define CH3 interface to support the use of RDMA operations for OSC (first
  draft complete but needs work) [Bill/Rajeev/Brian/others?]

--------------------

Open Tasks:

* documentation: installation and usage document(s) [Bill/Rusty/others?]

* (util/sock) revisit the sock interface and redo sock implementations to
  support multi-threaded progress engine, and increase robustness and error
  reporting (needed for fault tolerance and dynamic process support)
  [Brian/David]

* (ch3:sock/ssm) rework progress engine to use improved sock interface and
  significant improve dynamic process support.  also, increase robustness and
  error reporting [Brian/David/Rajeev]

* (ch3:all) threaded progress engine to support passive target RMA
  [Brian/David]

* (ssm/sock) replace abort(), assert() and MPID_Abort() calls with proper error
  handling (require reworking progress engine which has to be done anyway for
  MPI-2 support) [Brian/David]

* (sock/ssm) connection formation code should not fail after the first attempt
  since the listener has a limited queue of pending connections [Brian/David]

* (ssm/sock) if the business card of a remote process contains multiple socket
  listeners, try each until a connection is formed [Brian/David]

* (req #93) select() implementation of sock for Mac OS X (possibly augment
  poll() implementation) [Brian/David]

* (ch3:shm/ssm) IA-64 assembly [Brian/David]

* (ch3:shm/ssm) support for non-Intel architectures (generic solution)
  [David/Brian]

* (ch3:ssm) topology/protocol specification [Bill/Rusty/David/Brian]

* (mpi/ch3/ch3:all) support for user threads.  afirst cut of MPI pt2pt and CH3
  device exists, but better thread abstraction, etc. neecs to be worked out.
  this should be broken into multiple tasks as items are discovered.

* (ch3) flow control [Brian]

* (ch3) move active target handlers into there own complete actions (CAs);
  update load_send/recv_iov routines to allow completion actions to be
  specified.  this is neceesary to allow the active target ONC implementation
  to work with optimized code in the shm and ssm channels.  [Brian/Rajeev]

* (ch3:all) active target OSC for all channels (includes moving code from
  existing CAs to special OSC CAs) [Rajeev/Brian]

* (ch3) add new function to notify the channel when the VC reference count
  reaches zero.  this gives the channel an opportunity to release references to
  internal channel structures and cleanly shutdown of the any underlying
  connection(s) (this is needed for MPI_Comm_free() and MPI_Comm_disconnect())
  [Brian]

* (ch3:all) dynamic process (spawn/connect/accept) implementation (partially
  working for sock channel) [Rajeev/Brian/David]

* (mpi) MPI_Comm_disconnect() must wait for all bsend communication associated
  with the comm to complete.  It should call MPID_Comm_disconnect() so that
  devices that buffer sends can complete those sends and release VC
  resources. [Brian/Rajeev?]

* (ch3) free parent in MPID_Finalize() but only if it hasn't already been
  freed. [Brian/Rajeev]

* (mpi/ch3/ch3:all) fault tolerance.  requires tracking communicators
  associated with a VC, requests associated with a communicator, etc.  (we need
  to think about the requirement and design a bit more before; see note above)

* add MPI_Type_create_{darray,subarray} to MPICH2 and update ROMIO to properly
  handle these new types [Rob R.]

* (romio) extern32 support (requires pack external) [??? Rob R./Rob L.]

* (romio) more complete test suite [??? Rob R./Rob L./Rajeev]

* (mpe) full integration and testing (slog2sdk is now being checked out into
  src/util/slog2sdk to support rlog) [Bill/Anthony/David/Brian] -- partially
  done (Bill and Anthony); mpe directory under src/mpe (not the final location)
  and top-level configure knows how to build mpe if mpe directory is present
  and mpe selected.

* (f77/mpe) move f77 wrappers into a separate library to support MPE logging of
  f77 codes [Bill/Brian]

* (req #77) test that logging compiles (all states are defined) before
  releasing tarball [Bill/David/Brian] -- done - a new test script
  ensures that these are tested.  Note that the nightlies will do this
  as part of the random tests.

* (req #124,110,104,91,84,76,71,70,62,36,33) MPD problems [Rusty/Ralph]

* have configure print out available channels, process managers, etc. for
  current machine [Bill/Brian]

* (req #23) modify configure to ensure --with-pm and --with-pmi consistency
  [Brian] (could be deferred)

* (req #23) remove uni implementation of PMI [Bill/Brian]

* (req #98) by default, the forker PM should not timeout

* (req #104) sock does not run under Cygwin

* (req #87) fix hello world hang on Alpha (Redhat 7.2, gcc 2.96) [Brian]

* pre-defined attributes on communicators? (Rajeev mentioned these)

* (req #24) check for valid timer types in configure [Brian]

* improved distribution cutting script [Bill/Brian/Rusty]

* (ch3) add optional MPIDI_CH3_Abort() to interface and implementation [Brian]

* (req #63) SysV IPC resource recovery for all systems (not just Linux)
  [David/Brian]

* performance tuning of ssm and shm progress engines [David/Brian]

* (req #35) buffer alignment issues with Red Hat libraries on Alpha ev5
  processors

* (req #16) DNS scalability - reduce number of name (and reverse name) lookups
  in sock and ssm channels [Brian/David]

* measure and compare performance of sock and ssm (using sock) [David]

* measure and compare performance of shm and ssm (using shm) [David]


--------------------

Completed?

* POSIX message queues (use new job id to allocate per job message queue in
  ssm) [David/Brian] (we don't need this anymore, right?)

* add PMI_Get_id() to obtain unique job identifier [Brian/David/Rusty/Rajeev]
  (done, right?)


--------------------

Deferred Items:

* (ch3) heterogeneous communication in the device [Brian/David?]

* (ch3) for rendezvous protocol, only amount of data that will fit in the
  receive buffer (there is no need to send all of the data because truncation
  can be detected on the receive side) [Brian]

* work with Phil on writing directly to user space of other processes
  [David/Brian]

* improve CH3 interface/protocols to beter support RDMA channel [Brian/David]

* update RDMA interface to support pinning of memory for both send and receive
  [Brian/David]

* write CH3 design and implementation guide [Brian]

* write CH3 design paper [Brian/Bill/others?]

===============================================================================

Documentation - Rusty

- building (configure/make/make install)
  - platforms
    - UNIX/Linux
    - Windows
  - channels
    - sock
    - shm
    - ssm
  - process managers

- using process managers

- how to enable logging, combine log files, view log files, etc.
