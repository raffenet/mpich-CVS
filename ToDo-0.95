Designs/Discussions/Decissions (to be made):

* what are the requirements for the Sept 25 release?

  * OSC: testing, active target only acceptible, passive target would be great

  * dynamic processes: implementation and testing; doesn't need to be for all
    channels

  * service routines: generalized requests

  * intercommunicator collectives

  * coverage analysis to be happy (test/mpi)

  * no thread-multiple

* deprecate sock channel in favor of ssm? this depends on performance and CPU
  load issues.  NOT YET

* threads: user vs. device.  how do we separate them but reuse code and make
  them peacefully coexist?  (the device may use threads even if
  MPICH_SINGLE_THREADED is defined)  <deferred>

* fault tolerance: required for master/slave (Rusty) and dynamic process
  support.  we need a design that defines appropriate actions for fault
  scenarios and reports errors in such a way that both internal and user code
  can recognize specific error conditions and react appropriately.  the design
  must include tracking of necessary data structures (vc->comms, comm->reqs).
  fortunately, tracking is only necessary if communicator error handler is not
  the fatal handler.

* define CH3 interface to support the use of RDMA operations for OSC (first
  draft complete but needs work) [Bill/Rajeev/Brian/others?]

* (req #122) additional requirements from TG project?

--------------------

Open Tasks:

* (doc) installation and usage document(s) [Bill/Rusty/others?]

* (doc, req #114) ADI3 documentation

* (doc, req #125) documentation generator [Bill/?]

* failures on 64-bit platforms

* (util, req #125) parameter interface and implementation [Bill/?]

* (util/sock) revisit the sock interface and redo sock implementations to
  support multi-threaded progress engine, and increase robustness and error
  reporting (needed for fault tolerance and dynamic process support)
  [Brian/David]

* (util/sock, req #93) select() implementation of sock for Mac OS X (possibly
  augment poll() implementation) [Brian/David]

* (ch3:sock/ssm) rework progress engine to use improved sock interface and
  significant improve dynamic process support.  also, increase robustness and
  error reporting [Brian/David/Rajeev]

* (ch3/ch3:all) CH3U_Request_complete() potentially frees the request.  The
  caller then typically looks at the iov_count field in the request.  The CH3
  device should be using CH3U_Request_set_io_complete() instead.  The channels
  should use CH3U_Request_get_io_complete() and then only call
  CH3U_Request_complete() if the I/O is complete.  Furthermore,
  CH3_Progress_signal_completion() may not need to be called by
  CH3_Request_complete() in all cases, suggesting that it be taken out of
  CH3U_Request_complete() and a new macro
  CH3U_Request_complete_and_signal_progress() be added.

* (ch3:all) threaded progress engine to support passive target RMA
  [Brian/David]

* (ch3:ssm/sock) replace abort(), assert() and MPID_Abort() calls with proper
  error handling (require reworking progress engine which has to be done anyway
  for MPI-2 support) [Brian/David]

* (ch3:sock/ssm, req #125) allow user to specify range of ports to be used
  (for both listener and connect()?).  the parameter interface should be used
  to obtain such information. [Brian/David]

* (ch3:sock/ssm) connection formation code should not fail after the first
  attempt since the listener has a limited queue of pending connections
  [Brian/David]

* (ch3:ssm/sock) if the business card of a remote process contains multiple
  socket listeners, try each until a connection is formed [Brian/David]

* (ch3:ssm/sock, req #108) require better detection of IPv6 for GetLocalIPs()
  [Brian]

* (ch3:shm/ssm) IA-64 assembly [Brian/David]

* (ch3:ssm) topology/protocol specification [Bill/Rusty/David/Brian]

* (mpi/ch3/ch3:all) support for user threads.  afirst cut of MPI pt2pt and CH3
  device exists, but better thread abstraction, etc. neecs to be worked out.
  this should be broken into multiple tasks as items are discovered.

* (ch3) MPID_Finalize() must barrier across all connected processes.  We will
  need to track all connections (as defined by the MPI standard), probably by
  tracking all connected communicators.  MPID_Finalize() could then call
  MPI_Comm_disconnect on each communicator (ordering may be a problem,
  i.e. deadlock).  NOTE: calling MPI_Comm_free() on a communicator does not
  disconnect the processes involved in the communicator.  Only
  MPI_Comm_disconnect() does that.

* (ch3) flow control [Brian]

* (osc, ch3) move active target handlers into there own complete actions (CAs);
  update load_send/recv_iov routines to allow completion actions to be
  specified.  this is neceesary to allow the active target ONC implementation
  to work with optimized code in the shm and ssm channels.  [Brian/Rajeev]

* (osc, ch3:all) active target OSC for all channels (includes moving code from
  existing CAs to special OSC CAs) [Rajeev/Brian]

* (dp, ch3) add new function to notify the channel when the VC reference count
  reaches zero.  this gives the channel an opportunity to release references to
  internal channel structures and cleanly shutdown of the any underlying
  connection(s) (this is needed for MPI_Comm_free() and MPI_Comm_disconnect())
  [Brian]

* (dp, ch3:all) dynamic process (spawn/connect/accept) implementation (partially
  working for sock channel).  see req #123 for interested beta
  testers. [Rajeev/Brian/David]

* (dp, mpi/ch3/ch3:all) MPI_Comm_disconnect() must wait for all bsend
  communication associated with the comm to complete.  It should call
  MPID_Comm_disconnect() so that devices that buffer sends can complete those
  sends and release VC resources. [Brian/Rajeev?]

* (dp, ch3) free parent in MPID_Finalize() but only if it hasn't already been
  freed. [Brian/Rajeev]

* (dp,test) (req #123) integrate tests from etienne.gondet@mercator-ocean.fr

* (dp/ft, mpi/ch3/ch3:all) fault tolerance.  requires tracking communicators
  associated with a VC, requests associated with a communicator, etc.  (we need
  to think about the requirement and design a bit more before; see note in
  discussion section)

* (dt) add MPI_Type_create_{darray,subarray} to MPICH2 and update ROMIO to
  properly handle these new types [Rob R.]

* (dt, req #94) alignment issues on Solaris64

* (romio/dt) extern32 support (requires pack external) [??? Rob R./Rob L.]

* (romio) more complete test suite [??? Rob R./Rob L./Rajeev]

* (romio, req #112) doesn't handle --disable-f77

* (mpe) full integration and testing (slog2sdk is now being checked out into
  src/util/slog2sdk to support rlog) [Bill/Anthony/David/Brian] -- partially
  done (Bill and Anthony); mpe directory under src/mpe (not the final location)
  and top-level configure knows how to build mpe if mpe directory is present
  and mpe selected.

* (f77/mpe) move f77 wrappers into a separate library to support MPE logging of
  f77 codes [Bill/Brian]

* (req #77) test that logging compiles (all states are defined) before
  releasing tarball [Bill/David/Brian] -- done - a new test script
  ensures that these are tested.  Note that the nightlies will do this
  as part of the random tests.

* (pm, mpd, req #124,111,110,104,91,84,76,71,70,62,36,33) various MPD reqs
  [Rusty/Ralph]

* (pm, forker, req 107) empty string from PMI_KVS_Get() on peta01

* (pm, forker, req #98) by default, the forker PM should not timeout

* have configure print out available channels, process managers, etc. for
  current machine [Bill/Brian]

* (req #23) modify configure to ensure --with-pm and --with-pmi consistency
  [Brian] (could be deferred)

* (req #23) remove uni implementation of PMI [Bill/Brian]

* (req #104) sock does not run under Cygwin

* (req #87) fix hello world hang on Alpha (Redhat 7.2, gcc 2.96) [Brian]

* pre-defined attributes on communicators? (Rajeev mentioned these)

* (req #24) check for valid timer types in configure [Brian]

* improved distribution cutting script [Bill/Brian/Rusty]

* (ch3) add optional MPIDI_CH3_Abort() to interface and implementation [Brian]

* (req #63) SysV IPC resource recovery for all systems (not just Linux)
  [David/Brian]

* (ch3:shm/ssm) performance tuning of progress engines [David/Brian]

* (req #35) buffer alignment issues with Red Hat libraries on Alpha ev5
  processors

* (req #16) DNS scalability - reduce number of name (and reverse name) lookups
  in sock and ssm channels [Brian/David]

* (ch3:shm/ssm) support for non-Intel architectures (generic solution)
  [David/Brian]

* measure and compare performance of sock and ssm (using sock) [David]

* measure and compare performance of shm and ssm (using shm) [David]


--------------------

Completed?

* POSIX message queues (use new job id to allocate per job message queue in
  ssm) [David/Brian] (we don't need this anymore, right?)

* add PMI_Get_id() to obtain unique job identifier [Brian/David/Rusty/Rajeev]
  (done, right?)

* (req #113) configure scripts should enumerate list of letters when using tr
  rather than using short for of [A-Z][a-z].  [Bill]

* (ch3:ssm, req #105) hang in message queue code [David]

--------------------

Deferred Items:

* (ch3) heterogeneous communication in the device [Brian/David?]

* (ch3) for rendezvous protocol, only amount of data that will fit in the
  receive buffer (there is no need to send all of the data because truncation
  can be detected on the receive side) [Brian]

* work with Phil on writing directly to user space of other processes
  [David/Brian]

* (ch3) improve CH3 interface/protocols to beter support RDMA channel
  [Brian/David]

* (ch3:rdma) update RDMA interface to support pinning of memory for both send
  and receive [Brian/David]

* (doc, ch3) write CH3 design and implementation guide [Brian]

* (doc, ch3) write CH3 design paper [Brian/Bill/others?]

* Totalview integration

===============================================================================

Documentation - Rusty

- building (configure/make/make install)
  - platforms
    - UNIX/Linux
    - Windows
  - channels
    - sock
    - shm
    - ssm
  - process managers

- using process managers

- how to enable logging, combine log files, view log files, etc.
