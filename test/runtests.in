#! @PERL5@
#
# This script is the beginnings of a script to run a sequence of test 
# programs.  See the MPICH document for a description of the test
# strategy and requirements.
#
# Description
#   Tests are controlled by a file listing test programs; if the file is
#   a directory, then all of the programs in the directory and subdirectories
#   are run
#
#   To run a test, the following steps are executed
#   Build the executable:
#      make programname
#   Run the executable
#      mpiexec -n <np> ./programname >out 2>err
#   Check the return code (non zero is failure)
#   Check the stderr output (non empty is failure)
#   Check the stdout output (No Errors or Test passed are the only valid
#      output)
#   Remove executable, out, err files
#

# Global variables
$mpiexec = "mpiexec";    # Name of mpiexec program (including path, if necessary)
$np_arg  = "-n";         # Name of argument to specify the number of processes
$err_count = 0;          # Number of programs that failed.
$np_default = 2;         # Default number of processes to use

# Output forms
$xmloutput = 0;          # Set to true to get xml output (also specify file)
$verbose = 0;            # Set to true to get more output
$newline = "\r\n";       # Set to \r\n for Windows-friendly, \n for Unix only

# Build flags
$remove_this_pgm = 0;
$clean_pgms      = 1;

#---------------------------------------------------------------------------
# Process arguments and override any defaults
#---------------------------------------------------------------------------
foreach $_ (@ARGV) {
    if (/-mpiexec=(.*)/) { $mpiexec = $1; }
    elsif (/-np=(.*)/)   { $np_default = $1; }
    elsif (/-tests=(.*)/) { $listfiles = $1; }
    elsif (/-verbose/) { $verbose = 1; }
    elsif (/-xmlfile=(.*)/) {
	$xmlfile   = $1;
	$xmloutput = 1;
	open( XMLOUT, ">$xmlfile" ) || die "Cannot open $xmlfile\n";
    }
    else {
	print STDERR "Unrecognized argument $_\n";
    }
}

if ($listfiles eq "") {
    # The default is to run every file in the current directory.
    # If there are no built programs, build and run every file
    $found_exec = 0;
    $found_src  = 0;
    open (PGMS, "ls -1 |" ) || die "Cannot list directory\n";
    while (<PGMS>) {
	s/\r?\n//;
	$programname = $_;
	if (-d $programname) { ; }  # Ignore directories
	if (-x $programname) { $found_exec++; }
	if ($programname =~ /\.[cf]$/) { $found_src++; } 
    }
    close PGMS;
    
    if ($found_exec) {
	open (PGMS, "ls -1 |" ) || die "Cannot list programs\n";
	while (<PGMS>) {
	    s/\r?\n//;
	    $programname = $_;
	    if (-x $programname) {
		&RunMPIProgram( $programname, $np_default );
	    }
	}
	close PGMS;
    }
    elsif ($found_src) { 
	open (PGMS, "ls -1 *.c |" ) || die "Cannot list programs\n";
	while (<PGMS>) {
	    s/\r?\n//;
	    $programname = $_;
	    $programname =~ s/\.c//;
	    &BuildMPIProgram( $programname );
	    &RunMPIProgram( $programname, $np_default );
	    &CleanUpAfterRun( $programname );
	}
	close PGMS;
    }
}
elsif (-d $listfiles) { 
    print STDERR "Testing by directories not yet supported\n";
}
else {
    &RunList( $listfiles );
}

if ($xmloutput) { close XMLOUT; }
#
# ---------------------------------------------------------------------------
# Routines
# ---------------------------------------------------------------------------
sub RunList { 
    my $files = $_[0];
    
    open( LIST, "<$files" ) || die "Could not open $files\n";
    while (<LIST>) {
	s/\r?\n//;
	my ($programname,$np) = split(/\s+/,$_);
	if ($np eq "") { $np = $np_default; }
	&BuildMPIProgram( $programname );
	&RunMPIProgram( $programname, $np );
	&CleanUpAfterRun( $programname );
    }
    close( LIST );
}
#
# Run the program.  
# ToDo: Add a way to limit the time that any particular program may run.
sub RunMPIProgram {
    my ($programname,$np) = @_;
    my $found_error = 0;

    &RunPreMsg( $programname );
    if ($verbose) {
	print STDERR "$mpiexec $np_arg $np $programname\n";
    }
    unlink "err";
    open ( MPIOUT, "$mpiexec $np_arg $np $programname 2>&1 |" ) ||
	 die "Could not run $programname\n";
    $inline = "";
    while (<MPIOUT>) {
	#print STDOUT $_ if $verbose;
	# Skip FORTRAN STOP
	if (/FORTRAN STOP/) { next; }
	$inline .= $_;
	if (! /^\s*No Errors\s*$/ && !/^\s*Test Passed\s*$/) {
	    print STDERR "Unexpected output $_";
	    if (!$found_error) {
		$found_error = 1;
		$err_count ++;
	    }
	}
    }
    if ($found_error) {
	&RunTestFailed( $inline );
    }
    else { 
	&RunTestPassed;
    }
    close ( MPIOUT );
    &RunPostMsg;
}

sub BuildMPIProgram {
    my $programname = $_[0];
    if ($verbose) { print STDERR "making $programname\n"; }
    if (! -x $programname) { $remove_this_pgm = 1; }
    else { $remove_this_pgm = 0; }
    my $output = `make $programname 2>&1`;
    if (! -x $programname) {
	print STDERR "Failed to build $programname; $output\n";
    }
}

sub CleanUpAfterRun {
    my $programname = $_[0];
    if ($remove_this_pgm && $clean_pgms) {
	unlink $programname, "$programname.o";
    }
    $remove_this_pgm = 0;
}
#
# ----------------------------------------------------------------------------
# Output routines:
#  RunPreMsg( programname ) - Call before running a program
#  RunTestFailed, RunTestPassed - Call after test
#  RunPostMsg               - Call at end of each test
#
sub RunPreMsg {
    my $programname = $_[0];	
    if ($xmloutput) {
	print XMLOUT "<MPITEST>$newline<NAME>$programname</NAME>$newline";
    }
}
sub RunPostMsg {
    if ($xmloutput) {
	print XMLOUT "</MPITEST>$newline";
    }
}
sub RunTestPassed {
    if ($xmloutput) {
	print XMLOUT "<STATUS>Passed</STATUS>$newline";
    }
}
sub RunTestFailed {
    my $output = $_[0];
    $output =~ s/</\&lt;/g;
    $output =~ s/>/\&gt;/g;
    if ($xmloutput) {
	print XMLOUT "<STATUS>Failed</STATUS>$newline";
	print XMLOUT "<TESTDIFF>$output</TESTDIFF>$newline";
    }
}
