<package>
<job id="winconfigure">
<script language="VBScript">

bWin64 = False
bUseCycleCounter = True

' Process arguments
argCount = WScript.Arguments.Count
For arg = 0 To argCount - 1
  argValue = WScript.Arguments(arg)
  If argValue = "--win64" Then
    bWin64 = True
  ElseIf argValue = "--win32" Then
    bWin64 = False
  ElseIf argValue = "--enable-timer-type=x86cycle" Then
    bUseCycleCounter = True
  ElseIf argValue = "--enable-timer-type=queryperformancecounter" Then
    bUseCycleCounter = False
  ElseIf argValue = "--enable-hptiming" Then
    bUseCycleCounter = True
  ElseIf argValue = "--enable-hptiming=yes" Then
    bUseCycleCounter = True
  ElseIf argValue = "--enable-hptiming=no" Then
    bUseCycleCounter = False
  End If
Next

'
' Generate mpi.h
'

mpi_datatype_prefix = "4c00"

'
' C datatype sizes
'
If bWin64 Then
  len_short           = "02"
  len_int             = "04"
  len_long            = "04"
  len_long_long       = "08"
  len_float           = "04"
  len_double          = "08"
  len_long_double     = "08"
  len_wchar_t         = "02"
  len_float_int       = "08"
  len_double_int      = "10"
  len_long_int        = "08"
  len_short_int       = "08"
  len_2_int           = "08"
  len_long_double_int = "10"
Else
  len_short           = "02"
  len_int             = "04"
  len_long            = "04"
  len_long_long       = "08"
  len_float           = "04"
  len_double          = "08"
  len_long_double     = "08"
  len_wchar_t         = "02"
  len_float_int       = "08"
  len_double_int      = "10"
  len_long_int        = "08"
  len_short_int       = "08"
  len_2_int           = "08"
  len_long_double_int = "10"
End If

MPI_CHAR           = "0x" + mpi_datatype_prefix                 + "0101"
MPI_UNSIGNED_CHAR  = "0x" + mpi_datatype_prefix                 + "0102"
MPI_SHORT          = "0x" + mpi_datatype_prefix + len_short       + "03"
MPI_UNSIGNED_SHORT = "0x" + mpi_datatype_prefix + len_short       + "04"
MPI_INT            = "0x" + mpi_datatype_prefix + len_int         + "05"
MPI_UNSIGNED_INT   = "0x" + mpi_datatype_prefix + len_int         + "06"
MPI_LONG           = "0x" + mpi_datatype_prefix + len_long        + "07"
MPI_UNSIGNED_LONG  = "0x" + mpi_datatype_prefix + len_long        + "08"
MPI_LONG_LONG      = "0x" + mpi_datatype_prefix + len_long_long   + "09"
MPI_FLOAT          = "0x" + mpi_datatype_prefix + len_float       + "0b"
MPI_DOUBLE         = "0x" + mpi_datatype_prefix + len_double      + "0d"
MPI_LONG_DOUBLE    = "0x" + mpi_datatype_prefix + len_long_double + "0f"
MPI_BYTE           = "0x" + mpi_datatype_prefix                 + "0111"
MPI_WCHAR_T        = "0x" + mpi_datatype_prefix + len_wchar_t     + "13"
MPI_PACKED         = "0x" + mpi_datatype_prefix                 + "0114"
MPI_LB             = "0x" + mpi_datatype_prefix                 + "0015"
MPI_UB             = "0x" + mpi_datatype_prefix                 + "0016"

'
' These should define the mixed types *only* for contiguous data.
' For example, MPI_SHORT_INT may have a gap; it will need to be defined
' as a derived type instead.  For IA32, this only affects short_int.
'
MPI_FLOAT_INT       = "0x" + mpi_datatype_prefix + len_float_int       + "17"
MPI_DOUBLE_INT      = "0x" + mpi_datatype_prefix + len_double_int      + "18"
MPI_LONG_INT        = "0x" + mpi_datatype_prefix + len_long_int        + "19"
MPI_SHORT_INT       = "0x" + mpi_datatype_prefix + len_short_int       + "1a"
MPI_2INT            = "0x" + mpi_datatype_prefix + len_2_int           + "1b"
MPI_LONG_DOUBLE_INT = "0x" + mpi_datatype_prefix + len_long_double_int + "1c"

'
' Fortran datatype sizes
'
If bWin64 Then
  len_integer    = "08"
  len_double     = "08"
  len_doublecplx = "10"
  len_2dc        = "20"
Else
  len_integer    = "08"
  len_double     = "08"
  len_doublecplx = "10"
  len_2dc        = "20"
End If

MPI_CHARACTER         = "0x" + mpi_datatype_prefix                + "0120"
MPI_INTEGER           = "0x" + mpi_datatype_prefix + len_integer    + "21"
MPI_REAL              = "0x" + mpi_datatype_prefix + len_integer    + "22"
MPI_LOGICAL           = "0x" + mpi_datatype_prefix + len_integer    + "23"
MPI_COMPLEX           = "0x" + mpi_datatype_prefix + len_double     + "24"
MPI_DOUBLE_PRECISION  = "0x" + mpi_datatype_prefix + len_double     + "25"
MPI_2INTEGER          = "0x" + mpi_datatype_prefix + len_double     + "26"
MPI_2REAL             = "0x" + mpi_datatype_prefix + len_double     + "27"
MPI_DOUBLE_COMPLEX    = "0x" + mpi_datatype_prefix + len_doublecplx + "28"
MPI_2DOUBLE_PRECISION = "0x" + mpi_datatype_prefix + len_doublecplx + "29"
MPI_2COMPLEX          = "0x" + mpi_datatype_prefix + len_doublecplx + "2a"
MPI_2DOUBLE_COMPLEX   = "0x" + mpi_datatype_prefix + len_2dc        + "2b"

'
' Miscellaneous settings
'
MPI_MAX_PROCESSOR_NAME = "128"
BSEND_OVERHEAD         = "52"
If bWin64 Then
  MPI_AINT               = "__int64"
Else
  MPI_AINT               = "int"
End If
MPI_FINT               = "int"
MPI_OFFSET             = "__int64"
EXTRA_STATUS_DECL      = ""
HAVE_ROMIO             = "#include ""mpio.h"""
'HAVE_ROMIO             = ""

set f = WScript.CreateObject("Scripting.FileSystemObject")
set fout = f.CreateTextFile("src\include\mpi.h")
set fin = f.OpenTextFile("src\include\mpi.h.in")

contents = fin.ReadAll()
contents = Replace(contents, "@MPI_CHAR@", MPI_CHAR)
contents = Replace(contents, "@MPI_UNSIGNED_CHAR@", MPI_UNSIGNED_CHAR)
contents = Replace(contents, "@MPI_SHORT@", MPI_SHORT)
contents = Replace(contents, "@MPI_UNSIGNED_SHORT@", MPI_UNSIGNED_SHORT)
contents = Replace(contents, "@MPI_INT@", MPI_INT)
contents = Replace(contents, "@MPI_UNSIGNED_INT@", MPI_UNSIGNED_INT)
contents = Replace(contents, "@MPI_LONG@", MPI_LONG)
contents = Replace(contents, "@MPI_UNSIGNED_LONG@", MPI_UNSIGNED_LONG)
contents = Replace(contents, "@MPI_LONG_LONG@", MPI_LONG_LONG)
contents = Replace(contents, "@MPI_FLOAT@", MPI_FLOAT)
contents = Replace(contents, "@MPI_DOUBLE@", MPI_DOUBLE)
contents = Replace(contents, "@MPI_LONG_DOUBLE@", MPI_LONG_DOUBLE)
contents = Replace(contents, "@MPI_BYTE@", MPI_BYTE)
contents = Replace(contents, "@MPI_WCHAR_T@", MPI_WCHAR_T)
contents = Replace(contents, "@MPI_PACKED@", MPI_PACKED)
contents = Replace(contents, "@MPI_LB@", MPI_LB)
contents = Replace(contents, "@MPI_UB@", MPI_UB)
contents = Replace(contents, "@MPI_FLOAT_INT@", MPI_FLOAT_INT)
contents = Replace(contents, "@MPI_DOUBLE_INT@", MPI_DOUBLE_INT)
contents = Replace(contents, "@MPI_LONG_INT@", MPI_LONG_INT)
contents = Replace(contents, "@MPI_SHORT_INT@", MPI_SHORT_INT)
contents = Replace(contents, "@MPI_2INT@", MPI_2INT)
contents = Replace(contents, "@MPI_LONG_DOUBLE_INT@", MPI_LONG_DOUBLE_INT)
contents = Replace(contents, "@MPI_CHARACTER@", MPI_CHARACTER)
contents = Replace(contents, "@MPI_INTEGER@", MPI_INTEGER)
contents = Replace(contents, "@MPI_REAL@", MPI_REAL)
contents = Replace(contents, "@MPI_LOGICAL@", MPI_LOGICAL)
contents = Replace(contents, "@MPI_COMPLEX@", MPI_COMPLEX)
contents = Replace(contents, "@MPI_DOUBLE_PRECISION@", MPI_DOUBLE_PRECISION)
contents = Replace(contents, "@MPI_2INTEGER@", MPI_2INTEGER)
contents = Replace(contents, "@MPI_2REAL@", MPI_2REAL)
contents = Replace(contents, "@MPI_DOUBLE_COMPLEX@", MPI_DOUBLE_COMPLEX)
contents = Replace(contents, "@MPI_2DOUBLE_PRECISION@", MPI_2DOUBLE_PRECISION)
contents = Replace(contents, "@MPI_2COMPLEX@", MPI_2COMPLEX)
contents = Replace(contents, "@MPI_2DOUBLE_COMPLEX@", MPI_2DOUBLE_COMPLEX)
contents = Replace(contents, "@MPI_MAX_PROCESSOR_NAME@", MPI_MAX_PROCESSOR_NAME)
contents = Replace(contents, "@BSEND_OVERHEAD@", BSEND_OVERHEAD)
contents = Replace(contents, "@MPI_AINT@", MPI_AINT)
contents = Replace(contents, "@MPI_FINT@", MPI_FINT)
contents = Replace(contents, "@MPI_OFFSET@", MPI_OFFSET)
contents = Replace(contents, "@EXTRA_STATUS_DECL@", EXTRA_STATUS_DECL)
contents = Replace(contents, "@HAVE_ROMIO@", HAVE_ROMIO)

fout.Write(contents)
fin.Close()
fout.Close()

'
' Generate mpichtimer.h
'

set fout = f.CreateTextFile("src\include\mpichtimer.h")
set fin = f.OpenTextFile("src\mpi\timer\mpichtimer.h.in")

contents = fin.ReadAll()
If bUseCycleCounter Then
  contents = Replace(contents, "@MPICH_TIMER_KIND@", "USE_WIN86_CYCLE")
  contents = Replace(contents, "@MPID_TIMER_TYPE@", "unsigned __int64")
Else
  contents = Replace(contents, "@MPICH_TIMER_KIND@", "USE_QUERYPERFORMANCECOUNTER")
  contents = Replace(contents, "@MPID_TIMER_TYPE@", "LARGE_INTEGER")
End If

fout.Write(contents)
fin.Close()
fout.Close()


'
' Generate mpio.h
'

set fout = f.CreateTextFile("src\include\mpio.h")
set fin = f.OpenTextFile("src\mpi\romio\include\mpio.h.in")

contents = fin.ReadAll()
contents = Replace(contents, "@DEFINE_MPI_OFFSET@", "typedef __int64 MPI_Offset;")
contents = Replace(contents, "@NEEDS_MPI_FINT@", "")
contents = Replace(contents, "@HAVE_MPI_INFO@", "#define HAVE_MPI_INFO")
contents = Replace(contents, "@HAVE_MPI_DARRAY_SUBARRAY@", "")

fout.Write(contents)
fin.Close()
fout.Close()

'
' Generate romioconf.h
'

set fout = f.CreateTextFile("src\mpi\romio\adio\include\romioconf.h")

fout.WriteLine("/* -*- Mode: C; c-basic-offset:4 ; -*- */")
fout.WriteLine("/*  $Id$")
fout.WriteLine(" *")
fout.WriteLine(" *  (C) 2001 by Argonne National Laboratory.")
fout.WriteLine(" *      See COPYRIGHT in top-level directory.")
fout.WriteLine(" */")
fout.WriteLine("#ifndef ROMIOCONF_H")
fout.WriteLine("#define ROMIOCONF_H")
fout.WriteLine("")
fout.WriteLine("/* Define if `sys_siglist' is declared by <signal.h>.  */")
fout.WriteLine("#undef SYS_SIGLIST_DECLARED")
fout.WriteLine("")
fout.WriteLine("#undef AIO_HANDLE_IN_AIOCB")
fout.WriteLine("#undef AIO_PRIORITY_DEFAULT")
fout.WriteLine("#undef AIO_SIGNOTIFY_NONE")
fout.WriteLine("#undef AIO_SUN")
fout.WriteLine("#undef FREEBSD")
fout.WriteLine("#undef HAVE_LONG_LONG_64")
fout.WriteLine("#undef HAVE_MOUNT_NFS")
fout.WriteLine("#undef HAVE_MPI_COMBINERS")
fout.WriteLine("#undef HAVE_MPI_DARRAY_SUBARRAY")
fout.WriteLine("#define HAVE_MPI_INFO")
fout.WriteLine("#undef HAVE_MPI_LONG_LONG_INT")
fout.WriteLine("#undef HAVE_PRAGMA_CRI_DUP")
fout.WriteLine("#undef HAVE_PRAGMA_HP_SEC_DEF")
fout.WriteLine("#undef HAVE_PRAGMA_WEAK")
fout.WriteLine("#undef HAVE_PREAD64")
fout.WriteLine("#define HAVE_STATUS_SET_BYTES")
fout.WriteLine("#define HAVE_STRERROR")
fout.WriteLine("#undef HAVE_SYSERRLIST")
fout.WriteLine("#undef HAVE_WEAK_SYMBOLS")
fout.WriteLine("#undef HFS")
fout.WriteLine("#undef HPUX")
fout.WriteLine("#undef INT_LT_POINTER")
fout.WriteLine("#undef IRIX")
fout.WriteLine("#undef LINUX")
fout.WriteLine("#define MPICH")
fout.WriteLine("#undef MPIHP")
fout.WriteLine("#undef MPILAM")
fout.WriteLine("#undef MPISGI")
fout.WriteLine("#undef MPI_OFFSET_IS_INT")
fout.WriteLine("#undef NEEDS_MPI_TEST")
fout.WriteLine("#undef NFS")
fout.WriteLine("#undef NO_AIO")
fout.WriteLine("#undef NO_FD_IN_AIOCB")
fout.WriteLine("#undef NO_MPI_SGI_type_is_contig")
fout.WriteLine("#undef PARAGON")
fout.WriteLine("#undef PFS")
fout.WriteLine("#undef PIOFS")
fout.WriteLine("#undef PRINT_ERR_MSG")
fout.WriteLine("#undef ROMIO_PVFS")
fout.WriteLine("#undef ROMIO_TESTFS")
fout.WriteLine("#undef SFS")
fout.WriteLine("#undef SOLARIS")
fout.WriteLine("#undef SPPUX")
fout.WriteLine("#undef SX4")
fout.WriteLine("#undef UFS")
fout.WriteLine("#undef XFS")
fout.WriteLine("")
fout.WriteLine("#ifndef ROMIO_NTFS")
fout.WriteLine("#define ROMIO_NTFS")
fout.WriteLine("#endif")
fout.WriteLine("#ifndef HAVE_INT64")
fout.WriteLine("#define HAVE_INT64 1")
fout.WriteLine("#endif")
fout.WriteLine("")
fout.WriteLine("#ifndef HAS_MPIR_ERR_SETMSG")
fout.WriteLine("#define HAS_MPIR_ERR_SETMSG")
fout.WriteLine("#endif")
fout.WriteLine("#ifndef MPICH")
fout.WriteLine("#define MPICH")
fout.WriteLine("#endif")
fout.WriteLine("#ifndef HAVE_STATUS_SET_BYTES")
fout.WriteLine("#define HAVE_STATUS_SET_BYTES")
fout.WriteLine("#endif")
fout.WriteLine("")
fout.WriteLine("#ifndef FORTRANDOUBLEUNDERSCORE")
fout.WriteLine("#define FORTRANCAPS")
fout.WriteLine("#endif")
fout.WriteLine("")
fout.WriteLine("#endif")

fout.Close()

</script>
</job>
</package>
