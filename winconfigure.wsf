<package>
<job id="winconfigure">
    <runtime>
        <description>This script generates header files for MPICH</description>
        <unnamed
            name = "--force"
            helpstring = "Force the creation of new files, overwriting the old"
            required = "false"
        />
        <unnamed
            name = "--force=no"
            helpstring = "Only create files that do not already exist"
            required = "false"
        />
        <unnamed
            name = "--win64"
            helpstring = "Generate sizes for 64 bit Windows"
            required = "false"
        />
        <unnamed
            name = "--win32"
            helpstring = "Generate sizes for 32 bit Windows"
            required = "false"
        />
        <unnamed
            name = "--enable-timer-type=x86cycle"
            helpstring = "Use the Pentium rdtsc instruction for timing"
            required = "false"
        />
        <unnamed
            name = "--enable-timer-type=queryperformancecounter"
            helpstring = "Use QueryPerformanceCounter for timing"
            required = "false"
        />
        <unnamed
			name = "--with-mcxx"
			helpstring = "Generate the managed C++ interface"
			required = "false"
		/>
		<unnamed
			name = "--f77_name_lower"
			helpstring = "Generate lowercase Fortran interface"
			required = "false"
		/>
		<unnamed
			name = "--f77_name_lower_uscore"
			helpstring = "Generate lowercase Fortran interface with one underscore"
			required = "false"
		/>
		<unnamed
			name = "--f77_name_lower_2uscore"
			helpstring = "Generate lowercase Fortran interface with two underscores"
			required = "false"
		/>
		<unnamed
			name = "--f77_name_upper"
			helpstring = "Generate uppercase Fortran interface"
			required = "false"
		/>
		<unnamed
			name = "--f77_name_mixed"
			helpstring = "Generate mixed case Fortran interface"
			required = "false"
		/>
		<unnamed
			name = "--f77_name_mixed_uscore"
			helpstring = "Generate mixed case Fortran interface with one underscore"
			required = "false"
		/>
        <example>Example: winconfigure.wsf --force</example>
    </runtime>
<script language="VBScript">

bWin64 = False
bUseCycleCounter = True
bForce = True
bMcxx = False
bf77_name_lower = False
bf77_name_lower_uscore = False
bf77_name_lower_2uscore = False
bf77_name_upper = True
bf77_name_mixed = False
b77_name_mixed_uscore = False
unhandled_definitions = ""

' Process arguments
argCount = WScript.Arguments.Count
For arg = 0 To argCount - 1
  argValue = WScript.Arguments(arg)
  If argValue = "--win64" Then
    bWin64 = True
  ElseIf argValue = "--win32" Then
    bWin64 = False
  ElseIf argValue = "--enable-timer-type=x86cycle" Then
    bUseCycleCounter = True
  ElseIf argValue = "--enable-timer-type=queryperformancecounter" Then
    bUseCycleCounter = False
  ElseIf argValue = "--enable-hptiming" Then
    bUseCycleCounter = True
  ElseIf argValue = "--enable-hptiming=yes" Then
    bUseCycleCounter = True
  ElseIf argValue = "--enable-hptiming=no" Then
    bUseCycleCounter = False
  ElseIf argValue = "--force" Then
    bForce = True
  ElseIf argValue = "--force=yes" Then
    bForce = True
  ElseIf argValue = "--force=no" Then
    bForce = False
  ElseIf argValue = "--with-mcxx" Then
	bMcxx = True
  ElseIf argValue = "--f77_name_lower" Then
	bf77_name_lower = True
  ElseIf argValue = "--f77_name_lower_uscore" Then
	bf77_name_lower_uscore = True
  ElseIf argValue = "--f77_name_lower_2uscore" Then
	bf77_name_loser_2uscore = True
  ElseIf argValue = "--f77_name_upper" Then
	bf77_name_upper = True
  ElseIf argValue = "--f77_name_mixed" Then
	bf77_name_mixed = True
  ElseIf argValue = "--f77_name_mixed_uscore" Then
	b77_name_mixed_uscore = True
  ElseIf argValue = "--help" Then
    WScript.Arguments.ShowUsage
    WScript.Quit
  End If
Next

'
' Generate mpi.h
'

mpi_datatype_prefix = "4c00"

'
' C datatype sizes
'
If bWin64 Then
  len_short           = "02"
  len_int             = "04"
  len_long            = "04"
  len_long_long       = "08"
  len_float           = "04"
  len_double          = "08"
  len_long_double     = "08"
  len_wchar_t         = "02"
  len_float_int       = "08"
  len_double_int      = "10"
  len_long_int        = "08"
  len_short_int       = "08"
  len_2_int           = "08"
  len_long_double_int = "10"
Else
  len_short           = "02"
  len_int             = "04"
  len_long            = "04"
  len_long_long       = "08"
  len_float           = "04"
  len_double          = "08"
  len_long_double     = "08"
  len_wchar_t         = "02"
  len_float_int       = "08"
  len_double_int      = "10"
  len_long_int        = "08"
  len_short_int       = "08"
  len_2_int           = "08"
  len_long_double_int = "10"
End If

MPI_CHAR           = "0x" + mpi_datatype_prefix                 + "0101"
MPI_UNSIGNED_CHAR  = "0x" + mpi_datatype_prefix                 + "0102"
MPI_BYTE           = "0x" + mpi_datatype_prefix                 + "010d"
MPI_WCHAR_T        = "0x" + mpi_datatype_prefix + len_wchar_t     + "0e"
MPI_SHORT          = "0x" + mpi_datatype_prefix + len_short       + "03"
MPI_UNSIGNED_SHORT = "0x" + mpi_datatype_prefix + len_short       + "04"
MPI_INT            = "0x" + mpi_datatype_prefix + len_int         + "05"
MPI_UNSIGNED       = "0x" + mpi_datatype_prefix + len_int         + "06"
MPI_LONG           = "0x" + mpi_datatype_prefix + len_long        + "07"
MPI_UNSIGNED_LONG  = "0x" + mpi_datatype_prefix + len_long        + "08"
MPI_LONG_LONG      = "0x" + mpi_datatype_prefix + len_long_long   + "09"
MPI_FLOAT          = "0x" + mpi_datatype_prefix + len_float       + "0a"
MPI_DOUBLE         = "0x" + mpi_datatype_prefix + len_double      + "0b"
MPI_LONG_DOUBLE    = "0x" + mpi_datatype_prefix + len_long_double + "0c"
MPI_PACKED         = "0x" + mpi_datatype_prefix                 + "0114"
MPI_LB             = "0x" + mpi_datatype_prefix                 + "0015"
MPI_UB             = "0x" + mpi_datatype_prefix                 + "0016"

MPI_REAL4          = "0x" + mpi_datatype_prefix                 + "0425"
MPI_REAL8          = "0x" + mpi_datatype_prefix                 + "0827"
'MPI_REAL16         = "0x" + mpi_datatype_prefix                 + "1029"
MPI_REAL16         = "MPI_DATATYPE_NULL"
MPI_COMPLEX8       = "0x" + mpi_datatype_prefix                 + "0826"
MPI_COMPLEX16      = "0x" + mpi_datatype_prefix                 + "1028"
'MPI_COMPLEX32      = "0x" + mpi_datatype_prefix                 + "2030"
MPI_COMPLEX32      = "MPI_DATATYPE_NULL"
MPI_INTEGER1       = "0x" + mpi_datatype_prefix                 + "012b"
MPI_INTEGER2       = "0x" + mpi_datatype_prefix                 + "022c"
MPI_INTEGER4       = "0x" + mpi_datatype_prefix                 + "042d"
MPI_INTEGER8       = "0x" + mpi_datatype_prefix                 + "082e"
'MPI_INTEGER16      = "0x" + mpi_datatype_prefix                 + "102f"
MPI_INTEGER16      = "MPI_DATATYPE_NULL"

'
' These should define the mixed types *only* for contiguous data.
' For example, MPI_SHORT_INT may have a gap; it will need to be defined
' as a derived type instead.  For IA32, this only affects short_int.
'
MPI_FLOAT_INT       = "0x" + mpi_datatype_prefix + len_float_int       + "17"
MPI_DOUBLE_INT      = "0x" + mpi_datatype_prefix + len_double_int      + "18"
MPI_LONG_INT        = "0x" + mpi_datatype_prefix + len_long_int        + "19"
MPI_SHORT_INT       = "0x" + mpi_datatype_prefix + len_short_int       + "1a"
MPI_2INT            = "0x" + mpi_datatype_prefix + len_2_int           + "1b"
MPI_LONG_DOUBLE_INT = "0x" + mpi_datatype_prefix + len_long_double_int + "1c"

'
' Fortran datatype sizes
'
If bWin64 Then
  len_integer    = "08"
  len_double     = "08"
  len_doublecplx = "10"
  len_2dc        = "20"
Else
  len_integer    = "08"
  len_double     = "08"
  len_doublecplx = "10"
  len_2dc        = "20"
End If

MPI_CHARACTER         = "0x" + mpi_datatype_prefix                + "0120"
MPI_INTEGER           = "0x" + mpi_datatype_prefix + len_integer    + "21"
MPI_REAL              = "0x" + mpi_datatype_prefix + len_integer    + "22"
MPI_LOGICAL           = "0x" + mpi_datatype_prefix + len_integer    + "23"
MPI_COMPLEX           = "0x" + mpi_datatype_prefix + len_double     + "24"
MPI_DOUBLE_PRECISION  = "0x" + mpi_datatype_prefix + len_double     + "25"
MPI_2INTEGER          = "0x" + mpi_datatype_prefix + len_double     + "26"
MPI_2REAL             = "0x" + mpi_datatype_prefix + len_double     + "27"
MPI_DOUBLE_COMPLEX    = "0x" + mpi_datatype_prefix + len_doublecplx + "28"
MPI_2DOUBLE_PRECISION = "0x" + mpi_datatype_prefix + len_doublecplx + "29"
MPI_2COMPLEX          = "0x" + mpi_datatype_prefix + len_doublecplx + "2a"
MPI_2DOUBLE_COMPLEX   = "0x" + mpi_datatype_prefix + len_2dc        + "2b"

F77_COMPLEX8          = MPI_COMPLEX
F77_COMPLEX16         = MPI_DOUBLE_COMPLEX
F77_COMPLEX32         = MPI_2DOUBLE_COMPLEX
F77_INTEGER1          = "" '"0x" + mpi_datatype_prefix + "01"
F77_INTEGER2          = "" '"0x" + mpi_datatype_prefix + "02"
F77_INTEGER4          = "" '"0x" + mpi_datatype_prefix + "04"
F77_INTEGER8          = "" '"0x" + mpi_datatype_prefix + "08"
F77_INTEGER16         = "" '"0x" + mpi_datatype_prefix + "10"
F77_REAL4             = "" '"0x" + mpi_datatype_prefix + "04"
F77_REAL8             = "" '"0x" + mpi_datatype_prefix + "08"
F77_REAL16            = "" '"0x" + mpi_datatype_prefix + "10"

'
' Miscellaneous settings
'
MPI_MAX_PROCESSOR_NAME = "128"
BSEND_OVERHEAD         = "52"
If bWin64 Then
  MPI_AINT               = "__int64"
Else
  MPI_AINT               = "int"
End If
MPI_FINT               = "int"
MPI_OFFSET             = "__int64"
EXTRA_STATUS_DECL      = ""
HAVE_ROMIO             = "#include ""mpio.h"""
'HAVE_ROMIO             = ""

set f = WScript.CreateObject("Scripting.FileSystemObject")
set fout = f.CreateTextFile("src\include\mpi.h")
set fin = f.OpenTextFile("src\include\mpi.h.in")

contents = fin.ReadAll()
contents = Replace(contents, "@MPI_CHAR@", MPI_CHAR)
contents = Replace(contents, "@MPI_UNSIGNED_CHAR@", MPI_UNSIGNED_CHAR)
contents = Replace(contents, "@MPI_SHORT@", MPI_SHORT)
contents = Replace(contents, "@MPI_UNSIGNED_SHORT@", MPI_UNSIGNED_SHORT)
contents = Replace(contents, "@MPI_INT@", MPI_INT)
contents = Replace(contents, "@MPI_UNSIGNED@", MPI_UNSIGNED)
contents = Replace(contents, "@MPI_UNSIGNED_INT@", MPI_UNSIGNED)
contents = Replace(contents, "@MPI_LONG@", MPI_LONG)
contents = Replace(contents, "@MPI_UNSIGNED_LONG@", MPI_UNSIGNED_LONG)
contents = Replace(contents, "@MPI_LONG_LONG@", MPI_LONG_LONG)
contents = Replace(contents, "@MPI_FLOAT@", MPI_FLOAT)
contents = Replace(contents, "@MPI_DOUBLE@", MPI_DOUBLE)
contents = Replace(contents, "@MPI_LONG_DOUBLE@", MPI_LONG_DOUBLE)
contents = Replace(contents, "@MPI_BYTE@", MPI_BYTE)
contents = Replace(contents, "@MPI_WCHAR_T@", MPI_WCHAR_T)
contents = Replace(contents, "@MPI_PACKED@", MPI_PACKED)
contents = Replace(contents, "@MPI_LB@", MPI_LB)
contents = Replace(contents, "@MPI_UB@", MPI_UB)
contents = Replace(contents, "@MPI_FLOAT_INT@", MPI_FLOAT_INT)
contents = Replace(contents, "@MPI_DOUBLE_INT@", MPI_DOUBLE_INT)
contents = Replace(contents, "@MPI_LONG_INT@", MPI_LONG_INT)
contents = Replace(contents, "@MPI_SHORT_INT@", MPI_SHORT_INT)
contents = Replace(contents, "@MPI_2INT@", MPI_2INT)
contents = Replace(contents, "@MPI_LONG_DOUBLE_INT@", MPI_LONG_DOUBLE_INT)
contents = Replace(contents, "@MPI_CHARACTER@", MPI_CHARACTER)
contents = Replace(contents, "@MPI_INTEGER@", MPI_INTEGER)
contents = Replace(contents, "@MPI_REAL@", MPI_REAL)
contents = Replace(contents, "@MPI_LOGICAL@", MPI_LOGICAL)
contents = Replace(contents, "@MPI_COMPLEX@", MPI_COMPLEX)
contents = Replace(contents, "@MPI_DOUBLE_PRECISION@", MPI_DOUBLE_PRECISION)
contents = Replace(contents, "@MPI_2INTEGER@", MPI_2INTEGER)
contents = Replace(contents, "@MPI_2REAL@", MPI_2REAL)
contents = Replace(contents, "@MPI_DOUBLE_COMPLEX@", MPI_DOUBLE_COMPLEX)
contents = Replace(contents, "@MPI_2DOUBLE_PRECISION@", MPI_2DOUBLE_PRECISION)
contents = Replace(contents, "@MPI_2COMPLEX@", MPI_2COMPLEX)
contents = Replace(contents, "@MPI_2DOUBLE_COMPLEX@", MPI_2DOUBLE_COMPLEX)
contents = Replace(contents, "@MPI_MAX_PROCESSOR_NAME@", MPI_MAX_PROCESSOR_NAME)
contents = Replace(contents, "@BSEND_OVERHEAD@", BSEND_OVERHEAD)
contents = Replace(contents, "@MPI_AINT@", MPI_AINT)
contents = Replace(contents, "@MPI_FINT@", MPI_FINT)
contents = Replace(contents, "@MPI_OFFSET@", MPI_OFFSET)
contents = Replace(contents, "@EXTRA_STATUS_DECL@", EXTRA_STATUS_DECL)
contents = Replace(contents, "@HAVE_ROMIO@", HAVE_ROMIO)
contents = Replace(contents, "@MPI_REAL4@", MPI_REAL4)
contents = Replace(contents, "@MPI_REAL8@", MPI_REAL8)
contents = Replace(contents, "@MPI_REAL16@", MPI_REAL16)
contents = Replace(contents, "@MPI_COMPLEX8@", MPI_COMPLEX8)
contents = Replace(contents, "@MPI_COMPLEX16@", MPI_COMPLEX16)
contents = Replace(contents, "@MPI_COMPLEX32@", MPI_COMPLEX32)
contents = Replace(contents, "@MPI_INTEGER1@", MPI_INTEGER1)
contents = Replace(contents, "@MPI_INTEGER2@", MPI_INTEGER2)
contents = Replace(contents, "@MPI_INTEGER4@", MPI_INTEGER4)
contents = Replace(contents, "@MPI_INTEGER8@", MPI_INTEGER8)
contents = Replace(contents, "@MPI_INTEGER16@", MPI_INTEGER16)

fout.Write(contents)
fin.Close()
fout.Close()

'
' Generate mpichtimer.h
'

set fout = f.CreateTextFile("src\include\mpichtimer.h")
set fin = f.OpenTextFile("src\mpi\timer\mpichtimer.h.in")

contents = fin.ReadAll()
If bUseCycleCounter Then
  contents = Replace(contents, "@MPICH_TIMER_KIND@", "USE_WIN86_CYCLE")
  contents = Replace(contents, "@MPID_TIMER_TYPE@", "unsigned __int64")
Else
  contents = Replace(contents, "@MPICH_TIMER_KIND@", "USE_QUERYPERFORMANCECOUNTER")
  contents = Replace(contents, "@MPID_TIMER_TYPE@", "LARGE_INTEGER")
End If

fout.Write(contents)
fin.Close()
fout.Close()


'
' Generate mpio.h
'

set fout = f.CreateTextFile("src\include\mpio.h")
set fin = f.OpenTextFile("src\mpi\romio\include\mpio.h.in")

contents = fin.ReadAll()
contents = Replace(contents, "@DEFINE_MPI_OFFSET@", "typedef __int64 MPI_Offset;")
contents = Replace(contents, "@NEEDS_MPI_FINT@", "")
contents = Replace(contents, "@HAVE_MPI_INFO@", "#define HAVE_MPI_INFO")
contents = Replace(contents, "@HAVE_MPI_DARRAY_SUBARRAY@", "")
contents = Replace(contents, "@DEFINE_HAVE_MPI_GREQUEST@", "#define DEFINE_HAVE_MPI_GREQUEST")

fout.Write(contents)
fin.Close()
fout.Close()

'
' Generate romioconf.h
'

set fout = f.CreateTextFile("src\mpi\romio\adio\include\romioconf.h")

fout.WriteLine("/* -*- Mode: C; c-basic-offset:4 ; -*- */")
fout.WriteLine("/*")
fout.WriteLine(" *  (C) 2001 by Argonne National Laboratory.")
fout.WriteLine(" *      See COPYRIGHT in top-level directory.")
fout.WriteLine(" */")
fout.WriteLine("#ifndef ROMIOCONF_H")
fout.WriteLine("#define ROMIOCONF_H")
fout.WriteLine("")
fout.WriteLine("/* Define if `sys_siglist' is declared by <signal.h>.  */")
fout.WriteLine("#undef SYS_SIGLIST_DECLARED")
fout.WriteLine("")
fout.WriteLine("#undef AIO_HANDLE_IN_AIOCB")
fout.WriteLine("#undef AIO_PRIORITY_DEFAULT")
fout.WriteLine("#undef AIO_SIGNOTIFY_NONE")
fout.WriteLine("#undef AIO_SUN")
fout.WriteLine("#undef FREEBSD")
fout.WriteLine("#undef HAVE_LONG_LONG_64")
fout.WriteLine("#undef HAVE_MOUNT_NFS")
fout.WriteLine("#undef HAVE_MPI_COMBINERS")
fout.WriteLine("#undef HAVE_MPI_DARRAY_SUBARRAY")
fout.WriteLine("#define HAVE_MPI_INFO")
fout.WriteLine("#undef HAVE_MPI_LONG_LONG_INT")
fout.WriteLine("#undef HAVE_PRAGMA_CRI_DUP")
fout.WriteLine("#undef HAVE_PRAGMA_HP_SEC_DEF")
fout.WriteLine("#undef HAVE_PRAGMA_WEAK")
fout.WriteLine("#undef HAVE_PREAD64")
fout.WriteLine("#define HAVE_STATUS_SET_BYTES")
fout.WriteLine("#define HAVE_STRERROR")
fout.WriteLine("#undef HAVE_SYSERRLIST")
fout.WriteLine("#undef HAVE_WEAK_SYMBOLS")
fout.WriteLine("#undef HFS")
fout.WriteLine("#undef HPUX")
fout.WriteLine("#undef INT_LT_POINTER")
fout.WriteLine("#undef IRIX")
fout.WriteLine("#undef LINUX")
fout.WriteLine("#define MPICH")
fout.WriteLine("#undef MPIHP")
fout.WriteLine("#undef MPILAM")
fout.WriteLine("#undef MPISGI")
fout.WriteLine("#undef MPI_OFFSET_IS_INT")
fout.WriteLine("#undef NEEDS_MPI_TEST")
fout.WriteLine("#undef NFS")
fout.WriteLine("#undef NO_AIO")
fout.WriteLine("#undef NO_FD_IN_AIOCB")
fout.WriteLine("#undef NO_MPI_SGI_type_is_contig")
fout.WriteLine("#undef PARAGON")
fout.WriteLine("#undef PFS")
fout.WriteLine("#undef PIOFS")
fout.WriteLine("#undef PRINT_ERR_MSG")
fout.WriteLine("#undef ROMIO_PVFS")
fout.WriteLine("#undef ROMIO_TESTFS")
fout.WriteLine("#undef SFS")
fout.WriteLine("#undef SOLARIS")
fout.WriteLine("#undef SPPUX")
fout.WriteLine("#undef SX4")
fout.WriteLine("#undef UFS")
fout.WriteLine("#undef XFS")
fout.WriteLine("")
fout.WriteLine("#ifndef ROMIO_NTFS")
fout.WriteLine("#define ROMIO_NTFS")
fout.WriteLine("#endif")
fout.WriteLine("#ifndef HAVE_INT64")
fout.WriteLine("#define HAVE_INT64 1")
fout.WriteLine("#endif")
fout.WriteLine("")
fout.WriteLine("#ifndef HAS_MPIR_ERR_SETMSG")
fout.WriteLine("#define HAS_MPIR_ERR_SETMSG")
fout.WriteLine("#endif")
fout.WriteLine("#ifndef MPICH")
fout.WriteLine("#define MPICH")
fout.WriteLine("#endif")
fout.WriteLine("#ifndef HAVE_STATUS_SET_BYTES")
fout.WriteLine("#define HAVE_STATUS_SET_BYTES")
fout.WriteLine("#endif")
fout.WriteLine("")
fout.WriteLine("#ifndef FORTRANDOUBLEUNDERSCORE")
fout.WriteLine("#define FORTRANCAPS")
fout.WriteLine("#endif")
fout.WriteLine("")
fout.WriteLine("#endif")

fout.Close()

'
' Generate mpicxx.h
'

Dim WshShell

If bForce Or Not f.FileExists("src\binding\cxx\mpicxx.h.in") Then

  Set WshShell = CreateObject("WScript.Shell")
  WshShell.CurrentDirectory = "src\binding\cxx"
  WshShell.Run "perl buildiface -nosep -noromio", 0, true
  WshShell.CurrentDirectory = "..\..\.."

End If

If f.FileExists("src\binding\cxx\mpicxx.h.in") Then

  set fin = f.OpenTextFile("src\binding\cxx\mpicxx.h.in")
  set fout = f.CreateTextFile("src\include\mpicxx.h")
  contents = fin.ReadAll()
  contents = Replace(contents, "@HAVE_CXX_EXCEPTIONS@", "1")
  fout.Write(contents)
  fin.Close()
  fout.Close()

Else

  WScript.Echo("Run ""perl buildiface -nosep -noromio"" from the src\binding\cxx directory before running winconfigure")
  
End IF


'
' Generate mpimcxx.h
'

If bMcxx Then

	If bForce Or Not f.FileExists("src\binding\mcxx\mpimcxx.h.in") Then

		Set WshShell = CreateObject("WScript.Shell")
		WshShell.CurrentDirectory = "src\binding\mcxx"
		WshShell.Run "perl buildiface -nosep -noromio", 0, true
		WhShell.CurrentDirectory = "..\..\.."

	End If

	If f.FileExists("src\binding\mcxx\mpimcxx.h.in") Then

		set fin = f.OpenTextFile("src\binding\mcxx\mpimcxx.h.in")
		set fout = f.CreateTextFile("src\include\mpimcxx.h")
		contents = fin.ReadAll()
		contents = Replace(contents, "@HAVE_CXX_EXCEPTIONS@", "1")
		fout.Write(contents)
		fin.Close()
		fout.Close()

	Else

		WScript.Echo("Run ""perl buildiface -nosep -noromio"" from the src\binding\mcxx directory before running winconfigure")
  
	End If
	
End If


'
' Generate mpif.h
'

If bForce Or Not f.FileExists("src\binding\f77\mpif.h.in") Then

  Set WshShell = CreateObject("WScript.Shell")
  WshShell.CurrentDirectory = "src\binding\f77"
  WshShell.Run "perl buildiface", 0, true
  WshShell.CurrentDirectory = "..\..\.."

End If

If f.FileExists("src\binding\f77\mpif.h.in") Then

  set fin = f.OpenTextFile("src\binding\f77\mpif.h.in")
  set fout = f.CreateTextFile("src\include\mpif.h")
  contents = fin.ReadAll()
' Add the replacements for mpif.h here
  contents = Replace(contents, "@ADDRESS_KIND@", "4")
  contents = Replace(contents, "@OFFSET_KIND@", "4")
  contents = Replace(contents, "@BSEND_OVERHEAD@", BSEND_OVERHEAD)
  contents = Replace(contents, "@F77_COMPLEX16@", F77_COMPLEX16)
  contents = Replace(contents, "@F77_COMPLEX32@", F77_COMPLEX32)
  contents = Replace(contents, "@F77_COMPLEX8@", F77_COMPLEX8)
  contents = Replace(contents, "@F77_INTEGER1@", F77_INTEGER1)
  contents = Replace(contents, "@F77_INTEGER2@", F77_INTEGER2)
  contents = Replace(contents, "@F77_INTEGER4@", F77_INTEGER4)
  contents = Replace(contents, "@F77_INTEGER8@", F77_INTEGER8)
  contents = Replace(contents, "@F77_INTEGER16@", F77_INTEGER16)
  contents = Replace(contents, "@F77_REAL4@", F77_REAL4)
  contents = Replace(contents, "@F77_REAL8@", F77_REAL8)
  contents = Replace(contents, "@F77_REAL16@", F77_REAL16)
  contents = Replace(contents, "@MPI_2COMPLEX@", MPI_2COMPLEX)
  contents = Replace(contents, "@MPI_2DOUBLE_COMPLEX@", MPI_2DOUBLE_COMPLEX)
  contents = Replace(contents, "@MPI_2DOUBLE_PRECISION@", MPI_2DOUBLE_PRECISION)
  contents = Replace(contents, "@MPI_2INTEGER@", MPI_2INTEGER)
  contents = Replace(contents, "@MPI_2REAL@", MPI_2REAL)
  contents = Replace(contents, "@MPI_CHARACTER@", MPI_CHARACTER)
  contents = Replace(contents, "@MPI_COMPLEX@", MPI_COMPLEX)
  contents = Replace(contents, "@MPI_DOUBLE_COMPLEX@", MPI_DOUBLE_COMPLEX)
  contents = Replace(contents, "@MPI_DOUBLE_PRECISION@", MPI_DOUBLE_PRECISION)
  contents = Replace(contents, "@MPI_INTEGER@", MPI_INTEGER)
  contents = Replace(contents, "@MPI_LB@", MPI_LB)
  contents = Replace(contents, "@MPI_LOGICAL@", MPI_LOGICAL)
  contents = Replace(contents, "@MPI_MAX_PROCESSOR_NAME@", MPI_MAX_PROCESSOR_NAME)
  contents = Replace(contents, "@MPI_PACKED@", MPI_PACKED)
  contents = Replace(contents, "@MPI_REAL@", MPI_REAL)
  contents = Replace(contents, "@MPI_STATUS_SIZE@", "5")
  contents = Replace(contents, "@MPI_UB@", MPI_UB)
  fout.Write(contents)
  fin.Close()
  fout.Close()

Else

  WScript.Echo("Run ""perl buildiface"" from the src\binding\f77 directory before running winconfigure")

End IF

'
' Generate F90 module files
'

If bForce Or Not f.FileExists("src\binding\f90\mpi.f90") Then

  Set WshShell = CreateObject("WScript.Shell")
  WshShell.CurrentDirectory = "src\binding\f90"
  WshShell.Run "perl buildiface", 0, true
  WshShell.CurrentDirectory = "..\..\.."

End If

If Not f.FileExists("src\binding\f90\mpi.f90") Then

  WScript.Echo("Run ""perl buildiface"" from the src\binding\f90 directory to generate the F90 modules")
  
End IF

'
' Validate .in files
'

Function RegExpFind(pattern, str)
   Dim regEx, Match, Matches           ' Create variable.
   Set regEx = New RegExp              ' Create a regular expression.
   regEx.Pattern = pattern             ' Set pattern.
   regEx.IgnoreCase = True             ' Set case insensitivity.
   regEx.Global = True                 ' Set global applicability.
   Set Matches = regEx.Execute(str)    ' Execute search.
   For Each Match in Matches           ' Return the first match
      RegExpFind = Match.Value
      Exit For
   Next
End Function

Sub AddDefinitions( fout, filename )
	If f.FileExists( filename ) Then
		Set f2 = f.OpenTextFile( filename )
		Dim regEx, Match, Matches
		Set regEx = New RegExp
		contents = f2.ReadAll()
		regEx.Pattern = "/\*.*\*/[\r\n]*#undef.*[\r\n]*"
		regEx.IgnoreCase = True
		regEx.Global = True
		Set Matches = regEx.Execute(contents)
		For Each Match in Matches
			comment = RegExpFind("/\*.*\*/", Match.Value)
			define = RegExpFind("#undef.*", Match.Value)
			define = Mid(define, 8)
			define = Replace(define, vbNewLine, " ")
			define = Replace(define, vbCr, " ")
			define = Replace(define, vbLf, " ")
			define = Trim(define)
			fout.WriteLine(comment)
			Select Case define
				Case "HAVE_INT16_T"
					fout.WriteLine("/* #undef HAVE_INT16_T */")
				Case "HAVE_INT32_T"
					fout.WriteLine("/* #undef HAVE_INT32_T */")
				Case "HAVE_INT64_T"
					fout.WriteLine("/* #undef HAVE_INT64_T */")
				Case "const"
					fout.WriteLine("/* #undef const */")
				Case "inline"
					fout.WriteLine("#define inline __inline")
				Case "STDC_HEADERS"
					fout.WriteLine("#define STDC_HEADERS 1")
				Case "SIZEOF_DOUBLE"
					fout.WriteLine("#define SIZEOF_DOUBLE 8")
				Case "SIZEOF_FLOAT"
					fout.WriteLine("#define SIZEOF_FLOAT 4")
				Case "SIZEOF_INT"
					fout.WriteLine("#define SIZEOF_INT 4")
				Case "SIZEOF_LONG"
					fout.WriteLine("#define SIZEOF_LONG 4")
				Case "SIZEOF_LONG_DOUBLE"
					fout.WriteLine("#define SIZEOF_LONG_DOUBLE 12")
				Case "SIZEOF_LONG_LONG"
					fout.WriteLine("/*#define SIZEOF_LONG_LONG 8*/")
				Case "SIZEOF_SHORT"
					fout.WriteLine("#define SIZEOF_SHORT 2")
				Case "SIZEOF_VOID_P"
					fout.WriteLine("#define SIZEOF_VOID_P 4")
				Case "SIZEOF_WCHAR_T"
					fout.WriteLine("#define SIZEOF_WCHAR_T 2")
				Case "HAVE_GETCWD"
					fout.WriteLine("#define HAVE_GETCWD 1")
				Case "HAVE_GETHOSTNAME"
					fout.WriteLine("#define HAVE_GETHOSTNAME 1")
				Case "HAVE_PUTENV"
					fout.WriteLine("#define HAVE_PUTENV 1")
				Case "HAVE_SELECT"
					fout.WriteLine("#define HAVE_SELECT 1")
				Case "HAVE_SLEEP"
					fout.WriteLine("#define HAVE_SLEEP 1")
				Case "HAVE_SOCKET"
					fout.WriteLine("#define HAVE_SOCKET 1")
				Case "HAVE_STRDUP"
					fout.WriteLine("#define HAVE_STRDUP 1")
				Case "HAVE_ERRNO_H"
					fout.WriteLine("#define HAVE_ERRNO_H 1")
				Case "HAVE_FCNTL_H"
					fout.WriteLine("#define HAVE_FCNTL_H 1")
				Case "HAVE_STDLIB_H"
					fout.WriteLine("#define HAVE_STDLIB_H 1")
				Case "HAVE_STDIO_H"
					fout.WriteLine("#define HAVE_STDIO_H")
				Case "HAVE_ERROR_CHECKING"
					fout.WriteLine("#define HAVE_ERROR_CHECKING MPID_ERROR_LEVEL_ALL")
					fout.WriteLine("/*#undef HAVE_ERROR_CHECKING*/")
				Case "HAVE_TIMING MPID_TIMING_KIND_LOG"
					fout.WriteLine("/*#define HAVE_TIMING MPID_TIMING_KIND_LOG*/")
				Case "HAVE_TIMING MPID_TIMING_KIND_ALL"
					fout.WriteLine("/*#define HAVE_TIMING MPID_TIMING_KIND_ALL*/")
				Case "USE_LOGGING MPID_LOGGING_RLOG"
					fout.WriteLine("/*#define USE_LOGGING MPID_LOGGING_RLOG*/")
				Case "USE_LOGGING MPID_LOGGING_DLOG"
					fout.WriteLine("/*#define USE_LOGGING MPID_LOGGING_DLOG*/")
				Case "MPICH_SINGLE_THREADED"
					fout.WriteLine("#define MPICH_SINGLE_THREADED ")
				Case "USE_MEMORY_TRACING"
					fout.WriteLine("/* #undef USE_MEMORY_TRACING */")
				Case "restrict"
					fout.WriteLine("#define restrict")
				Case "CHAR_PTR_IS_BYTE"
					fout.WriteLine("/* #undef CHAR_PTR_IS_BYTE */")
				Case "HAVE_GCC_AND_PENTIUM_ASM"
					fout.WriteLine("/* #undef HAVE_GCC_AND_PENTIUM_ASM */")
				Case "HAVE_INTTYPES_H"
					fout.WriteLine("/* #undef HAVE_INTTYPES_H */")
				Case "HAVE_MEMORY_H"
					fout.WriteLine("/* #undef HAVE_MEMORY_H */")
				Case "HAVE_PRAGMA_CRI_DUP"
					fout.WriteLine("/* #undef HAVE_PRAGMA_CRI_DUP */")
				Case "HAVE_PRAGMA_HP_SEC_DEF"
					fout.WriteLine("/* #undef HAVE_PRAGMA_HP_SEC_DEF */")
				Case "HAVE_PRAGMA_WEAK"
					fout.WriteLine("/* #undef HAVE_PRAGMA_WEAK */")
				Case "HAVE_PTHREAD_CREATE"
					fout.WriteLine("/* #undef HAVE_PTHREAD_CREATE */")
				Case "HAVE_STDINT_H"
					fout.WriteLine("/* #undef HAVE_STDINT_H */")
				Case "HAVE_STRINGS_H"
					fout.WriteLine("/* #undef HAVE_STRINGS_H */")
				Case "HAVE_STRING_H"
					fout.WriteLine("#define HAVE_STRING_H")
				Case "HAVE_SYS_STAT_H"
					fout.WriteLine("/* #undef HAVE_SYS_STAT_H */")
				Case "HAVE_SYS_TYPES_H"
					fout.WriteLine("/* #undef HAVE_SYS_TYPES_H */")
				Case "HAVE_THR_CREATE"
					fout.WriteLine("/* #undef HAVE_THR_CREATE */")
				Case "HAVE_TIMING"
					fout.WriteLine("/* #undef HAVE_TIMING */")
				Case "HAVE_UNISTD_H"
					fout.WriteLine("/* #undef HAVE_UNISTD_H */")
				Case "SIZEOF_INT_IS_AINT"
					fout.WriteLine("/* #undef SIZEOF_INT_IS_AINT */")
				Case "volatile"
					fout.WriteLine("/* #undef volatile */")
				Case "HAVE_GETTIMEOFDAY"
					fout.WriteLine("/*#define HAVE_GETTIMEOFDAY 1*/")
				Case "HAVE_MUTEX_INIT"
					fout.WriteLine("/* #undef HAVE_MUTEX_INIT */")
				Case "HAVE_PTHREAD_MUTEXATTR_INIT"
					fout.WriteLine("/*#define HAVE_PTHREAD_MUTEXATTR_INIT 1*/")
				Case "HAVE_PTHREAD_MUTEXATTR_SETPSHARED"
					fout.WriteLine("/*#define HAVE_PTHREAD_MUTEXATTR_SETPSHARED 1*/")
				Case "HAVE_SCHED_YIELD"
					fout.WriteLine("/*#define HAVE_SCHED_YIELD 1*/")
				Case "HAVE_SHMAT"
					fout.WriteLine("/* #undef HAVE_SHMAT */")
				Case "HAVE_SHMCTL"
					fout.WriteLine("/* #undef HAVE_SHMCTL */")
				Case "HAVE_SHMDT"
					fout.WriteLine("/* #undef HAVE_SHMDT */")
				Case "HAVE_SHMGET"
					fout.WriteLine("/* #undef HAVE_SHMGET */")
				Case "HAVE_USLEEP"
					fout.WriteLine("/*#define HAVE_USLEEP 1*/")
				Case "HAVE_YIELD"
					fout.WriteLine("/* #undef HAVE_YIELD */")
				Case "HAVE_LINUX_UNISTD_H"
					fout.WriteLine("/* #undef HAVE_LINUX_UNISTD_H */")
				Case "HAVE_NETDB_H"
					fout.WriteLine("/*#define HAVE_NETDB_H 1*/")
				Case "HAVE_NETINET_IN_H"
					fout.WriteLine("/*#define HAVE_NETINET_IN_H 1*/")
				Case "HAVE_NETINET_TCP_H"
					fout.WriteLine("/*#define HAVE_NETINET_TCP_H 1*/")
				Case "HAVE_PTHREAD_H"
					fout.WriteLine("/*#define HAVE_PTHREAD_H 1*/")
				Case "HAVE_SCHED_H"
					fout.WriteLine("/*#define HAVE_SCHED_H 1*/")
				Case "HAVE_SYS_FILIO_H"
					fout.WriteLine("/* #undef HAVE_SYS_FILIO_H */")
				Case "HAVE_SYS_IOCTL_H"
					fout.WriteLine("/*#define HAVE_SYS_IOCTL_H 1*/")
				Case "HAVE_SYS_IPC_H"
					fout.WriteLine("/* #undef HAVE_SYS_IPC_H */")
				Case "HAVE_SYS_PARAM_H"
					fout.WriteLine("/*#define HAVE_SYS_PARAM_H 1*/")
				Case "HAVE_SYS_PTRACE_H"
					fout.WriteLine("/* #undef HAVE_SYS_PTRACE_H */")
				Case "HAVE_SYS_SELECT_H"
					fout.WriteLine("/*#define HAVE_SYS_SELECT_H 1*/")
				Case "HAVE_SYS_SEM_H"
					fout.WriteLine("/* #undef HAVE_SYS_SEM_H */")
				Case "HAVE_SYS_SHM_H"
					fout.WriteLine("/* #undef HAVE_SYS_SHM_H */")
				Case "HAVE_SYS_SOCKET_H"
					fout.WriteLine("/*#define HAVE_SYS_SOCKET_H 1*/")
				Case "HAVE_SYS_TIME_H"
					fout.WriteLine("/*#define HAVE_SYS_TIME_H 1*/")
				Case "HAVE_SYS_UIO_H"
					fout.WriteLine("/*#define HAVE_SYS_UIO_H 1*/")
				Case "HAVE_SYS_WAIT_H"
					fout.WriteLine("/*#define HAVE_SYS_WAIT_H 1*/")
				Case "HAVE_VALUES_H"
					fout.WriteLine("/* #undef HAVE_VALUES_H */")
				Case "HAVE_LIBTHREAD"
					fout.WriteLine("/* #undef HAVE_LIBTHREAD */")
				Case "HAVE_ASSERT_H"
					fout.WriteLine("#define HAVE_ASSERT_H 1")
				Case "HAVE_LIMITS_H"
					fout.WriteLine("#define HAVE_LIMITS_H")
				Case "COLLECT_STATS"
					fout.WriteLine("/* #undef COLLECT_STATS */")
				Case "FILE_NAMEPUB_BASEDIR"
					fout.WriteLine("/* #undef FILE_NAMEPUB_BASEDIR */")
				Case "HAVE_CXX_BINDING"
					fout.WriteLine("#define HAVE_CXX_BINDING")
				Case "HAVE_DEBUGGER_SUPPORT"
					fout.WriteLine("/* #undef HAVE_DEBUGGER_SUPPORT */")
				Case "HAVE_DGETTEXT"
					fout.WriteLine("/* #undef HAVE_DGETTEXT */")
				Case "HAVE_FORTRAN_BINDING"
					fout.WriteLine("/* #undef HAVE_FORTRAN_BINDING */")
				Case "HAVE_GCC_ATTRIBUTE"
					fout.WriteLine("/* #undef HAVE_GCC_ATTRIBUTE */")
				Case "HAVE_GETTEXT"
					fout.WriteLine("/* #undef HAVE_GETTEXT */")
				Case "HAVE_LARGEST_STRUCT_ALIGNMENT"
					fout.WriteLine("/* #undef HAVE_LARGEST_STRUCT_ALIGNMENT */")
				Case "HAVE_LIBINTL_H"
					fout.WriteLine("/* #undef HAVE_LIBINTL_H */")
				Case "HAVE_LONG_DOUBLE"
					fout.WriteLine("/* #undef HAVE_LONG_DOUBLE */")
				Case "HAVE_LONG_LONG_INT"
					fout.WriteLine("/* #undef HAVE_LONG_LONG_INT */")
				Case "HAVE_MAX_STRUCT_ALIGNMENT"
					fout.WriteLine("/* #undef HAVE_MAX_STRUCT_ALIGNMENT */")
				Case "HAVE_NAMEPUB_SERVICE"
					fout.WriteLine("/* #undef HAVE_NAMEPUB_SERVICE */")
				Case "HAVE_NO_FORTRAN_MPI_TYPES_IN_C"
					fout.WriteLine("/* #undef HAVE_NO_FORTRAN_MPI_TYPES_IN_C */")
				Case "HAVE_ROMIO"
					fout.WriteLine("/* #undef HAVE_ROMIO */")
				Case "HAVE_SEARCH"
					fout.WriteLine("/* #undef HAVE_SEARCH */")
				Case "HAVE_SNPRINTF"
					fout.WriteLine("#define HAVE_SNPRINTF")
				Case "HAVE_STDARG_H"
					fout.WriteLine("#define HAVE_STDARG_H")
				Case "HAVE_SYS_BITYPES_H"
					fout.WriteLine("/* #undef HAVE_SYS_BITYPES_H */")
				Case "HAVE_THREAD_H"
					fout.WriteLine("/* #undef HAVE_THREAD_H */")
				Case "HAVE_THR_YIELD"
					fout.WriteLine("/* #undef HAVE_THR_YIELD */")
				Case "HAVE_TSEARCH"
					fout.WriteLine("/* #undef HAVE_TSEARCH */")
				Case "HAVE_VA_COPY"
					fout.WriteLine("/* #undef HAVE_VA_COPY */")
				Case "HAVE_VSNPRINTF"
					fout.WriteLine("#define HAVE_VSNPRINTF")
				Case "HAVE_VSPRINTF"
					fout.WriteLine("#define HAVE_VSPRINTF")
				Case "MPICH_DEBUG_HANDLES"
					fout.WriteLine("/* #undef HAVE_MPICH_DEBUG_HANDLES */")
				Case "MPICH_DEBUG_INTERNAL"
					fout.WriteLine("/* #undef MPICH_DEBUG_INTERNAL */")
				Case "MPICH_DEBUG_NESTING"
					fout.WriteLine("/* #undef MPICH_DEBUG_NESTING */")
				Case "MPICH_ERROR_MSG_LEVEL"
					fout.WriteLine("#define MPICH_ERROR_MSG_LEVEL MPICH_ERROR_MSG_ALL")
				Case "MPICH_INFODLL_LOC"
					fout.WriteLine("/* #undef MPICH_INFODLL_LOC */")
				Case "MPIU_INT16_T"
					fout.WriteLine("#define MPIU_INT16_T __int16")
				Case "MPIU_INT32_T"
					fout.WriteLine("#define MPIU_INT32_T __int32")
				Case "MPIU_INT64_T"
					fout.WriteLine("#define MPIU_INT64_T __int64")
				Case "MPIU_SIZE_T"
					fout.WriteLine("#define MPIU_SIZE_T unsigned int")
				Case "NDEBUG"
					fout.WriteLine("/* #undef NDEBUG */")
				Case "NEEDS_POINTER_ALIGNMENT_ADJUST"
					fout.WriteLine("/* #undef NEEDS_POINTER_ALIGNMENT_ADJUST */")
				Case "NEEDS_SNPRINTF_DECL"
					fout.WriteLine("/* #undef NEEDS_SNPRINTF_DECL */")
				Case "NEEDS_STRDUP_DECL"
					fout.WriteLine("/* #undef NEEDS_STRDUP_DECL */")
				Case "PACKAGE_BUGREPORT"
					fout.WriteLine("/* #undef PACKAGE_BUGREPORT */")
				Case "PACKAGE_NAME"
					fout.WriteLine("/* #undef PACKAGE_NAME */")
				Case "PACKAGE_STRING"
					fout.WriteLine("/* #undef PACKAGE_STRING */")
				Case "PACKAGE_TARNAME"
					fout.WriteLine("/* #undef PACKAGE_TARNAME */")
				Case "PACKAGE_VERSION"
					fout.WriteLine("/* #undef PACKAGE_VERSION */")
				Case "USE_COVERAGE"
					fout.WriteLine("/* #undef USE_COVERAGE */")
				Case "USE_FILE_FOR_NAMEPUB"
					fout.WriteLine("/* #undef USE_FILE_FOR_NAMEPUB */")
				Case "USE_GETTEXT"
					fout.WriteLine("/* #undef USE_GETTEXT */")
				Case "USE_LDAP_FOR_NAMEPUB"
					fout.WriteLine("/* #undef USE_LDAP_FOR_NAMEPUB */")
				Case "USE_LOGGING"
					fout.WriteLine("/* #undef USE_LOGGING */")
				Case "USE_TSEARCH_WITH_CHARP"
					fout.WriteLine("/* #undef USE_TSEARCH_WITH_CHARP */")
				Case "USE_WEAK_SYMBOLS"
					fout.WriteLine("/* #undef USE_WEAK_SYMBOLS */")
				Case "HAVE_CPP_VARARGS"
					fout.WriteLine("/* #undef HAVE_CPP_VARARGS */")
				Case "HAVE_CLOCK_GETRES"
					fout.WriteLine("/* #undef HAVE_CLOCK_GETRES */")
				Case "HAVE_CLOCK_GETTIME"
					fout.WriteLine("/* #undef HAVE_CLOCK_GETTIME */")
				Case "HAVE_GETHRTIME"
					fout.WriteLine("/* #undef HAVE_GETHRTIME */")
				Case "HAVE_MPI_WIN_CREATE"
					fout.WriteLine("#define HAVE_MPI_WIN_CREATE 1")
				Case "HAVE_COMPARE_AND_SWAP"
					fout.WriteLine("/* #undef HAVE_COMPARE_AND_SWAP */")
				Case "HAVE_DLFCN_H"
					fout.WriteLine("/* #undef HAVE_DLFCN_H */")
				Case "HAVE_UUID_UUID_H"
					fout.WriteLine("/* #undef HAVE_UUID_UUID_H */")
				Case "HAVE_GCC_ASM_AND_X86_LFENCE"
					fout.WriteLine("/* #undef HAVE_GCC_ASM_AND_X86_LFENCE */")
				Case "HAVE_GCC_ASM_AND_X86_MFENCE"
					fout.WriteLine("/* #undef HAVE_GCC_ASM_AND_X86_MFENCE */")
				Case "HAVE_GCC_ASM_AND_X86_SFENCE"
					fout.WriteLine("/* #undef HAVE_GCC_ASM_AND_X86_SFENCE */")
				Case "HAVE_MMAP"
					fout.WriteLine("/* #undef HAVE_MMAP */")
				Case "HAVE_MPP_SHMEM_H"
					fout.WriteLine("/* #undef HAVE_MPP_SHMEM_H */")
				Case "HAVE_SHM_OPEN"
					fout.WriteLine("/* #undef HAVE_SHM_OPEN */")
				Case "HAVE_SHM_UNLINK"
					fout.WriteLine("/* #undef HAVE_SHM_UNLINK */")
				Case "HAVE_SYS_MMAN_H"
					fout.WriteLine("/* #undef HAVE_SYS_MMAN_H */")
				Case "HAVE_SYSCONF"
					fout.WriteLine("/* #undef HAVE_SYSCONF */")
				Case "HAVE_NET_IF_H"
					fout.WriteLine("/* #undef HAVE_NET_IF_H */")
				Case "HAVE_SYS_SOCKIO_H"
					fout.WriteLine("/* #undef HAVE_SYS_SOCKIO_H */")
				Case "HAVE_ARPA_INET_H"
					fout.WriteLIne("/* #undef HAVE_ARPA_INET_H */")
				Case "HAVE_CTYPE_H"
					fout.WriteLine("#define HAVE_CTYPE_H")
				Case "HAVE_GETPAGESIZE"
					fout.WriteLine("/* #undef HAVE_GETPAGESIZE */")
				Case "HAVE_MQUEUE_H"
					fout.WriteLine("/* #undef HAVE_MQUEUE_H */")
				Case "HAVE_MQ_OPEN"
					fout.WriteLine("/* #undef HAVE_MQ_OPEN */")
				Case "HAVE_MSGGET"
					fout.WriteLine("/* #undef HAVE_MSGGET */")
				Case "HAVE_PROCESS_H"
					fout.WriteLine("#define HAVE_PROCESS_H")
				Case "MPICH_CPU_TICK_TYPE"
					fout.WriteLine("#define MPICH_CPU_TICK_TYPE USE_WIN_X86_CYCLE_ASM")
				Case "USE_BUSY_LOCKS"
					fout.WriteLine("/* #undef USE_BUSY_LOCKS */")
				Case "USE_MQSHM"
					fout.WriteLine("/* #undef USE_MQSHM */")
				Case "USE_ATOMIC_UPDATES"
					fout.WriteLine("/* #undef USE_ATOMIC_UPDATES */")
				Case "F77_FALSE_VALUE"
					fout.WriteLine("#define F77_FALSE_VALUE 0")
				Case "F77_TRUE_VALUE"
					fout.WriteLine("#define F77_TRUE_VALUE 1")
				Case "F77_TRUE_VALUE_SET"
					fout.WriteLine("#define F77_TRUE_VALUE_SET 1")
				Case "F77_RUNTIME_VALUES"
					fout.WriteLine("/* #undef F77_RUNTIME_VALUES */")
				Case "HAVE_AINT_LARGER_THAN_FINT"
					fout.WriteLine("/* #undef HAVE_AINT_LARGER_THAN_FINT */")
				Case "HAVE_FINT_IS_INT"
					fout.WriteLine("/* #undef HAVE_FINT_IS_INT */")
				Case "HAVE_LONG_LONG"
					fout.WriteLine("/* #undef HAVE_LONG_LONG */")
				Case "HAVE_WEAK_SYMBOLS"
					fout.WriteLine("/* #undef HAVE_WEAK_SYMBOLS */")
				Case "SIZEOF_CHAR"
					fout.WriteLine("#define SIZEOF_CHAR 1")
				Case "SIZEOF_F77_DOUBLE_PRECISION"
					fout.WriteLine("#define SIZEOF_F77_DOUBLE_PRECISION 8")
				Case "SIZEOF_F77_INTEGER"
					fout.WriteLine("#define SIZEOF_F77_INTEGER 4")
				Case "SIZEOF_F77_REAL"
					fout.WriteLine("#define SIZEOF_F77_REAL 4")
				Case "SIZEOF_VOIDP"
					If bWin64 Then
						fout.WriteLine("#define SIZEOF_VOIDP 8")
					Else
						fout.WriteLine("#define SIZEOF_VOIDP 4")
					End If
				Case "USE_GCC_G77_DECLS"
					fout.WriteLine("/* #undef USE_GCC_G77_DECLS */")
				Case "USE_POINTER_FOR_BOTTOM"
					fout.WriteLine("/* #undef USE_POINTER_FOR_BOTTOM */")
				Case "_TWO_WORD_FCD"
					fout.WriteLine("/* #undef _TWO_WORD_FCD */")
				Case "FORTRAN_SPECIAL_FUNCTION_PTR"
					fout.WriteLine("/* #undef FORTRAN_SPECIAL_FUNCTION_PTR */")
				Case "F77_NAME_LOWER"
					If bf77_name_lower Then
						fout.WriteLine("#define F77_NAME_LOWER")
					Else
						fout.WriteLine("/* #undef F77_NAME_LOWER */")
					End If
				Case "F77_NAME_LOWER_USCORE"
					If b77_name_lower_uscore Then
						fout.WriteLine("#define F77_NAME_LOWER_USCORE")
					Else
						fout.WriteLine("/* #undef F77_NAME_LOWER_USCORE */")
					End If
				Case "F77_NAME_LOWER_2USCORE"
					If bf77_name_lower_2uscore Then
						fout.WriteLine("#define F77_NAME_LOWER_2USCORE 1")
					Else
						fout.WriteLine("/* #undef F77_NAME_LOWER_2USCORE */")
					End If
				Case "F77_NAME_UPPER"
					if b77_name_upper Then
						fout.WriteLine("#define F77_NAME_UPPER")
					Else
						fout.WriteLine("/* #undef F77_NAME_UPPER */")
					End If
				Case "F77_NAME_MIXED"
					if b77_name_mixed Then
						fout.WriteLine("#define F77_NAME_MIXED 1")
					Else
						fout.WriteLine("/* #undef F77_NAME_MIXED */")
					End If
				Case "F77_NAME_MIXED_USCORE"
					if b77_name_mixed_uscore Then
						fout.WriteLine("#define F77_NAME_MIXED_USCORE 1")
					Else
						fout.WriteLine("/* #undef F77_NAME_MIXED_USCORE */")
					End If
				Case "HAVE_NSLINKMODULE"
					fout.WriteLine("/* #undef HAVE_NSLINKMODULE */")
				Case "HAVE_DLOPEN"
					fout.WriteLine("/* #undef HAVE_DLOPEN */")
				Case "HAVE_MACH_O_DYLD_H"
					fout.WriteLine("/* #undef HAVE_MACH_O_DYLD_H */")
				Case Else
					'MsgBox("Unhandled definition <" & define & ">")
					unhandled_definitions = unhandled_definitions & define & vbNewLine
					fout.WriteLine("/* unknown definition: " & define & " */")
			End Select
			fout.WriteLine("")
		Next
	End If
End Sub

'
' Generate the conf.h files
'

header = "/* -*- Mode: C; c-basic-offset:4 ; -*- */" & vbNewLine & "/*" & vbNewLine & " *  (C) 2001 by Argonne National Laboratory." & vbNewLine & " *      See COPYRIGHT in top-level directory." & vbNewLine & " */"

Sub WriteHeader( fout, str )
	fout.WriteLine( header )
	fout.WriteLine("")
	fout.WriteLine("#ifndef " & UCase(str) & "CONF_H")
	fout.WriteLine("#define " & UCase(str) & "CONF_H")
	fout.WriteLine("")
	fout.WriteLine("/* " & str & "conf.h.  Generated automatically by winconfigure.  */")
	fout.WriteLine("")
End Sub

Sub WriteFooter( fout )
	fout.WriteLine("")
	fout.WriteLine("#endif")
End Sub

'
' mpi_fortconf.h
'
Set fout = f.CreateTextFile("src\binding\f77\mpi_fortconf.h")
Call WriteHeader(fout, "mpi_fort")
Call AddDefinitions(fout, "src\binding\f77\mpi_fortconf.h.in")
Call WriteFooter(fout)
fout.Close()

'
' mpichconf.h
'
Set fout = f.CreateTextFile("src\include\mpichconf.h")
Call WriteHeader(fout, "mpich")
Call AddDefinitions(fout, "src\include\mpichconf.h.in")
fout.WriteLine("#define HAVE_PROCESS_H")
fout.WriteLine("#ifndef HAVE_WINDOWS_H")
fout.WriteLine("#define HAVE_WINDOWS_H")
fout.WriteLine("#endif")
fout.WriteLine("#define HAVE_WINDOWS_SOCKET")
fout.WriteLine("#define HAVE_WINSOCK2_H")
fout.WriteLine("#define HAVE_WIN32_SLEEP")
fout.WriteLine("#define HAVE_NT_LOCKS")
fout.WriteLine("#define HAVE_MAPVIEWOFFILE")
fout.WriteLine("#define HAVE_CREATEFILEMAPPING")
fout.WriteLine("#define HAVE_INTERLOCKEDEXCHANGE")
fout.WriteLine("#define HAVE_BOOL")
fout.WriteLine("")
fout.WriteLine("#define snprintf _snprintf")
fout.WriteLine("#define vsnprintf _vsnprintf")
fout.WriteLine("#define inline __inline")
fout.WriteLine("")
fout.WriteLine("#define WITH_SOCK_TYPE SOCK_IOCP")
fout.WriteLine("")
fout.WriteLine("/* Define if building mpich in development mode */")
fout.WriteLine("#define MPICH_DEV_BUILD")
fout.WriteLine("")
fout.WriteLine("/*#define MPICH_MPI_FROM_PMPI*/")
fout.WriteLine("#define USE_PROCESS_LOCKS 1")
fout.WriteLine("")
fout.WriteLine("/*#define MPICH_DBG_OUTPUT*/")
fout.WriteLine("#define HAVE_CXX_BINDING")
fout.WriteLine("")
fout.WriteLine("#define USE_WINTHREADS")
fout.WriteLine("")
fout.WriteLine("#ifndef HAVE_INT64")
fout.WriteLine("#define HAVE_INT64 1")
fout.WriteLine("#endif")
Call WriteFooter(fout)
fout.Close()

'
' mpidi_ch3_conf.h
'
Set fout = f.CreateTextFile("src\mpid\ch3\include\mpidi_ch3_conf.h")
Call WriteHeader(fout, "mpidi_ch3_")
Call AddDefinitions(fout, "src\mpid\ch3\include\mpidi_ch3_conf.h.in")
fout.WriteLine("#define EWOULDBLOCK EAGAIN")
fout.WriteLine("#define HAVE_WINTHREADS")
fout.WriteLine("#define MPICH_CPU_TICK_TYPE USE_WIN_X86_CYCLE_ASM")
Call WriteFooter(fout)
fout.Close()

'
' timerconf.h
'
Set fout = f.CreateTextFile("src\mpi\timer\timerconf.h")
Call WriteHeader(fout, "timer")
Call AddDefinitions(fout, "src\mpi\timer\timerconf.h.in")
Call WriteFooter(fout)
fout.Close()

'
' mpid_locksconf.h
'
Set fout = f.CreateTextFile("src\mpid\common\locks\mpid_locksconf.h")
Call WriteHeader(fout, "mpid_locks")
Call AddDefinitions(fout, "src\mpid\common\locks\mpid_locksconf.h.in")
Call WriteFooter(fout)
fout.Close()

'
' mpidu_sock_conf.h
'
Set fout = f.CreateTextFile("src\mpid\common\sock\mpidu_sock_conf.h")
Call WriteHeader(fout, "mpidu_sock_")
Call AddDefinitions(fout, "src\mpid\common\sock\mpidu_sock_conf.h.in")
Call WriteFooter(fout)
fout.Close()

'
' pmiconf.h
'
Set fout = f.CreateTextFile("src\pmi\smpd\pmiconf.h")
Call WriteHeader(fout, "pmi")
Call AddDefinitions(fout, "src\pmi\smpd\pmiconf.h.in")
fout.WriteLine("#ifndef HAVE_WINDOWS_H")
fout.WriteLine("#define HAVE_WINDOWS_H")
fout.WriteLine("#endif")
Call WriteFooter(fout)
fout.Close()

'
' mpidi_ch3i_rdma_conf.h
'
Set fout = f.CreateTextFile("src\mpid\ch3\channels\rdma\include\mpidi_ch3i_rdma_conf.h")
Call WriteHeader(fout, "mpidi_ch3i_rdma_")
Call AddDefinitions(fout, "src\mpid\ch3\channels\rdma\include\mpidi_ch3i_rdma_conf.h.in")
fout.WriteLine("#define USE_BUSY_LOCKS")
Call WriteFooter(fout)
fout.Close()

'
' mpidi_ch3i_shm_conf.h
'
Set fout = f.CreateTextFile("src\mpid\ch3\channels\shm\include\mpidi_ch3i_shm_conf.h")
Call WriteHeader(fout, "mpidi_ch3i_shm_")
Call AddDefinitions(fout, "src\mpid\ch3\channels\shm\include\mpidi_ch3i_shm_conf.h.in")
fout.WriteLine("#define USE_BUSY_LOCKS")
fout.WriteLine("#define HAVE_SHARED_PROCESS_READ")
Call WriteFooter(fout)
fout.Close()

'
' mpidi_ch3i_sock_conf.h
'
Set fout = f.CreateTextFile("src\mpid\ch3\channels\sock\include\mpidi_ch3i_sock_conf.h")
Call WriteHeader(fout, "mpidi_ch3i_sock_")
Call AddDefinitions(fout, "src\mpid\ch3\channels\sock\include\mpidi_ch3i_sock_conf.h.in")
Call WriteFooter(fout)
fout.Close()

'
' mpidi_ch3i_ssm_conf.h
'
Set fout = f.CreateTextFile("src\mpid\ch3\channels\ssm\include\mpidi_ch3i_ssm_conf.h")
Call WriteHeader(fout, "mpidi_ch3i_ssm_")
Call AddDefinitions(fout, "src\mpid\ch3\channels\ssm\include\mpidi_ch3i_ssm_conf.h.in")
Call WriteFooter(fout)
fout.Close()

'
' trace_impl.h
'
Set fout = f.CreateTextFile("src\util\logging\rlog\trace_impl.h")
Call WriteHeader(fout, "trace_impl")
'Call AddDefinitions(fout, "src\util\logging\rlog\trace_impl.h.in")
fout.WriteLine("#define HAVE_CTYPE_H")
fout.WriteLine("#define HAVE_STDLIB_H")
fout.WriteLine("#define HAVE_STRING_H")
Call WriteFooter(fout)
fout.Close()

'
' mpitestconf.h
'
'Set fout = f.CreateTextFile("test\mpi\include\mpitestconf.h")
Set fout = f.CreateTextFile("src\include\mpitestconf.h") ' Let's avoid adding a new include path to the test projects
Call WriteHeader(fout, "mpitest")
Call AddDefinitions(fout, "test\mpi\include\mpitestconf.h.in")
Call WriteFooter(fout)
fout.Close()

'
' fooconf.h
'
'Set fout = f.CreateTextFile("src\include\fooconf.h")
'Call WriteHeader(fout, "foo")
'Call AddDefinitions(fout, "src\include\fooconf.h.in")
'fout.WriteLine("foo specific stuff")
'Call WriteFooter(fout)
'fout.Close()

'
' Generate mpicc
'
vbLessThan = "<"
vbGreaterThan = ">"
path_to_mpich = f.GetAbsolutePathName("winconfigure.wsf")
path_to_mpich = Left(path_to_mpich, Len(path_to_mpich) - 16)
If Not f.FolderExists("bin") Then
	f.CreateFolder("bin")
End If
Set fout = f.CreateTextFile("bin\mpicc.wsf")
fout.WriteLine(vbLessThan & "package" & vbGreaterThan)
fout.WriteLine(vbLessThan & "job id=""mpicc""" & vbGreaterThan)
fout.WriteLine("    " & vbLessThan & "runtime" & vbGreaterThan)
fout.WriteLine("        " & vbLessThan & "description" & vbGreaterThan & "This script compiles C console MPICH2 applications" & vbLessThan & "/description" & vbGreaterThan)
fout.WriteLine("        " & vbLessThan & "unnamed")
fout.WriteLine("            name = ""file""")
fout.WriteLine("            helpstring = ""List the source files to compile""")
fout.WriteLine("            many = ""true""")
fout.WriteLine("            required = ""1""")
fout.WriteLine("        /" & vbGreaterThan)
fout.WriteLine("        " & vbLessThan & "named")
fout.WriteLine("            name = ""out""")
fout.WriteLine("            helpstring = ""Name of the output executable, default=myapp.exe""")
fout.WriteLine("            type = ""string""")
fout.WriteLine("            required = ""false""")
fout.WriteLine("        /" & vbGreaterThan)
fout.WriteLine("        " & vbLessThan & "example" & vbGreaterThan & "Example: mpicc main.c /out:foobar.exe" & vbLessThan & "/example" & vbGreaterThan)
fout.WriteLine("    " & vbLessThan & "/runtime" & vbGreaterThan)
fout.WriteLine(vbLessThan & "script language=""VBScript""" & vbGreaterThan)
fout.WriteLine("")
fout.WriteLine("' Set defaults")
fout.WriteLine("outputExe = ""myapp.exe""")
fout.WriteLine("")
fout.WriteLine("If WScript.Arguments.Unnamed.Count = 0 Then")
fout.WriteLine("    WScript.Arguments.ShowUsage")
fout.WriteLine("    WScript.Quit")
fout.WriteLine("End If")
fout.WriteLine("")
fout.WriteLine("Set f = WScript.CreateObject(""Scripting.FileSystemObject"")")
fout.WriteLine("")
fout.WriteLine("' Process named arguments")
fout.WriteLine("If WScript.Arguments.Named.Exists(""out"") Then")
fout.WriteLine("	outputExe = WScript.Arguments.Named.Item(""out"")")
fout.WriteLine("End If")
fout.WriteLine("")
fout.WriteLine("' Create a new instance of Visual Studio .NET.")
fout.WriteLine("Set DTE = WScript.CreateObject(""VisualStudio.DTE.7.1"")")
fout.WriteLine("Set solution = DTE.Solution")
fout.WriteLine("solution.Open(""" & path_to_mpich & "examples\windows\skeleton\skeleton.sln"")")
fout.WriteLine("Set project = solution.Projects.Item(1)")
fout.WriteLine("")
fout.WriteLine("' Add the C files to the project")
fout.WriteLine("Set Cfiles = WScript.Arguments.Unnamed")
fout.WriteLine("For arg = 0 To Cfiles.Count - 1")
fout.WriteLine("	Cfile = Cfiles(arg)")
fout.WriteLine("	Cfile = f.GetAbsolutePathName(Cfile)")
fout.WriteLine("	project.ProjectItems.AddFromFile(Cfile)")
fout.WriteLine("Next")
fout.WriteLine("")
fout.WriteLine("' Build the solution")
fout.WriteLine("solution.SolutionBuild.Build()")
fout.WriteLine("")
fout.WriteLine("While solution.SolutionBuild.BuildState " & vbLessThan & vbGreaterThan & " 3")
fout.WriteLine("	WScript.Sleep 1000")
fout.WriteLine("Wend")
fout.WriteLine("")
fout.WriteLine("' Save the output on error")
fout.WriteLine("If solution.SolutionBuild.LastBuildInfo " & vbLessThan & vbGreaterThan & " 0 Then")
fout.WriteLine("	WScript.Echo ""Build failed""")
fout.WriteLine("	Set shell = WScript.CreateObject(""WScript.shell"")")
fout.WriteLine("	shell.run """ & path_to_mpich & "examples\windows\skeleton\Debug\BuildLog.htm""")
fout.WriteLine("End If")
fout.WriteLine("")
fout.WriteLine("' Remove the C files from the project")
fout.WriteLine("For i = 1 To project.ProjectItems.Count")
fout.WriteLine("	If project.ProjectItems.Item(i).Name = ""Source Files"" Then")
fout.WriteLine("		index = i")
fout.WriteLine("	End If")
fout.WriteLine("Next")
fout.WriteLine("For arg = 0 To Cfiles.Count - 1")
fout.WriteLine("	Cfile = Cfiles(arg)")
fout.WriteLine("	Cfile = f.GetFileName(Cfile)")
fout.WriteLine("	For i = project.ProjectItems.Item(index).ProjectItems.Count To 1 Step -1")
fout.WriteLine("		If project.ProjectItems.Item(index).ProjectItems.Item(i).Name = Cfile Then")
fout.WriteLine("			project.ProjectItems.Item(index).ProjectItems.Item(i).Remove()")
fout.WriteLine("		End If")
fout.WriteLine("	Next")
fout.WriteLine("Next")
fout.WriteLine("")
fout.WriteLine("' Copy the executable")
fout.WriteLine("If f.FileExists(""" & path_to_mpich & "examples\windows\skeleton\Debug\skeleton.exe"") Then")
fout.WriteLine("	f.CopyFile """ & path_to_mpich & "examples\windows\skeleton\Debug\skeleton.exe"", outputExe, True")
fout.WriteLine("End If")
fout.WriteLine("")
fout.WriteLine("' Clean up")
fout.WriteLine("solution.SolutionBuild.Clean()")
fout.WriteLine("")
fout.WriteLine(vbLessThan & "/script" & vbGreaterThan)
fout.WriteLine(vbLessThan & "/job" & vbGreaterThan)
fout.WriteLine(vbLessThan & "/package" & vbGreaterThan)
fout.Close()

'
' Report any errors
'
If unhandled_definitions <> "" Then
	MsgBox "Unhandled definitions:" & vbNewLine & unhandled_definitions
End If

</script>
</job>
</package>
