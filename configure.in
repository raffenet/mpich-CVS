dnl Process this file with autoconf to produce a configure script.
dnl
dnl aclocal_cache.m4, included by sowing/confdb/aclocal.m4, fixes 
dnl bugs in autoconf caching.
dnl
dnl The file name here refers to a file in the source being configured
AC_INIT(src/include/mpiimpl.h)
dnl
echo "Configuring MPICH2 with $@"
dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
AC_CONFIG_HEADER(src/include/mpichconf.h)
dnl
dnl Set the directory that contains support scripts such as install-sh and
dnl config.guess
AC_CONFIG_AUX_DIR(confdb)
dnl
dnl Use AC_ARG_ENABLE to look for --enable-feature and AC_ARG_WITH to look for
dnl --with-capability
dnl
dnl Enable better caching control
PAC_ARG_CACHING
dnl
AC_ARG_ENABLE(echo, 
[--enable-echo  - Turn on strong echoing. The default is enable=no.] ,set -x)
dnl
dnl # MPICH-1 used -Wshadow as well.
AC_ARG_ENABLE(strict,[--enable-strict - Turn on strict debugging with gcc],
CFLAGS="$CFLAGS -O2 -Wall -Wstrict-prototypes -Wmissing-prototypes -Wundef -Wpointer-arith -Wbad-function-cast -ansi")
dnl
AC_ARG_ENABLE(coverage,
[--enable-coverage - Turn on coverage analysis using gcc and gcov],
CFLAGS="$CFLAGS -fprofile-arcs -ftest-coverage")
dnl
AC_ARG_ENABLE(error-checking,
[--enable-error-checking=level - Control the amount of error checking.  
level may be 
    no        - no error checking
    runtime   - error checking controllable at runtime through environment 
                variables
    all       - error checking always enabled],,enable_error_checking=all)
dnl
AC_ARG_ENABLE(error-messages,
[--enable-error-messages=level - Control the amount of detail in error 
  messages.  Level may be
    all       - Maximum amount of information
    generic   - Only generic messages (no information about the specific
                instance)
    class     - One message per MPI error class
    none      - No messages],,enable_error_messages=all)
dnl
AC_ARG_ENABLE(timing,
[--enable-timing=level - Control the amount of timing information 
collected by the MPICH implementation.  level may be
    none    - Collect no data
    all     - Collect lots of data
    runtime - Runtime control of data collected
The default is none.],,enable_timing=none)
dnl
dnl Set single for now
AC_ARG_ENABLE(threads,
[--enable-threads=level - Control the level of thread support in the 
MPICH implementation.  level may be 
    single - Single threaded (MPI_THREAD_SINGLE and MPI_THREAD_FUNNELED)
    multiple - Multithreaded (MPI_THREAD_SERIAL and MPI_THREAD_MULTIPLE)],,
enable_threads=single)
dnl
dnl NOT YET COMPLETE: make use of this value to turn MPI_Wtime into
dnl a macro in mpi.h
AC_ARG_ENABLE(mpi-macros,
[--enable-mpi-macros - Implement MPI_Wtime and MPI_Wtick as C macros
The default is no.],
,enable_mpi_macros=no)
dnl
AC_ARG_ENABLE(g,
[--enable-g=option - Control the level of debugging support in the MPICH
implementation.  option may be a list of common separated names including
    none   - No debugging
    mem    - Memory usage tracing
    handle - Trace handle operations
    dbg    - Add compiler -g flags
    all    - All of the above choices],,enable_g=none)
dnl
dnl
dnl --enable-sharedlibs=kind is set with the PAC_ARG_SHAREDLIBS macro 
dnl
AC_ARG_ENABLE(internat,
[--enable-internat - Enable internationalization of messages.
 Not yet supported])
dnl
dnl --enable-fast
AC_ARG_ENABLE(fast,
[--enable-fast - pick the appropriate options for fast execution.  This
                turns off error checking and timing collection],,
enable_fast=no)
dnl
AC_ARG_ENABLE(f77,
[--enable-f77 - Enable Fortran 77 bindings],,enable_f77=no)
AC_ARG_ENABLE(cxx,
[--enable-cxx - Enable C++ bindings],,enable_cxx=no)
dnl
dnl FIXME: Make the default yes
AC_ARG_ENABLE(romio,
[--enable-romio - Enable ROMIO MPI I/O implementation],
,enable_romio=no)
dnl
AC_ARG_ENABLE(debugger,
[--enable-debugger - Enable support for debuggers],
,enable_debugger=no)
dnl
dnl With options
dnl "default" is a special device that allows MPICH to choose one based on 
dnl the environment.
AC_ARG_WITH(device,
[--with-device=name - Specify the communication device for MPICH.],,
with_device=default)
dnl
AC_ARG_WITH(pmi, [--with-pmi=name - Specify the pmi interface for MPICH.],,
with_pmi=default)
dnl
AC_ARG_WITH(pm, [--with-pm=name - Specify the process manager for MPICH.],,
with_pm=default)
dnl
AC_ARG_WITH(logging,
[--with-logging=name - Specify the logging library for MPICH.],,
with_logging=default)
dnl
AC_ARG_ENABLE(weak-symbols,
[--enable-weak-symbols - Use weak symbols to implement PMPI routines (default)],,
enable_weak_symbols=yes)
dnl
dnl
dnl
AC_ARG_WITH(cross,
[--with-cross=file - Specify the values of variables that configure cannot
determine in a cross-compilation environment],,with_cross=no)
dnl
dnl Flavor is used to setup separate directories for the flavor-specific
dnl code (e.g., libraries that depend on a particular thread library) from
dnl the generic files (e.g., the manual pages).
AC_ARG_WITH(flavor,
[--with-flavor=name - Set the name to associate with this flavor of MPICH],,)
dnl
dnl
dnl First check that we have a clean build if we are doing a VPATH build
if test "`cd $srcdir && pwd`" != "`pwd`" && test -f $srcdir/config.status ; then
    AC_MSG_ERROR([You cannot do a VPATH build if the source directory has been
    configured.  Run "make distclean" in $srcdir first.])
fi
dnl
# Set default variable values
MPILIBNAME=${MPILIBNAME:-"mpich"}
dnl Process any enable or with values
dnl We must do enable-fast first, because it changes the other enable values
if test "$enable_fast" = "yes" ; then
    enable_error_checking=no
    enable_error_messages=no
    enable_timing=no
    enable_g=no
    AC_DEFINE(NDEBUG,,[Define to suppress assertions])
fi
dnl error-checking
case "$enable_error_checking" in 
    no)
    ;;
    all|yes|runtime)
    changequote(<<,>>)
    error_checking_kind=`echo $enable_error_checking | tr '[a-z]' '[A-Z]'`
    changequote([,])
    error_checking_kind=MPID_ERROR_LEVEL_$error_checking_kind
    AC_DEFINE_UNQUOTED(HAVE_ERROR_CHECKING,$error_checking_kind,[define to enable error checking])
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_error_checking for enable-error-checking])
    ;;
esac
dnl
dnl error-messages
case "$enable_error_messages" in 
    no|none)
        error_message_kind="MPICH_ERROR_MSG_NONE"
    ;;
    all|yes)
	error_message_kind="MPICH_ERROR_MSG_ALL"
    ;;
    generic)
	error_message_kind="MPICH_ERROR_MSG_GENERIC"
    ;;
    class)
	error_message_kind="MPICH_ERROR_MSG_CLASS"
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_error_messages for enable-error-messages])
    ;;
esac
AC_DEFINE_UNQUOTED(MPICH_ERROR_MSG_LEVEL,$error_message_kind,[define to enable error messages])
dnl
dnl enable-timing and with-logging
dnl
dnl Still to do: add subsets: e.g., class=pt2pt,class=coll.  See mpich2 doc
dnl
collect_stats=false
logging_required=false
timing_name=$enable_timing
case "$enable_timing" in
    no)
    timing_name=none
    ;;
    time)
    collect_stats=true
    ;;
    log)
    logging_required=true
    ;;
    yes)
    timing_name=all
    collect_stats=true
    logging_required=true
    ;;
    all|runtime)
    collect_stats=true
    logging_required=true
    ;;
    none)
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_timing for enable-timing])
    enable_timing=no
    timing_name=none
    ;; 
esac
case $with_logging in 
    yes)
    logging_name=rlog
    ;;
    no)
    logging_name=none
    ;;
    default)
    if test "$logging_required" = "true" ; then
        logging_name=rlog
    else
        logging_name=none
    fi
    ;;
    *)
    logging_name=$with_logging
    ;;
esac
logging_subsystems=
if test "$logging_name" != "none" ; then
    logdir=$srcdir/src/util/logging
    logging_subsystems="$logging_subsystems src/util/logging/$logging_name"
    if test "$logging_name" = "dlog" ; then
    	logging_subdirs="slog_api dlog dlog2slog"
    	logging_subsystems="$logging_subsystems src/util/logging/slog_api"
    else
    	logging_subdirs=$logging_name
    fi
    for dir in $logging_subdirs ; do
        if test ! -d $logdir/$dir ; then
	    AC_MSG_WARN([$logdir/$dir does not exist.  Logging library $logging_name has been diabled.])
	    logging_name=none
        fi
    done
    for dir in $logging_subsystems ; do
        if test ! -x $srcdir/$dir/configure ; then
	    AC_MSG_WARN([$logdir/$dir does has no configure.  Logging library $logging_name has been disabled.])
	    logging_name=none
        fi
    done
fi
if test "$logging_name" != "none" ; then
    if test "$enable_timing" != "no" ; then
	if test "$enable_timing" = "none" ; then
	    enable_timing=log
	    timing_name=log
    	fi
	logging_dir=logging
	subsystems="$subsystems $logging_subsystems"
    else
	AC_MSG_WARN([Timing was disabled.  Logging has been disabled as well.])
	with_logging=no
	logging_name=none
        logging_dir=
        logging_subdirs=
    fi
else
    if test "$logging_required" = "true" ; then
	AC_MSG_WARN([Timing was enabled with log option but no logging library is available.  Timing has been disabled.])
	enable_timing=no
	timing_name=none
    fi
    logging_dir=
    logging_subdirs=
fi
if test "$timing_name" != "none" ; then
    changequote(<<,>>)
    timing_kind=`echo $timing_name | tr '[a-z]' '[A-Z]'`
    changequote([,])
    timing_kind=MPID_TIMING_KIND_$timing_kind
    AC_DEFINE_UNQUOTED(HAVE_TIMING,$timing_kind,[define to enable timing collection])
    if test "$collect_stats" = "true" ; then
        AC_DEFINE(COLLECT_STATS,,[define to enable collection of statistics])
    fi
fi
AC_SUBST(logging_dir)
AC_SUBST(logging_name)
AC_SUBST(logging_subdirs)
use_logging_variable="MPID_LOGGING_`echo $logging_name | tr a-z A-Z`"
AC_DEFINE_UNQUOTED(USE_LOGGING,$use_logging_variable,[define to choose logging library])
dnl
dnl threads
case "$enable_threads" in
    no|single)
    AC_DEFINE(MPICH_SINGLE_THREADED,,[define to for single threaded])
    ;;
    runtime=*|multiple=*)
    thread_type=`echo $enable_threads | sed -e 's/^.*=//'g`
    ;;
    all|yes|multiple|runtime)
    thread_type=pthread
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_threads for enable-threads])
    ;; 
esac
dnl
dnl enable-g
# strip off multiple options, separated by commas
save_IFS="$IFS"
IFS=","
for option in $enable_g ; do
    case "$option" in 
        debug|dbg)
	CFLAGS="$CFLAGS -g"
	;;
        no|none)
	;;
	handle)
	AC_DEFINE(MPICH_DEBUG_HANDLES,,[Define to enable handle checking])
	;;
	mem|all|yes)
	AC_DEFINE(USE_MEMORY_TRACING,,[Define to enable memory tracing])
	enable_g_mem=yes
	CFLAGS="$CFLAGS -g"
	;;
	*)
	AC_MSG_WARN([Unknown value $enable_g for enable-g])
	;;
    esac
done
IFS="$save_IFS"

if test "$enable_f77" = "yes" ; then
   subsystems="$subsystems src/binding/f77"
   bindings="$bindings f77"
   bindings_dirs="$bindings_dirs src/binding/f77"
fi
if test "$enable_f90" = "yes" ; then
   subsystems="$subsystems src/binding/f90"
   bindings="$bindings f90"
   bindings_dirs="$bindings_dirs src/binding/f90"
fi
if test "$enable_f90" = yes -o "$enable_f77" = yes ; then
   AC_DEFINE(HAVE_FORTRAN_BINDING,,[Define if Fortran is supported])
fi
if test "$enable_cxx" = "yes" ; then
   subsystems="$subsystems src/binding/cxx"
   bindings="$bindings cxx"
   bindings_dirs="$bindings_dirs src/binding/cxx"
   AC_DEFINE(HAVE_CXX_BINDING,,[Define if C++ is supported])
fi
AC_SUBST(bindings)
# Bindings dirs is used for the installation target
AC_SUBST(bindings_dirs)
#
if test "$enable_debugger" = "yes" ; then
    debugger_dir=debugger
    AC_DEFINE(HAVE_DEBUGGER_SUPPORT,,[Define if debugger support is included])
fi
AC_SUBST(debugger_dir)
dnl
pac_cross_compiling=no
if test "$with_cross" != "no" ; then
    if test -s "$with_cross" ; then
        AC_MSG_RESULT([Reading values from cross-compilation file $with_cross])
        . $with_cross
	# Autoconf 2.52 no longer sets cross_compiling except with the
	# awkward "targethost" options.
	pac_cross_compiling=yes
	cross_compiling=yes
	ac_cv_prog_cc_cross=yes
	ac_cv_prog_f77_cross=yes
        ac_cv_prog_cxx_cross=yes
        export cross_compiling
	# Export all cross variables.  Any subsidiary configure should also
        # export CROSS_xxx
	rm -f confcross
	(set) 2>&1 | grep CROSS_ | \
	      sed -e 's/^/export /g' -e 's/=.*//g' > confcross
	. confcross
	rm -f confcross      
    fi
fi
dnl
PAC_ARG_SHAREDLIBS
ENABLE_SHLIB=$enable_sharedlibs
if test -z "$ENABLE_SHLIB" ; then
    ENABLE_SHLIB=none
fi
AC_SUBST(ENABLE_SHLIB)
dnl
dnl CC_SHL=true
dnl C_LINK_SHL=true
dnl case "$enable_sharedlibs" in 
dnl     no|none)
dnl     ;;
dnl     gcc)
dnl     AC_MSG_RESULT([Creating shared libraries using GNU])
dnl     # Not quite right yet.  See mpich/util/makesharedlib
dnl     # Use syntax that works in both Make and the shell
dnl     #C_LINK_SHL='${CC} -shared -Wl,-r'
dnl     C_LINK_SHL='${CC} -shared'
dnl     #C_LINK_SHL='${CC} -shared -Wl,-h,<finallibname>'
dnl     CC_SHL='${CC} -shared -fpic'
dnl     ;;
dnl     libtool)
dnl     AC_MSG_RESULT([Creating shared libraries using libtool (not yet supported)])
dnl     ;;
dnl     *)
dnl     AC_MSG_WARN([Unknown value $enable_sharedlibs for enable-sharedlibs])
dnl     ;;  
dnl esac
dnl AC_SUBST(CC_SHL)
dnl AC_SUBST(C_LINK_SHL)
dnl
dnl
dnl with-device
if test "$with_device" = "default" ; then
    # Pick the device.  For now, always choose ch3
    with_device=ch3
fi
dnl Extract the device name from any options
device_name=`echo $with_device | sed -e 's/:.*$//'`
changequote(<<,>>)
device_args=`echo $with_device | sed -e 's/^[^:]*//' -e 's/^://'`
changequote([,])
export device_name
export device_args
dnl
dnl This test is complicated by the fact that top_srcdir is not set until
dnl the very end of configure.  Instead, we get it ourselves
if test -z "$top_srcdir" ; then
   use_top_srcdir=$srcdir   
else
   use_top_srcdir=$top_srcdir
fi
if test -z "$master_top_srcdir" ; then 
    # This needs to be an absolute pathname
    case "$use_top_srcdir" in
    /) ;;
    *)
        use_top_srcdir=`(cd $use_top_srcdir ; pwd)`
	;;	
    esac
    master_top_srcdir=$use_top_srcdir
fi
AC_SUBST(master_top_srcdir)
export master_top_srcdir
dnl
dnl This goes here because we need the top_srcdir
if test "$enable_romio" = "yes" ; then
   AC_DEFINE(HAVE_ROMIO,,[Define if ROMIO is enabled])
   if test -d $use_top_srcdir/src/mpi/romio ; then
       subsystems="$subsystems src/mpi/romio"
   else
       AC_MSG_WARN([ROMIO src directory is not available])
   fi
   # Set environment variables that the romio configure expects
   romio_dir=romio
   AC_SUBST(romio_dir)
   FROM_MPICH2=1
   export FROM_MPICH2
   export use_top_srcdir
   top_build_dir=`pwd`
   export top_build_dir
   # if there is no $top_build_dir/lib, romio puts lib in wrong place
   if test ! -e lib ; then mkdir lib ; fi
   # tell mpi.h to include mpio.h
   PAC_HAVE_ROMIO
fi
dnl
#
if test "$enable_f77" = "yes" ; then
   # We must add the include directories.  We have to wait until here
   # so that the paths will be defined.
   CPPFLAGS="$CPPFLAGS -I${master_top_srcdir}/src/binding/f77 -I`pwd`/src/binding/f77"
fi
#
if test ! -d $use_top_srcdir/src/mpid/$device_name ; then
dnl     WAIT UNTIL WE INCLUDE A DEVICE
dnl     AC_MSG_ERROR([Device $device_name is unknown)]
    AC_MSG_WARN([Device $device_name is unknown])
elif test ! -x $use_top_srcdir/src/mpid/$device_name/configure ; then
    AC_MSG_WARN([Device $device_name has no configure])
    device_name=""
else 
    # Add the device to the configure list
    subsystems="$subsystems src/mpid/$device_name"
    dnl Make device_name available to subdirs
fi
AC_SUBST(device_name)
dnl with-pmi
if test "$with_pmi" = "default" -o "$with_pmi" = "yes" ; then
    with_pmi=simple
fi
pmi_name=$with_pmi
dnl
if test ! -d $use_top_srcdir/src/pmi/$pmi_name ; then
    AC_MSG_WARN([$use_top_srcdir/src/pmi/$pmi_name does not exist. PMI is unknown])
elif test ! -x $use_top_srcdir/src/pmi/$pmi_name/configure ; then
    AC_MSG_WARN([pmi $pmi_name has no configure or Makefile])
    pmi_name=""
else
    subsystems="$subsystems src/pmi/$pmi_name"
fi
AC_SUBST(pmi_name)
dnl with-pm
if test "$with_pmi" = "uni" -a "$with_pm" = "default" ; then
    with_pm=""
fi
if test "$with_pm" = "default" -o "$with_pm" = "yes" ; then
    with_pm=mpd
fi
pm_name=$with_pm
dnl
if test ! -d $use_top_srcdir/src/pm/$pm_name ; then
    AC_MSG_WARN([$use_top_srcdir/src/pm/$pm_name does not exist. PM is unknown])
elif test ! -x $use_top_srcdir/src/pm/$pm_name/configure ; then
    AC_MSG_WARN([pm $pm_name has no configure])
    pm_name=""
else
    subsystems="$subsystems src/pm/$pm_name"
fi
AC_SUBST(pm_name)
dnl
dnl The recommended order for items in a configure.in file is
dnl     check for programs
dnl     check for libraries
dnl     check for header files
dnl     check for typedefs
dnl     check for structures
dnl     check for compiler characteristics
dnl     check for library functions
dnl     check for system services
dnl Here are some sample tests
dnl
dnl Find a C compiler (choose gcc first).
dnl Autoconf 2.13 has the feature that you cannot override the test for
dnl cross-compilation made in [AC_PROG_CC].  
AC_PROG_CC
# Bug in autoconf.  Restore cross settings
if test "$pac_cross_compiling" = "yes" -a "$ac_cv_prog_cc_cross" = "no" ; then
    AC_MSG_RESULT([Resetting cross compilation to yes])
    cross_compiling=yes
    ac_cv_prog_cc_cross=yes
    ac_cv_prog_f77_cross=yes
    ac_cv_prog_cxx_cross=yes
fi
AC_CHECK_PROGS(AR,ar)
# Note that we set RANLIB to true if we don't find it (some systems neither
# need it nor provide it)
AC_CHECK_PROGS(RANLIB,ranlib,true)
AC_PROG_INSTALL
#
# We also need mkdir -p.
AC_CACHE_CHECK([whether mkdir -p works],
pac_cv_mkdir_p,[
pac_cv_mkdir_p=no
rm -rf .tmp
if mkdir -p .tmp/.foo 1>/dev/null 2>&1 ; then 
    if test -d .tmp/.foo ; then 
        pac_cv_mkdir_p=yes
    fi
fi
])
if test "$pac_cv_mkdir_p" = "yes" ; then
   MKDIR_P="mkdir -p"
else
   AC_MSG_WARN([mkdir -p does not work; the install step may fail])
fi
AC_SUBST(MKDIR_P)

# We need the full path to perl since we'll use it as the interpreter for
# a shell script.
AC_PATH_PROG(PERL5,perl)
dnl
dnl Now that CC is defined, get these values 
dnl eval C_LINK_SHL=$C_LINK_SHL
dnl eval CC_SHL=$CC_SHL
dnl Ensure that all subdir configures get this
export CC_SHL
export C_LINK_SHL
export ENABLE_SHLIB
dnl
dnl Find SSH.  If SSH is defined, use that instead
dnl AC_PATH_PROG(SSH,ssh)
dnl
dnl AC_PROG_MAKE_SET
PAC_PROG_MAKE
dnl
dnl     check for compiler characteristics
dnl Check for support for weak symbols.  If not found, set NO_WEAK_SYM
dnl to the Make target name understood by simplemake.
NO_WEAK_SYM_TARGET=build_proflib
if test $enable_weak_symbols = yes ; then
    # Turn off weak symbols if they aren't available
    PAC_PROG_C_WEAK_SYMBOLS(,enable_weak_symbols=no)
fi
if test $enable_weak_symbols = "yes" ; then
    AC_DEFINE(USE_WEAK_SYMBOLS,,[Define if weak symbols should be used])
else
    NO_WEAK_SYM=build_proflib
    PROFILE_DEF_MPI="-DMPICH_PROFILE_MPI -DMPICH_MPI_FROM_PMPI"
fi
export NO_WEAK_SYM
export NO_WEAK_SYM_TARGET
export PROFILE_DEF_MPI
AC_SUBST(NO_WEAK_SYM)
AC_SUBST(NO_WEAK_SYM_TARGET)
AC_SUBST(PROFILE_DEF_MPI)
AC_C_CONST
PAC_C_VOLATILE
PAC_C_RESTRICT
AC_C_INLINE
# Check on support for long double and long long types.  Do this before the
# structure alignment test because it will test for including those
# types as well
AC_CACHE_CHECK([whether long double is supported],
pac_cv_have_long_double,[
AC_TRY_COMPILE(,[long double a;],
pac_cv_have_long_double=yes,pac_cv_have_long_double=no)])
if test "$pac_cv_have_long_double" = "yes" ; then
    AC_DEFINE(HAVE_LONG_DOUBLE,,[Define if long double is supported])
fi
AC_CACHE_CHECK([whether long long is supported],
pac_cv_have_long_long,[
AC_TRY_COMPILE(,[long double a;],
pac_cv_have_long_long=yes,pac_cv_have_long_long=no)])
if test "$pac_cv_have_long_long" = "yes" ; then
    AC_DEFINE(HAVE_LONG_LONG_INT,,[Define if long long is supported])
fi
# Get default structure alignment
dnl PAC_C_STRUCT_ALIGNMENT places the default alignment into
dnl pac_cv_c_struct_align, with possible values including
dnl packed (byte), largest, two, four, eight (or other failure message).
PAC_C_STRUCT_ALIGNMENT

if test "$pac_cv_c_struct_align" = "packed" ; then
    pac_cv_c_struct_align_nr=1
elif test "$pac_cv_c_struct_align" = "two" ; then
    pac_cv_c_struct_align_nr=2
elif test "$pac_cv_c_struct_align" = "four" ; then
    pac_cv_c_struct_align_nr=4
elif test "$pac_cv_c_struct_align" = "eight" ; then
    pac_cv_c_struct_align_nr=8
elif test "$pac_cv_c_struct_align" = "largest" ; then
    AC_DEFINE(HAVE_LARGEST_STRUCT_ALIGNMENT,,[Define when alignment of structures is based on largest component])
fi

if test -n "$pac_cv_c_struct_align_nr" ; then
    AC_DEFINE_UNQUOTED(HAVE_MAX_STRUCT_ALIGNMENT,$pac_cv_c_struct_align_nr,[Controls byte alignment of structures])
fi

dnl
dnl Get the size of the C types for encoding in the basic datatypes and for
dnl the specific-sized integers
AC_CHECK_SIZEOF(short,$CROSS_SIZEOF_SHORT)
AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_INT)
AC_CHECK_SIZEOF(long,$CROSS_SIZEOF_LONG)
AC_CHECK_SIZEOF(long long,$CROSS_SIZEOF_LONG_LONG)
AC_CHECK_SIZEOF(float,$CROSS_SIZEOF_FLOAT)
AC_CHECK_SIZEOF(double,$CROSS_SIZEOF_DOUBLE)
AC_CHECK_SIZEOF(long double,$CROSS_SIZEOF_LONG_DOUBLE)
AC_CHECK_SIZEOF(wchar_t,$CROSS_SIZEOF_WCHAR_T)
AC_CHECK_SIZEOF(void *,$CROSS_SIZEOF_VOID_P)
PAC_CHECK_SIZEOF_DERIVED(float int,[struct { float a; int b; }],$CROSS_SIZEOF_FLOAT_INT)
PAC_CHECK_SIZEOF_DERIVED(double int,[struct { double a; int b; }],$CROSS_SIZEOF_DOUBLE_INT)
PAC_CHECK_SIZEOF_DERIVED(long int,[struct { long a; int b; }],$CROSS_SIZEOF_LONG_INT)
PAC_CHECK_SIZEOF_DERIVED(short int,[struct { short a; int b; }],$CROSS_SIZEOF_SHORT_INT)
PAC_CHECK_SIZEOF_DERIVED(2 int,[struct { int a; int b; }],$CROSS_SIZEOF_2_INT)
PAC_CHECK_SIZEOF_DERIVED(long double int,[struct { long double a; int b; }],$CROSS_SIZEOF_FLOAT_INT)
dnl
AC_CACHE_CHECK([for int16_t],pac_cv_int16_t,[
AC_TRY_COMPILE([#include <sys/types.h>],[int16_t a=0;],
pac_cv_int16_t=yes,pac_cv_int16_t=no)])
dnl
dnl If there is not int16_t, try to define one
if test "$pac_cv_int16_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_SHORT" ; then CROSS_SIZEOF_SHORT=2 ; fi
    AC_CHECK_SIZEOF(short,$CROSS_SIZEOF_SHORT)
    if test "$ac_cv_sizeof_short" = 2 ; then 
        INT16_T=short
    else
        INT16_T=int
    fi
    AC_SUBST(INT16_T)
else
    AC_DEFINE(HAVE_INT16_T,,[Define if int16_t is supported by the C compiler])
fi
AC_CACHE_CHECK([for int32_t],pac_cv_int32_t,[
AC_TRY_COMPILE([#include <sys/types.h>],[int32_t a=0;],
pac_cv_int32_t=yes,pac_cv_int32_t=no)])
dnl
dnl If there is not int32_t, try to define one
if test "$pac_cv_int32_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_INT" ; then CROSS_SIZEOF_INT=4 ; fi
    AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_INT)
    if test "$ac_cv_sizeof_int" = 4 ; then 
        INT32_T=int
    else
        # No good alternative
        INT32_T=int
    fi
    AC_SUBST(INT32_T)
else
    AC_DEFINE(HAVE_INT32_T,,[Define if int32_t is supported by the C compiler])
fi
AC_CACHE_CHECK([for int64_t],pac_cv_int64_t,[
AC_TRY_COMPILE([#include <sys/types.h>],[int64_t a=0;],
pac_cv_int64_t=yes,pac_cv_int64_t=no)])
dnl
dnl If there is not int64_t, try to define one
if test "$pac_cv_int64_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_LONG_LONG" ; then CROSS_SIZEOF_LONG_LONG=8 ; fi
    AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_LONG_LONG)
    if test "$ac_cv_sizeof_long_long" = 8 ; then 
        INT64_T=long long
    else
        # No good alternative
        INT64_T=long long
    fi
    AC_SUBST(INT64_T)
else
    AC_DEFINE(HAVE_INT64_T,,[Define if int64_t is supported by the C compiler])
fi
dnl
dnl Generate a hex version of the size of each type
for type in short int long long_long float double long_double wchar_t \
    float_int double_int long_int short_int 2_int long_double_int ; do
    eval len=\$ac_cv_sizeof_$type
    if test -z "$len" ; then 
       len=0
       # Check for sizes from the CHECK_SIZEOF_DERIVED macro
       eval pclen=\$pac_cv_sizeof_$type
       if test -n "$pclen" ; then
           len=$pclen
       fi
    fi

    if test $len -le 0 ; then
         eval len_$type="00"
    elif test $len -le 9 ; then 
         eval len_$type="0$len" 
    elif test $len -le 15 ; then
         case $len in 
         10) char=a ;;
	 11) char=b ;;
	 12) char=c ;;
	 13) char=d ;;
	 14) char=e ;;
	 15) char=f ;;
         esac
         eval len_$type="0$char"
    elif test $len -le 31 ; then
         len=`expr $len - 16`
         eval len_$type="1$len"
    elif test $len -le 63 ; then
         len=`expr $len - 32`
         eval len_$type="2$len"
    else
         AC_MSG_ERROR([Type sizes greater than 63 bytes not supported (type $type is $len bytes)]) 
    fi
done
# By definition, sizeof char is 1
MPI_CHAR="0x4c000101"
MPI_UNSIGNED_CHAR="0x4c000102"
MPI_SHORT="0x4c00${len_short}03"
MPI_UNSIGNED_SHORT="0x4c00${len_short}04"
MPI_INT="0x4c00${len_int}05"
MPI_UNSIGNED_INT="0x4c00${len_int}06"
MPI_LONG="0x4c00${len_long}07"
MPI_UNSIGNED_LONG="0x4c00${len_long}08"
MPI_LONG_LONG="0x4c00${len_long_long}09"
MPI_FLOAT="0x4c00${len_float}0b"
MPI_DOUBLE="0x4c00${len_double}0d"
MPI_LONG_DOUBLE="0x4c00${len_long_double}0f"
MPI_BYTE="0x4c000111"
MPI_WCHAR_T="0x4c00${len_wchar_t}13"
MPI_PACKED="0x4c000114"
MPI_LB="0x4c000015"
MPI_UB="0x4c000016"
#
# These should define the mixed types *only* for contiguous data.
# For example, MPI_SHORT_INT may have a gap; it will need to be defined
# as a derived type instead.  For IA32, this only affects short_int.
MPI_FLOAT_INT="0x4c00${len_float_int}17"
MPI_DOUBLE_INT="0x4c00${len_double_int}18"
MPI_LONG_INT="0x4c00${len_long_int}19"
MPI_SHORT_INT="0x4c00${len_short_int}1a"
MPI_2INT="0x4c00${len_2_int}1b"
MPI_LONG_DOUBLE_INT="0x4c00${len_long_double_int}1c"
AC_SUBST(MPI_CHAR)
AC_SUBST(MPI_UNSIGNED_CHAR)
AC_SUBST(MPI_SHORT)
AC_SUBST(MPI_UNSIGNED_SHORT)
AC_SUBST(MPI_INT)
AC_SUBST(MPI_UNSIGNED_INT)
AC_SUBST(MPI_LONG)
AC_SUBST(MPI_UNSIGNED_LONG)
AC_SUBST(MPI_LONG_LONG)
AC_SUBST(MPI_FLOAT)
AC_SUBST(MPI_DOUBLE)
AC_SUBST(MPI_LONG_DOUBLE)
AC_SUBST(MPI_BYTE)
AC_SUBST(MPI_WCHAR_T)
AC_SUBST(MPI_PACKED)
AC_SUBST(MPI_LB)
AC_SUBST(MPI_UB)
AC_SUBST(MPI_FLOAT_INT)
AC_SUBST(MPI_DOUBLE_INT)
AC_SUBST(MPI_LONG_INT)
AC_SUBST(MPI_SHORT_INT)
AC_SUBST(MPI_2INT)
AC_SUBST(MPI_LONG_DOUBLE_INT)
#
# Export the basic C types so that the Fortran system can use them
export MPI_CHAR
export MPI_SHORT
export MPI_INT
export MPI_LONG
export MPI_LONG_LONG
export MPI_FLOAT
export MPI_DOUBLE
export MPI_LONG_DOUBLE
dnl
dnl Is char * the byte address?
AC_CACHE_CHECK([if char * pointers use give byte addresses],
pac_cv_c_char_p_is_byte,[
AC_TRY_RUN([
int main(int argc, char **argv ){
char *a, buf;
a = &buf;
if ((long)(a-(char*)0) == (long)(a)) return 0; return 1;
}],pac_cv_c_char_p_is_byte=yes,pac_cv_char_p_is_byte=no,
pac_cv_char_p_is_byte=unknown)])
if test "$pac_cv_char_p_is_byte" = "yes" ; then
    AC_DEFINE(CHAR_PTR_IS_BYTE,,[define if char * is byte pointer])
fi
dnl
dnl Get the size for the bsendoverhead
rm -f conftestval
dnl FIXME This should really use code from bsendutil.c.  Types
dnl defined in the mpiimpl.h file or in mpi.h have been replaced here. 
AC_CACHE_CHECK([for size of MPI_BSEND_OVERHEAD],pac_cv_mpi_bsend_overhead,[
AC_TRY_RUN([
#include <stdio.h>
/* BsendData describes a bsend request */
typedef struct BsendData {
    int              size;             /* size that is available for data */
    int              total_size;       /* total size of this segment */
    struct BsendData *next, *prev;
    void         *request;
    struct {
    void         *msgbuf;
    int          count;
    int          dtype;
    int          tag;
    void         *comm_ptr;
    int          dest;
    double       alignpad;
    } msg;
} BsendData_t;
int main( int argc, char *argv[] ){
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", sizeof(BsendData_t));
  exit(0);
}
],pac_cv_mpi_bsend_overhead=`cat conftestval`,pac_cv_mpi_bsend_overhead=256,pac_cv_mpi_bsend_overhead=256)
])
BSEND_OVERHEAD=$pac_cv_mpi_bsend_overhead
AC_SUBST(BSEND_OVERHEAD)
#
# The size of MPI_Status is needed for the Fortran interface. 
# This is not quite right unless the device setup script, executed above,
# sets the EXTRA_STATUS_DECL that will be used in defining a status.
# The default size assumes that there are 5 ints
default_status_size=`expr 5 \* $ac_cv_sizeof_int`
AC_CACHE_CHECK([for size of MPI_Status],pac_cv_sizeof_mpi_status,[
AC_TRY_RUN([
#include <stdio.h>
typedef struct { 
    int count;
    int cancelled;
    int MPI_SOURCE;
    int MPI_TAG;
    int MPI_ERROR;
    $EXTRA_STATUS_DECL
} MPI_Status;
int main( int argc, char *argv[] ){
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", sizeof(MPI_Status));
  exit(0);
}
],pac_cv_sizeof_mpi_status=`cat conftestval`,pac_cv_sizeof_mpi_status=$default_status_size,pac_cv_sizeof_mpi_status=$default_status_size)
])
SIZEOF_MPI_STATUS=$pac_cv_sizeof_mpi_status
export SIZEOF_MPI_STATUS
AC_SUBST(SIZEOF_MPI_STATUS)

dnl
dnl check for library functions
if test -n "$thread_type" ; then
    case $thread_type in 
        pthread|posix)
	AC_SEARCH_LIBS(pthread_create,pthread,
	    AC_DEFINE(HAVE_PTHREAD_CREATE,,[Define for pthreads]))
	;;
	solaris|thr)
	AC_SEARCH_LIBS(thr_create,thread,
	    AC_DEFINE(HAVE_THR_CREATE,,[Define for Solaris threads]))
	;;
	*)
	AC_MSG_WARN([Unknown thread type $thread type]) 
	;;
    esac
fi
dnl
dnl Check for special compile characteristics
AC_MSG_CHECKING([for gcc __asm__ and pentium cmpxchgl instruction])
AC_TRY_RUN([
int main(int argc, char *argv[])
{
long int compval = 10;
volatile long int *p = &compval;
long int oldval = 10;
long int newval = 20;
char ret;
long int readval;
__asm__ __volatile__ ("lock; cmpxchgl %3, %1; sete %0"
	: "=q" (ret), "=m" (*p), "=a" (readval)
	: "r" (newval), "m" (*p), "a" (oldval));
return (compval == 20) ? 0 : -1;
}
], AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GCC_AND_PENTIUM_ASM, 1,
Define if using gcc on a system with an Intel Pentium class chip), 
AC_MSG_RESULT(no), AC_MSG_RESULT(not checking when cross compiling))
dnl
dnl Is there libnsl needed for gethostbyname?
dnl AC_SEARCH_LIBS(gethostbyname,nsl)
dnl
dnl Look for Standard headers
AC_HEADER_STDC
dnl Check for a specific header
AC_CHECK_HEADERS(stdarg.h sys/types.h sys/uio.h pthread.h)
dnl
dnl Check for functions.  This invokes another test if the function is 
dnl found.  The braces around the second test are essential. 
dnl AC_CHECK_FUNC(setpgrp,[AC_FUNC_SETPGRP])
dnl These are used for error reporting
AC_CHECK_FUNCS(vsnprintf vsprintf)
dnl Use snprintf if possible when creating messages
AC_CHECK_FUNCS(snprintf)
dnl
dnl If internationalization selected, try to find the needed functions
if test "$enable_internat" = "yes" ; then
    AC_CHECK_HEADERS(libintl.h)
    AC_CHECK_FUNCS(gettext dgettext)
    if test "$ac_cv_header_libintl" = "yes" -a \
	    "$ac_cv_func_gettext" = "yes" -a \
	    "$ac_cv_func_dgettext" = "yes" ; then
	AC_DEFINE(USE_GETTEXT,,[Define if messages should use gettext])
    fi
fi
dnl
if test "$enable_g_mem" != "yes" ; then
    dnl Strdup is needed only if memory tracing is not enabled.
    AC_CHECK_FUNCS(strdup)
else
    dnl search.h is used for fancier output from trmem.  Disabled for now,
    dnl since the tsearch routines have problematic prototypes.
    AC_CHECK_HEADERS(search)
    AC_CHECK_FUNCS(tsearch)
    dnl Check that we can compile tsearch without error.  Try to compile
    dnl it with the header and the char * args
    if test "$ac_cv_func_tsearch" = "yes" ; then
        AC_CACHE_CHECK([whether tsearch requires char* args],
	               pac_cv_tsearch_charp,[
        AC_TRY_COMPILE([#include <search.h>
    char *tsearch( char *k, char **r, (int (*)())compare ) { return k; }],
    [int f=0;],pac_cv_tsearch_charp=yes,pac_cv_tsearch_charp=no)])
        if test "$pac_cv_tsearch_charp" = "yes" ; then
	    AC_DEFINE(USE_TSEARCH_WITH_CHARP,,[Define if tsearch requires char pointers])
	fi
    fi
    dnl Note that HPUX and AIX may require _INCLUDE_XOPEN_SOURCE or
    dnl _XOPEN_SOURCE be defined respectively.
fi
dnl
dnl Specific checks that a function works correctly
dnl AC_FUNC_VFORK
dnl
dnl Check for support for long file names
dnl AC_SYS_LONG_FILE_NAMES
dnl
dnl
dnl Setup other replaceable values
AC_SUBST(MPILIBNAME)
MPI_AINT=int
for type in int long long_long short ; do
    eval len=\$ac_cv_sizeof_$type
    if test "$len" = "$ac_cv_sizeof_void_p" ; then
        MPI_AINT=`echo $type | sed -e 's/_/ /'`
        break
    fi
done
AC_SUBST(MPI_AINT)
dnl
dnl If sizeof(mpi_aint) = sizeof(int), set this value
if test "$ac_cv_sizeof_int" = "$ac_cv_sizeof_void_p" ; then
    AC_DEFINE(SIZEOF_INT_IS_AINT,,[define if sizeof(int) = sizeof(void*)])
fi
dnl
#
# If it is necessary for the device to update some of the variables,
# this step allows that to happen.  Possible variables to update are
#   LIBS - Add libraries needed for linking
#   LDFLAGS - Add other LD flags (e.g., search paths for libraries)
#   CPPFLAGS - Add C preprocessor flags, including -Idir
#   DEFS  - Add C preprocessor definitions, e.g., -Dfoo
# These must be updated, not replaced, so the setup_device script should
# do, e.g., 
#   LIBS="$LIBS -lmywierdlib",
# not
#   LIBS="-lmywierdlib"
# In some cases (particularly for LIBS), we want to perform this update
# *after* the configure step.  This is done by including the file
# localdefs if it exists.  Note that the use of a file *after* the configure
# of subdirectories means that the subdir configures will not get the 
# value.  This is normally ok for libraries but not for include paths,
# which is why there is a pre and post step
if test -f $use_top_srcdir/src/mpid/$device_name/setup_device ; then
    echo sourcing $use_top_srcdir/src/mpid/$device_name/setup_device
    . $use_top_srcdir/src/mpid/$device_name/setup_device
fi
dnl Configure any subdirectories.  Note that config.status will *not* 
dnl reexecute these!
dnl Export any important variables first:
dnl 
dnl Gastly problem.  CONFIG_SUBDIRS only adds the directories to the
dnl list of directories to be configured.  It does NOT control the
dnl timing of the configuration.  For that, we must do something different.
dnl Our solution is to use a separate macro that does cause 
dnl immediate configure
export AR
export RANLIB
export MPILIBNAME
export CC
PAC_SUBDIR_CACHE
dnl AC_CONFIG_SUBDIRS(src/mpi/timer $subsystems)
PAC_CONFIG_SUBDIRS_IMMEDIATE(src/mpi/timer $subsystems $TOPLEVEL_SUBDIRS)
#
# Make subsystems available to makefiles.
AC_SUBST(subsystems)
# Check for any localdefs files.  These may be created, so we look in
# the local directory first.
if test -f src/mpid/$device_name/localdefs ; then
    . src/mpid/$device_name/localdefs
elif test -f $use_top_srcdir/src/mpid/$device_name/localdefs ; then
    . $use_top_srcdir/src/mpid/$device_name/localdefs
fi
#
dnl
dnl Once the subsystems are configured, we can inquire about what
dnl they have been found.  For example, we need the values for the
dnl Fortran datatypes from the Fortran system, if they are defined.
if test "$enable_f77" = "yes" -a -s src/binding/f77/mpif77.conf ; then
    # Load the values from the generated configuration file
    # These set the datatypes and the other Fortran types
    . ./src/binding/f77/mpif77.conf
    case "$F77_NAME_MANGLE"X in
    F77_NAME_LOWERX|F77_NAME_MIXEDX) 
    AC_DEFINE(F77_NAME_LOWER,,[Define if Fortran names are lowercase]) 
	;;
    F77_NAME_LOWER_USCOREX|F77_NAME_MIXED_USCOREX)
    AC_DEFINE(F77_NAME_LOWER_USCORE,,[Define if Fortran names are lowercase with a trailing underscore])
	 ;;
    F77_NAME_LOWER_2USCOREX)
    AC_DEFINE(F77_NAME_LOWER_2USCORE,,[Define if Fortran names containing an underscore have two trailing underscores])
	 ;;
    F77_NAME_UPPERX)
    AC_DEFINE(F77_NAME_UPPER,,[Define if Fortran names are uppercase]) 
	;;
    esac
else
    for name in CHARACTER INTEGER REAL LOGICAL COMPLEX DOUBLE_PRECISION \
	2INTEGER 2REAL DOUBLE_COMPLEX 2COMPLEX 2DOUBLE_PRECISION \
	2DOUBLE_COMPLEX ; do
	fullname="MPI_$name"
	eval $fullname=MPI_DATATYPE_NULL
    done
    AC_MSG_WARN([Could not define Fortran MPI datatypes for C])
    AC_DEFINE(HAVE_NO_FORTRAN_MPI_TYPES_IN_C,,[Define if the Fortran types are not available in C])
    # Temporary values for MPI_Fint (need help from the Fortran subsystem)
    MPI_FINT=int
fi
AC_SUBST(MPI_CHARACTER)
AC_SUBST(MPI_INTEGER)
AC_SUBST(MPI_REAL)
AC_SUBST(MPI_LOGICAL)
AC_SUBST(MPI_COMPLEX)
AC_SUBST(MPI_DOUBLE_PRECISION)
AC_SUBST(MPI_2INTEGER)
AC_SUBST(MPI_2REAL)
AC_SUBST(MPI_DOUBLE_COMPLEX)
AC_SUBST(MPI_2DOUBLE_PRECISION)
AC_SUBST(MPI_2COMPLEX)
AC_SUBST(MPI_2DOUBLE_COMPLEX)
AC_SUBST(MPI_FINT)

# Temporary values for MPI_Offset (need help from IO subsystem)
if test "$ac_cv_sizeof_long_long" = 8 ; then
    MPI_OFFSET="long long"
else
    MPI_OFFSET=long
fi
AC_SUBST(MPI_OFFSET)
dnl
dnl Temporary value for extra status information, from device subsystem
AC_SUBST(EXTRA_STATUS_DECL)
dnl
dnl Get the value of MPI_MAX_PROCESSOR_NAME
if test -s src/mpid/$device_name/Makefile ; then
    maxproc="`(cd src/mpid/$device_name ; ${MAKE} echomaxprocname)`"
    # Note: if this is more than one line, there will be problems with
    # the final step.  That may happen if MAKE is acting in some wierd
    # way, such as echoing all directory changes (even if the only
    # directory change is a result of the -f command !).  To avoid that,
    # we just run make in the device directory
fi
if test -z "$maxproc" ; then
    maxproc=128
fi
# We should check that the maxproc value is a valid integer
MPI_MAX_PROCESSOR_NAME="$maxproc"
AC_SUBST(MPI_MAX_PROCESSOR_NAME)
dnl
dnl
dnl Set the libraries to use in building programs
if test "$enable_weak_symbols" != "yes" ; then
    # Ugh.  We don't have the dependencies between the libraries right 
    # yet.  We *should* only need -lmpich -lpmpich .  
    LIBS="-lmpich -lpmpich -lmpich -lpmpich $LIBS"
else
    LIBS="-lmpich $LIBS"
fi

dnl default settings for compiler and linker flags 
MPI_CFLAGS="$MPI_CFLAGS"
MPI_LDFLAGS="$MPI_LDFLAGS $LDFLAGS"
AC_SUBST(MPI_CFLAGS)
AC_SUBST(MPI_LDFLAGS)

AC_CONFIG_SUBDIRS(test/mpi)
dnl
dnl Generate the Makefiles from Makefile.in
dnl Also generate mpi.h from mpi.h.in so that we can eliminate all ifdefs
dnl from the file.

AC_OUTPUT_COMMANDS([chmod a+x test/runtests])
AC_OUTPUT_COMMANDS([chmod a+x src/env/mpicc])
AC_OUTPUT_COMMANDS([cp -p src/env/mpicc bin/mpicc])
AC_OUTPUT(Makefile src/Makefile \
          src/binding/Makefile \
          src/env/mpicc \
	  src/env/Makefile\
          src/mpi/Makefile \
          src/mpi/attr/Makefile \
	  src/mpi/coll/Makefile \
          src/mpi/comm/Makefile \
	  src/mpi/datatype/Makefile \
	  src/mpi/debugger/Makefile \
          src/mpi/errhan/Makefile \
          src/mpi/group/Makefile \
          src/mpi/init/Makefile \
          src/mpi/io/Makefile \
          src/mpi/misc/Makefile \
          src/mpi/pt2pt/Makefile \
          src/mpi/rma/Makefile \
          src/mpi/spawn/Makefile \
          src/mpi/topo/Makefile \
          src/mpid/Makefile \
          src/mpid/common/Makefile \
          $TOPLEVEL_OUTPUT_FILES \
          src/mpid/common/datatype/Makefile \
          src/mpid/common/locks/Makefile \
          src/pm/Makefile \
          src/pmi/Makefile \
	  src/util/Makefile \
	  src/util/info/Makefile \
	  src/util/instrm/Makefile \
	  src/util/mem/Makefile \
	  src/util/msgs/Makefile \
	  src/util/param/Makefile \
	  src/util/thread/Makefile \
          src/util/dbg/Makefile \
          src/include/mpi.h \
	  test/Makefile test/runtests test/util/Makefile \
	  test/mpid/Makefile \
	  test/mpid/ch3/Makefile \
	  test/util/info/Makefile \
	  examples/Makefile\
          src/util/logging/Makefile\
          src/util/timing/Makefile )

dnl The following files should be created by the appropriate configure within
dnl the device.
dnl          src/mpid/mm/Makefile \

if test "$enable_romio" = "yes" ; then
  /bin/rm -f src/include/mpio.h "${top_srcdir}/include/mpio.h"
  cp src/mpi/romio/include/mpio.h src/include

  if test -s src/binding/f77/mpif.h ; then

dnl Remove MPI_OFFSET_KIND and MPI_FILE_NULL from ROMIO's 
dnl mpiof.h and append it to mpif.h

      sed -e '/OFFSET_KIND/d' src/mpi/romio/include/mpiof.h | \
      sed -e '/FILE_NULL/d' src/mpi/romio/include/mpiof.h | \
      cat src/binding/f77/mpif.h - > src/binding/f77/tmp_mpif.h 
      mv -f src/binding/f77/tmp_mpif.h src/binding/f77/mpif.h
  fi
fi

PAC_SUBDIR_CACHE_CLEANUP
echo 'Configuration completed.'
