dnl Process this file with autoconf to produce a configure script.
dnl
dnl aclocal_cache.m4, included by sowing/confdb/aclocal.m4, fixes 
dnl bugs in autoconf caching.
dnl
dnl The file name here refers to a file in the source being configured
AC_INIT(src/include/mpiimpl.h)
dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
AC_CONFIG_HEADER(src/include/mpichconf.h)
dnl
dnl Set the directory that contains support scripts such as install-sh and
dnl config.guess
AC_CONFIG_AUX_DIR(confdb)
dnl
dnl Use AC_ARG_ENABLE to look for --enable-feature and AC_ARG_WITH to look for
dnl --with-capability
dnl
dnl Enable better caching control
PAC_ARG_CACHING
dnl
AC_ARG_ENABLE(echo, 
[--enable-echo  - Turn on strong echoing. The default is enable=no.] ,set -x)
dnl
AC_ARG_ENABLE(strict,[--enable-strict - Turn on strict debugging with gcc],
CFLAGS="$CFLAGS -O2 -Wall -Wstrict-prototypes -Wmissing-prototypes")
dnl
AC_ARG_ENABLE(error-checking,
[--enable-error-checking=level - Control the amount of error checking.  
level may be 
    no        - no error checking
    runtime   - error checking controllable at runtime through environment 
                variables
    all       - error checking always enabled],,enable_error_checking=all)
dnl
AC_ARG_ENABLE(error-messages,
[--enable-error-messages=level - Control the amount of detail in error 
  messages.  Level may be
    all       - Maximum amount of information
    generic   - Only generic messages (no information about the specific
                instance)
    class     - One message per MPI error class
    none      - No messages],,enable_error_messages=all)
dnl
AC_ARG_ENABLE(timing,
[--enable-timing=level - Control the amount of timing information 
collected by the MPICH implementation.  level may be
    none    - Collect no data
    all     - Collect lots of data
    runtime - Runtime control of data collected
The default is none.],,enable_timing=none)
dnl
dnl Set single for now
AC_ARG_ENABLE(threads,
[--enable-threads=level - Control the level of thread support in the 
MPICH implementation.  level may be 
    single - Single threaded (MPI_THREAD_SINGLE and MPI_THREAD_FUNNELED)
    multiple - Multithreaded (MPI_THREAD_SERIAL and MPI_THREAD_MULTIPLE)],,
enable_threads=single)
dnl
dnl NOT YET COMPLETE: make use of this value to turn MPI_Wtime into
dnl a macro in mpi.h
AC_ARG_ENABLE(mpi-macros,
[--enable-mpi-macros - Implement MPI_Wtime and MPI_Wtick as C macros
The default is no.],
,enable_mpi_macros=no)
dnl
AC_ARG_ENABLE(g,
[--enable-g=option - Control the level of debugging support in the MPICH
implementation.  option may be a list of common separated names including
    none  - No debugging
    mem   - Memory usage tracing
    all   - All of the above choices],,enable_g=none)
dnl
dnl
dnl --enable-sharedlibs=kind is set with the PAC_ARG_SHAREDLIBS macro 
dnl
AC_ARG_ENABLE(internat,
[--enable-internat - Enable internationalization of messages.
 Not yet supported])
dnl
dnl --enable-fast
AC_ARG_ENABLE(fast,
[--enable-fast - pick the appropriate options for fast execution.  This
                turns off error checking and timing collection],,
enable_fast=no)
dnl
AC_ARG_ENABLE(f77,
[--enable-f77 - Enable Fortran 77 bindings],,enable_f77=no)

dnl With options
dnl "default" is a special device that allows MPICH to choose one based on 
dnl the environment.
AC_ARG_WITH(device,
[--with-device=name - Specify the communication device for MPICH.],,
with_device=default)
dnl
AC_ARG_WITH(pmi, [--with-pmi=name - Specify the pmi interface for MPICH.],,
with_pmi=default)
dnl
AC_ARG_WITH(logging,
[--with-logging=name - Specify the logging library for MPICH.],,
with_logging=default)
dnl
AC_ARG_ENABLE(weak-symbols,
[--enable-weak-symbols - Use weak symbols to implement PMPI routines (default)],,
enable_weak_symbols=yes)
dnl
dnl
dnl
AC_ARG_WITH(cross,
[--with-cross=file - Specify the values of variables that configure cannot
determine in a cross-compilation environment],,with_cross=no)
dnl
dnl Flavor is used to setup separate directories for the flavor-specific
dnl code (e.g., libraries that depend on a particular thread library) from
dnl the generic files (e.g., the manual pages).
AC_ARG_WITH(flavor,
[--with-flavor=name - Set the name to associate with this flavor of MPICH],,)
dnl
dnl
dnl First check that we have a clean build if we are doing a VPATH build
if test "`cd $srcdir && pwd`" != "`pwd`" && test -f $srcdir/config.status ; then
    AC_MSG_ERROR([You cannot do a VPATH build if the source directory has been
    configured.  Run "make distclean" in $srcdir first.])
fi
dnl
dnl Process any enable or with values
dnl We must do enable-fast first, because it changes the other enable values
if test "$enable_fast" = "yes" ; then
    enable_error_checking=no
    enable_error_messages=no
    enable_timing=no
    enable_g=no
    AC_DEFINE(NDEBUG,,[Define to suppress assertions])
fi
dnl error-checking
case "$enable_error_checking" in 
    no)
    ;;
    all|yes|runtime)
    changequote(<<,>>)
    error_checking_kind=`echo $enable_error_checking | tr '[a-z]' '[A-Z]'`
    changequote([,])
    error_checking_kind=MPID_ERROR_LEVEL_$error_checking_kind
    AC_DEFINE_UNQUOTED(HAVE_ERROR_CHECKING,$error_checking_kind,[define to enable error checking])
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_error_checking for enable-error-checking])
    ;;
esac
dnl
dnl error-messages
case "$enable_error_messages" in 
    no|none)
        error_message_kind="MPICH_ERROR_MSG_NONE"
    ;;
    all|yes)
	error_message_kind="MPICH_ERROR_MSG_ALL"
    ;;
    generic)
	error_message_kind="MPICH_ERROR_MSG_GENERIC"
    ;;
    class)
	error_message_kind="MPICH_ERROR_MSG_CLASS"
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_error_messages for enable-error-messages])
    ;;
esac
AC_DEFINE_UNQUOTED(MPICH_ERROR_MSG_LEVEL,$error_message_kind,[define to enable error messages])
dnl timing
dnl Still to do: add subsets: e.g., class=pt2pt,class=coll.  See mpich2 doc
case "$enable_timing" in
    no|none)
    ;;
    all|log|yes|time|runtime)
    changequote(<<,>>)
    timing_kind=`echo $enable_timing | tr '[a-z]' '[A-Z]'`
    changequote([,])
    timing_kind=MPID_TIMING_KIND_$timing_kind
    AC_DEFINE_UNQUOTED(HAVE_TIMING,$timing_kind,[define to enable timing collection])
    AC_DEFINE(COLLECT_STATS,,[define to enable collection of statistics])
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_timing for enable-timing])
    ;; 
esac
dnl
dnl threads
case "$enable_threads" in
    no|single)
    AC_DEFINE(MPICH_SINGLE_THREADED,,[define to for single threaded])
    ;;
    runtime=*|multiple=*)
    thread_type=`echo $enable_threads | sed -e 's/^.*=//'g`
    ;;
    all|yes|multiple|runtime)
    thread_type=pthread
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_threads for enable-threads])
    ;; 
esac
dnl
dnl enable-g
case "$enable_g" in 
    no|none)
    ;;
    mem|all|yes)
    AC_DEFINE(USE_MEMORY_TRACING,,[Define to enable memory tracing])
    enable_g_mem=yes
    CFLAGS="$CFLAGS -g"
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_g for enable-g])
    ;;
esac

if test "$enable_f77" = "yes" ; then
   subsystems="$subsystems src/binding/f77"
   bindings="$bindings f77"
   AC_DEFINE(HAVE_FORTRAN_BINDING,,[Define if Fortran is supported])
fi
if test "$enable_f90" = "yes" ; then
   subsystems="$subsystems src/binding/f90"
   bindings="$bindings f90"
   AC_DEFINE(HAVE_FORTRAN_BINDING,,[Define if Fortran is supported])
fi
if test "$enable_cxx" = "yes" ; then
   subsystems="$subsystems src/binding/cxx"
   bindings="$bindings cxx"
   AC_DEFINE(HAVE_CXX_BINDING,,[Define if C++ is supported])
fi
AC_SUBST(bindings)
dnl
pac_cross_compiling=no
if test "$with_cross" != "no" ; then
    if test -s "$with_cross" ; then
        AC_MSG_RESULT([Reading values from cross-compilation file $with_cross])
        . $with_cross
	# Autoconf 2.52 no longer sets cross_compiling except with the
	# awkward "targethost" options.
	pac_cross_compiling=yes
	cross_compiling=yes
	ac_cv_prog_cc_cross=yes
	ac_cv_prog_f77_cross=yes
        ac_cv_prog_cxx_cross=yes
        export cross_compiling
	# Export all cross variables.  Any subsidiary configure should also
        # export CROSS_xxx
	rm -f confcross
	(set) 2>&1 | grep CROSS_ | \
	      sed -e 's/^/export /g' -e 's/=.*//g' > confcross
	. confcross
	rm -f confcross      
    fi
fi
dnl
PAC_ARG_SHAREDLIBS
dnl
dnl CC_SHL=true
dnl C_LINK_SHL=true
dnl case "$enable_sharedlibs" in 
dnl     no|none)
dnl     ;;
dnl     gcc)
dnl     AC_MSG_RESULT([Creating shared libraries using GNU])
dnl     # Not quite right yet.  See mpich/util/makesharedlib
dnl     # Use syntax that works in both Make and the shell
dnl     #C_LINK_SHL='${CC} -shared -Wl,-r'
dnl     C_LINK_SHL='${CC} -shared'
dnl     #C_LINK_SHL='${CC} -shared -Wl,-h,<finallibname>'
dnl     CC_SHL='${CC} -shared -fpic'
dnl     ;;
dnl     libtool)
dnl     AC_MSG_RESULT([Creating shared libraries using libtool (not yet supported)])
dnl     ;;
dnl     *)
dnl     AC_MSG_WARN([Unknown value $enable_sharedlibs for enable-sharedlibs])
dnl     ;;  
dnl esac
dnl AC_SUBST(CC_SHL)
dnl AC_SUBST(C_LINK_SHL)
dnl
dnl
dnl with-device
if test "$with_device" = "default" ; then
    # Pick the device.  For now, always choose ch3
    with_device=ch3
fi
dnl Extract the device name from any options
device_name=`echo $with_device | sed -e 's/:.*//g'`
changequote(<<,>>)
device_args=`echo $with_device | sed -e 's/[^:]*://g'`
changequote([,])
dnl
dnl This test is complicated by the fact that top_srcdir is not set until
dnl the very end of configure.  Instead, we get it ourselves
if test -z "$top_srcdir" ; then
   use_top_srcdir=$srcdir   
else
   use_top_srcdir=$top_srcdir
fi
if test -z "$master_top_srcdir" ; then 
    # This needs to be an absolute pathname
    case "$use_top_srcdir" in
    /) ;;
    \.) ;;
    *)
        use_top_srcdir=`(cd $use_top_srcdir ; pwd)`
	;;	
    esac
    master_top_srcdir=$use_top_srcdir
fi
AC_SUBST(master_top_srcdir)
export master_top_srcdir
dnl
if test ! -d $use_top_srcdir/src/mpid/$device_name ; then
dnl     WAIT UNTIL WE INCLUDE A DEVICE
dnl     AC_MSG_ERROR([Device $device_name is unknown)]
    AC_MSG_WARN([Device $device_name is unknown])
elif test ! -x $use_top_srcdir/src/mpid/$device_name/configure ; then
    AC_MSG_WARN([Device $device_name has no configure])
    device_name=""
else 
    # Add the device to the configure list
    subsystems="$subsystems src/mpid/$device_name"
    dnl Make device_name available to subdirs
fi
AC_SUBST(device_name)
dnl with-pmi
if test "$with_pmi" = "default" -o "$with_pmi" = "yes" ; then
    with_pmi=forker
fi
pmi_name=$with_pmi
dnl
if test ! -d $use_top_srcdir/src/pmi/impls/$pmi_name ; then
    AC_MSG_WARN([$use_top_srcdir/src/pmi/impls/$pmi_name does not exist. PMI is unknown])
elif test ! -x $use_top_srcdir/src/pmi/impls/$pmi_name/configure ; then
    AC_MSG_WARN([pmi $pmi_name has no configure])
    pmi_name=""
else
    subsystems="$subsystems src/pmi/impls/$pmi_name"
fi
AC_SUBST(pmi_name)
dnl with-logging
if test "$with_logging" = "yes" ; then
    with_logging=rlog
fi
logging_name=$with_logging
if test "$with_logging" != "no" ; then
    logging_dir=logging
fi
AC_SUBST(logging_dir)
dnl
if test "$with_logging" = "default" -o "$with_logging" = "no" ; then
    logging_name=""
elif test ! -d $use_top_srcdir/src/util/logging/$logging_name ; then
    AC_MSG_WARN([$use_top_srcdir/src/util/logging/$logging_name does not exist.  Logging library is unknown])
elif test ! -x $use_top_srcdir/src/util/logging/$logging_name/configure ; then
    AC_MSG_WARN([logging library $logging_name has no configure])
    logging_name=""
else
    subsystems="$subsystems src/util/logging/$logging_name"
fi
logging_subdirs=""
if test "$logging_name" = "dlog" ; then
    logging_subdirs="slog_api dlog dlog2slog"
    subsystems="$subsystems src/util/logging/slog_api"
fi
if test "$logging_name" = "rlog" ; then
    logging_subdirs="rlog"
fi
use_logging_variable="MPID_LOGGING_`echo $logging_name | tr a-z A-Z`"
AC_DEFINE_UNQUOTED(USE_LOGGING,$use_logging_variable,[define to choose logging library])
dnl
AC_SUBST(logging_name)
AC_SUBST(logging_subdirs)
dnl The recommended order for items in a configure.in file is
dnl     check for programs
dnl     check for libraries
dnl     check for header files
dnl     check for typedefs
dnl     check for structures
dnl     check for compiler characteristics
dnl     check for library functions
dnl     check for system services
dnl Here are some sample tests
dnl
dnl Find a C compiler (choose gcc first).
dnl Autoconf 2.13 has the feature that you cannot override the test for
dnl cross-compilation made in [AC_PROG_CC].  
AC_PROG_CC
# Bug in autoconf.  Restore cross settings
if test "$pac_cross_compiling" = "yes" -a "$ac_cv_prog_cc_cross" = "no" ; then
    AC_MSG_RESULT([Resetting cross compilation to yes])
    cross_compiling=yes
    ac_cv_prog_cc_cross=yes
    ac_cv_prog_f77_cross=yes
    ac_cv_prog_cxx_cross=yes
fi
AC_PATH_PROG(AR,ar)
AC_PATH_PROG(RANLIB,ranlib)
AC_PROG_INSTALL
dnl
dnl Now that CC is defined, get these values 
dnl eval C_LINK_SHL=$C_LINK_SHL
dnl eval CC_SHL=$CC_SHL
dnl Ensure that all subdir configures get this
export CC_SHL
export C_LINK_SHL
dnl
dnl Find SSH.  If SSH is defined, use that instead
dnl AC_PATH_PROG(SSH,ssh)
dnl
dnl AC_PROG_MAKE_SET
PAC_PROG_MAKE
dnl
dnl     check for compiler characteristics
dnl Check for support for weak symbols.  If not found, set NO_WEAK_SYM
dnl to the Make target name understood by simplemake.
NO_WEAK_SYM_TARGET=build_proflib
if test $enable_weak_symbols = yes ; then
    # Turn off weak symbols if they aren't available
    PAC_PROG_C_WEAK_SYMBOLS(,enable_weak_symbols=no)
fi
if test $enable_weak_symbols = "yes" ; then
    AC_DEFINE(USE_WEAK_SYMBOLS,,[Define if weak symbols should be used])
else
    NO_WEAK_SYM=build_proflib
    PROFILE_DEF_MPI="-DMPICH_PROFILE_MPI -DMPICH_MPI_FROM_PMPI"
fi
export NO_WEAK_SYM
export NO_WEAK_SYM_TARGET
export PROFILE_DEF_MPI
AC_SUBST(NO_WEAK_SYM)
AC_SUBST(NO_WEAK_SYM_TARGET)
AC_SUBST(PROFILE_DEF_MPI)
AC_C_CONST
PAC_C_VOLATILE
PAC_C_RESTRICT
AC_C_INLINE
PAC_C_STRUCT_ALIGNMENT
dnl
dnl Get the size of the C types for encoding in the basic datatypes and for
dnl the specific-sized integers
AC_CHECK_SIZEOF(short,$CROSS_SIZEOF_SHORT)
AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_INT)
AC_CHECK_SIZEOF(long,$CROSS_SIZEOF_LONG)
AC_CHECK_SIZEOF(long long,$CROSS_SIZEOF_LONG_LONG)
AC_CHECK_SIZEOF(float,$CROSS_SIZEOF_FLOAT)
AC_CHECK_SIZEOF(double,$CROSS_SIZEOF_DOUBLE)
AC_CHECK_SIZEOF(long double,$CROSS_SIZEOF_LONG_DOUBLE)
AC_CHECK_SIZEOF(wchar_t,$CROSS_SIZEOF_WCHAR_T)
AC_CHECK_SIZEOF(void *,$CROSS_SIZEOF_VOID_P)
dnl
AC_CACHE_CHECK([for int16_t],pac_cv_int16_t,[
AC_TRY_COMPILE([#include <sys/types.h>],[int16_t a=0;],
pac_cv_int16_t=yes,pac_cv_int16_t=no)])
dnl
dnl If there is not int16_t, try to define one
if test "$pac_cv_int16_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_SHORT" ; then CROSS_SIZEOF_SHORT=2 ; fi
    AC_CHECK_SIZEOF(short,$CROSS_SIZEOF_SHORT)
    if test "$ac_cv_sizeof_short" = 2 ; then 
        INT16_T=short
    else
        INT16_T=int
    fi
    AC_SUBST(INT16_T)
else
    AC_DEFINE(HAVE_INT16_T,,[Define if int16_t is supported by the C compiler])
fi
AC_CACHE_CHECK([for int32_t],pac_cv_int32_t,[
AC_TRY_COMPILE([#include <sys/types.h>],[int32_t a=0;],
pac_cv_int32_t=yes,pac_cv_int32_t=no)])
dnl
dnl If there is not int32_t, try to define one
if test "$pac_cv_int32_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_INT" ; then CROSS_SIZEOF_INT=4 ; fi
    AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_INT)
    if test "$ac_cv_sizeof_int" = 4 ; then 
        INT32_T=int
    else
        # No good alternative
        INT32_T=int
    fi
    AC_SUBST(INT32_T)
else
    AC_DEFINE(HAVE_INT32_T,,[Define if int32_t is supported by the C compiler])
fi
dnl
dnl Generate a hex version of the size of each type
for type in short int long long_long float double long_double wchar_t ; do
    eval len=\$ac_cv_sizeof_$type
    if test -z "$len" ; then len=0 ; fi
    if test $len -le 0 ; then
         eval len_$type="00"
    elif test $len -le 9 ; then 
         eval len_$type="0$len" 
    elif test $len -le 15 ; then
         case $len in 
         10) char=a ;;
	 11) char=b ;;
	 12) char=c ;;
	 13) char=d ;;
	 14) char=e ;;
	 15) char=f ;;
         esac
         eval len_$type="0$char"
    elif test $len -le 31 ; then
         len=`expr $len - 16`
         eval len_$type="1$len"
    else
         AC_MSG_ERROR([Type sizes greater than 31 bytes not supported]) 
    fi
done
# By definition, sizeof char is 1
MPI_CHAR="0x4c000101"
MPI_UNSIGNED_CHAR="0x4c000102"
MPI_SHORT="0x4c00${len_short}03"
MPI_UNSIGNED_SHORT="0x4c00${len_short}04"
MPI_INT="0x4c00${len_int}05"
MPI_UNSIGNED_INT="0x4c00${len_int}06"
MPI_LONG="0x4c00${len_long}07"
MPI_UNSIGNED_LONG="0x4c00${len_long}08"
MPI_LONG_LONG="0x4c00${len_long_long}09"
MPI_FLOAT="0x4c00${len_float}0b"
MPI_DOUBLE="0x4c00${len_double}0d"
MPI_LONG_DOUBLE="0x4c00${len_long_double}0f"
MPI_BYTE="0x4c000111"
MPI_WCHAR_T="0x4c00${len_wchar_t}13"
AC_SUBST(MPI_CHAR)
AC_SUBST(MPI_UNSIGNED_CHAR)
AC_SUBST(MPI_SHORT)
AC_SUBST(MPI_UNSIGNED_SHORT)
AC_SUBST(MPI_INT)
AC_SUBST(MPI_UNSIGNED_INT)
AC_SUBST(MPI_LONG)
AC_SUBST(MPI_UNSIGNED_LONG)
AC_SUBST(MPI_LONG_LONG)
AC_SUBST(MPI_FLOAT)
AC_SUBST(MPI_DOUBLE)
AC_SUBST(MPI_LONG_DOUBLE)
AC_SUBST(MPI_BYTE)
AC_SUBST(MPI_WCHAR_T)
dnl
dnl Is char * the byte address?
AC_CACHE_CHECK([if char * pointers use give byte addresses],
pac_cv_c_char_p_is_byte,[
AC_TRY_RUN([
int main(int argc, char **argv ){
char *a, buf;
a = &buf;
if ((long)(a-(char*)0) == (long)(a)) return 0; return 1;
}],pac_cv_c_char_p_is_byte=yes,pac_cv_char_p_is_byte=no,
pac_cv_char_p_is_byte=unknown)])
if test "$pac_cv_char_p_is_byte" = "yes" ; then
    AC_DEFINE(CHAR_PTR_IS_BYTE,,[define if char * is byte pointer])
fi
dnl
dnl check for library functions
if test -n "$thread_type" ; then
    case $thread_type in 
        pthread|posix)
	AC_SEARCH_LIBS(pthread_create,pthread,
	    AC_DEFINE(HAVE_PTHREAD_CREATE,,[Define for pthreads]))
	;;
	solaris|thr)
	AC_SEARCH_LIBS(thr_create,thread,
	    AC_DEFINE(HAVE_THR_CREATE,,[Define for Solaris threads]))
	;;
	*)
	AC_MSG_WARN([Unknown thread type $thread type]) 
	;;
    esac
fi
dnl
dnl Check for special compile characteristics
AC_MSG_CHECKING([for gcc __asm__ and pentium cmpxchgl instruction])
AC_TRY_RUN([
int main(int argc, char *argv[])
{
long int compval = 10;
volatile long int *p = &compval;
long int oldval = 10;
long int newval = 20;
char ret;
long int readval;
__asm__ __volatile__ ("lock; cmpxchgl %3, %1; sete %0"
	: "=q" (ret), "=m" (*p), "=a" (readval)
	: "r" (newval), "m" (*p), "a" (oldval));
return (compval == 20) ? 0 : -1;
}
], AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GCC_AND_PENTIUM_ASM, 1,
Define if using gcc on a system with an Intel Pentium class chip), 
AC_MSG_RESULT(no), AC_MSG_RESULT(not checking when cross compiling))
dnl
dnl Is there libnsl needed for gethostbyname?
dnl AC_SEARCH_LIBS(gethostbyname,nsl)
dnl
dnl Look for Standard headers
AC_HEADER_STDC
dnl Check for a specific header
AC_CHECK_HEADERS(sys/types.h)
dnl
dnl Check for functions.  This invokes another test if the function is 
dnl found.  The braces around the second test are essential. 
dnl AC_CHECK_FUNC(setpgrp,[AC_FUNC_SETPGRP])
dnl These are used for error reporting
AC_CHECK_FUNCS(vsnprintf vsprintf)
dnl Use snprintf if possible when creating messages
AC_CHECK_FUNCS(snprintf)
dnl
dnl If internationalization selected, try to find the needed functions
if test "$enable_internat" = "yes" ; then
    AC_CHECK_HEADERS(libintl.h)
    AC_CHECK_FUNCS(gettext dgettext)
    if test "$ac_cv_header_libintl" = "yes" -a \
	    "$ac_cv_func_gettext" = "yes" -a \
	    "$ac_cv_func_dgettext" = "yes" ; then
	AC_DEFINE(USE_GETTEXT,,[Define if messages should use gettext])
    fi
fi
dnl
if test "$enable_g_mem" != "yes" ; then
    dnl Strdup is needed only if memory tracing is not enabled.
    AC_CHECK_FUNCS(strdup)
else
    dnl search.h is used for fancier output from trmem.  Disabled for now,
    dnl since the tsearch routines have problematic prototypes.
    AC_CHECK_HEADERS(search)
    AC_CHECK_FUNCS(tsearch)
    dnl Check that we can compile tsearch without error.  Try to compile
    dnl it with the header and the char * args
    if test "$ac_cv_func_tsearch" = "yes" ; then
        AC_CACHE_CHECK([whether tsearch requires char* args],
	               pac_cv_tsearch_charp,[
        AC_TRY_COMPILE([#include <search.h>
    char *tsearch( char *k, char **r, (int (*)())compare ) { return k; }],
    [int f=0;],pac_cv_tsearch_charp=yes,pac_cv_tsearch_charp=no)])
        if test "$pac_cv_tsearch_charp" = "yes" ; then
	    AC_DEFINE(USE_TSEARCH_WITH_CHARP,,[Define if tsearch requires char pointers])
	fi
    fi
    dnl Note that HPUX and AIX may require _INCLUDE_XOPEN_SOURCE or
    dnl _XOPEN_SOURCE be defined respectively.
fi
dnl
dnl Specific checks that a function works correctly
dnl AC_FUNC_VFORK
dnl
dnl Check for support for long file names
dnl AC_SYS_LONG_FILE_NAMES
dnl
dnl
dnl Setup other replaceable values
MPILIBNAME=mpich
AC_SUBST(MPILIBNAME)
MPI_AINT=int
for type in int long long_long short ; do
    eval len=\$ac_cv_sizeof_$type
    if test "$len" = "$ac_cv_sizeof_void_p" ; then
        MPI_AINT=`echo $type | sed -e 's/_/ /'`
        break
    fi
done
AC_SUBST(MPI_AINT)
dnl
dnl If sizeof(mpi_aint) = sizeof(int), set this value
if test "$ac_cv_sizeof_int" = "$ac_cv_sizeof_void_p" ; then
    AC_DEFINE(SIZEOF_INT_IS_AINT,,[define if sizeof(int) = sizeof(void*)])
fi
dnl
dnl Configure any subdirectories.  Note that config.status will *not* 
dnl reexecute these!
dnl Export any important variables first:
dnl 
dnl Gastly problem.  CONFIG_SUBDIRS only adds the directories to the
dnl list of directories to be configured.  It does NOT control the
dnl timing of the configuration.  For that, we must do something different.
export AR
export RANLIB
export MPILIBNAME
export CC
PAC_SUBDIR_CACHE
dnl AC_CONFIG_SUBDIRS(src/mpi/timer $subsystems)
PAC_CONFIG_SUBDIRS_IMMEDIATE(src/mpi/timer $subsystems)
dnl
dnl Once the subsystems are configured, we can inquire about what
dnl they have been found.  For example, we need the values for the
dnl Fortran datatypes from the Fortran system, if they are defined.
if test "$enable_f77" = "yes" -a -s src/binding/f77/mpif77.conf ; then
    # Load the values from the generated configuration file
    # These set the datatypes and the other Fortran types
    . ./src/binding/f77/mpif77.conf
else
    for name in CHARACTER INTEGER REAL LOGICAL COMPLEX DOUBLE_PRECISION \
	2INTEGER 2REAL DOUBLE_COMPLEX 2COMPLEX 2DOUBLE_PRECISION \
	2DOUBLE_COMPLEX ; do
	fullname="MPI_$name"
	eval $fullname=MPI_DATATYPE_NULL
    done
    # Temporary values for MPI_Fint (need help from the Fortran subsystem)
    MPI_FINT=int
fi
AC_SUBST(MPI_CHARACTER)
AC_SUBST(MPI_INTEGER)
AC_SUBST(MPI_REAL)
AC_SUBST(MPI_LOGICAL)
AC_SUBST(MPI_COMPLEX)
AC_SUBST(MPI_DOUBLE_PRECISION)
AC_SUBST(MPI_2INTEGER)
AC_SUBST(MPI_2REAL)
AC_SUBST(MPI_DOUBLE_COMPLEX)
AC_SUBST(MPI_2DOUBLE_PRECISION)
AC_SUBST(MPI_2COMPLEX)
AC_SUBST(MPI_2DOUBLE_COMPLEX)
AC_SUBST(MPI_FINT)

# Temporary values for MPI_Offset (need help from IO subsystem)
MPI_OFFSET=long
AC_SUBST(MPI_OFFSET)
dnl
dnl Temporary value for extra status information, from device subsystem
AC_SUBST(EXTRA_STATUS_DECL)
dnl
dnl Get the value of MPI_MAX_PROCESSOR_NAME
if test -s src/mpid/$device_name/Makefile ; then
    maxproc="`${MAKE} -f src/mpid/$device_name/Makefile echomaxprocname`"
fi
if test -z "$maxproc" ; then
    maxproc=128
fi
# We should check that the maxproc value is a valid integer
MPI_MAX_PROCESSOR_NAME="$maxproc"
AC_SUBST(MPI_MAX_PROCESSOR_NAME)
dnl
dnl
dnl Set the libraries to use in building programs
if test "$enable_weak_symbols" != "yes" ; then
    LIBS="-lmpich -lpmpich -lmpich $LIBS"
else
    LIBS="-lmpich $LIBS"
fi
dnl
dnl Generate the Makefiles from Makefile.in
dnl Also generate mpi.h from mpi.h.in so that we can eliminate all ifdefs
dnl from the file.

AC_OUTPUT(Makefile src/Makefile \
          src/binding/Makefile \
          src/mpi/Makefile \
          src/mpi/attr/Makefile \
	  src/mpi/coll/Makefile \
          src/mpi/comm/Makefile \
	  src/mpi/datatype/Makefile \
          src/mpi/errhan/Makefile \
          src/mpi/group/Makefile \
          src/mpi/init/Makefile \
          src/mpi/io/Makefile \
          src/mpi/misc/Makefile \
          src/mpi/pt2pt/Makefile \
          src/mpi/rma/Makefile \
          src/mpi/spawn/Makefile \
          src/mpi/topo/Makefile \
          src/mpid/Makefile \
          src/mpid/common/Makefile \
          src/mpid/common/datatype/Makefile \
          src/pmi/Makefile \
          src/pmi/impls/Makefile \
	  src/util/Makefile \
	  src/util/info/Makefile \
	  src/util/instrm/Makefile \
	  src/util/mem/Makefile \
	  src/util/msgs/Makefile \
	  src/util/param/Makefile \
	  src/util/thread/Makefile \
          src/util/dbg/Makefile \
          src/include/mpi.h \
	  test/Makefile test/util/Makefile \
	  test/mpid/Makefile \
	  test/util/info/Makefile \
	  test/mpi/Makefile \
          test/mpi/basic/Makefile \
	  test/mpi/util/Makefile \
	  test/mpi/coll/Makefile \
	  test/mpi/datatype/Makefile \
	  test/mpi/errhan/Makefile \
	  test/mpi/group/Makefile \
	  examples/Makefile\
          src/util/logging/Makefile\
          src/util/timing/Makefile )

dnl The following files should be created by the appropriate configure within
dnl the device.
dnl          src/mpid/mm/Makefile \


PAC_SUBDIR_CACHE_CLEANUP
echo 'Configuration completed.'
