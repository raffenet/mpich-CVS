dnl Process this file with autoconf to produce a configure script.
dnl
dnl aclocal_cache.m4, included by sowing/confdb/aclocal.m4, fixes 
dnl bugs in autoconf caching.
dnl
dnl The file name here refers to a file in the source being configured
AC_INIT(src/include/mpiimpl.h)
dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
AC_CONFIG_HEADER(src/include/mpichconf.h)
dnl
dnl Set the directory that contains support scripts such as install-sh and
dnl config.guess
AC_CONFIG_AUX_DIR(confdb)
dnl
dnl Use AC_ARG_ENABLE to look for --enable-feature and AC_ARG_WITH to look for
dnl --with-capability
dnl
dnl Enable better caching control
PAC_ARG_CACHING
dnl
AC_ARG_ENABLE(echo, 
[--enable-echo  - Turn on strong echoing. The default is enable=no.] ,set -x)
dnl
AC_ARG_ENABLE(strict,[--enable-strict - Turn on strict debugging with gcc],
CFLAGS="$CFLAGS -O -Wall -Wstrict-prototypes -Wmissing-prototypes")
dnl
AC_ARG_ENABLE(error-checking,
[--enable-error-checking=level - Control the amount of error checking.  
level may be 
    no        - no error checking
    runtime   - error checking controlable at runtime through environment 
                variables
    all       - error checking always enabled],,enable_error_checking=all)
dnl
AC_ARG_ENABLE(timing,
[--enable-timing=level - Control the amount of timing information 
collected by the MPICH implementation.  level may be
    none    - Collect no data
    all     - Collect lots of data
    runtime - Runtime control of data collected
The default is all.],,enable_timing=all)
dnl
dnl Set single for now
AC_ARG_ENABLE(threads,
[--enable-threads=level - Control the level of thread support in the 
MPICH implementation.  level may be 
    single - Single threaded (MPI_THREAD_SINGLE and MPI_THREAD_FUNNELED)
    multiple - Multithreaded (MPI_THREAD_SERIAL and MPI_THREAD_MULTIPLE)],,
enable_threads=single)
dnl
AC_ARG_ENABLE(g,
[--enable-g=option - Control the level of debugging support in the MPICH
implementation.  option may be a list of common separated names including
    none  - No debugging
    mem   - Memory usage tracing
    all   - All of the above choices],,enable_g=none)
dnl
dnl
AC_ARG_ENABLE(sharedlibs,
[--enable-sharedlibs=kind - Enable shared libraries.  kind may be
    gnu     - Standard gcc and GNU ld options for creating shared libraries
    libtool - GNU libtool 
This option is currently ignored])
dnl With options
dnl "default" is a special device that allows MPICH to choose one based on 
dnl the environment.
AC_ARG_WITH(device,
[--with-device=name - Specify the communication device for MPICH.],,
with_device=default)
dnl
dnl Process any enable or with values
dnl error-checking
case "$enable_error_checking" in 
    no)
    ;;
    all|yes|runtime)
    changequote(<<,>>)
    error_checking_kind=`echo $enable_error_checking | tr '[a-z]' '[A-Z]'`
    changequote([,])
    error_checking_kind=MPID_ERROR_LEVEL_$error_checking_kind
    AC_DEFINE_UNQUOTED(HAVE_ERROR_CHECKING,$error_checking_kind,[define to enable error checking])
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_error_checking for enable-error-checking])
    ;;
esac
dnl
dnl timing
case "$enable_timing" in
    no|none)
    ;;
    all|log|yes|time|runtime)
    changequote(<<,>>)
    timing_kind=`echo $enable_timing | tr '[a-z]' '[A-Z]'`
    changequote([,])
    timing_kind=MPID_TIMING_KIND_$timing_kind
    AC_DEFINE_UNQUOTED(HAVE_TIMING,$timing_kind,[define to enable timing collection])
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_timing for enable-timing])
    ;; 
esac
dnl
dnl threads
case "$enable_threads" in
    no|single)
    AC_DEFINE(MPICH_SINGLE_THREADED,,[define to for single threaded])
    ;;
    runtime=*|multiple=*)
    thread_type=`echo $enable_threads | sed -e 's/^.*=//'g`
    ;;
    all|yes|multiple|runtime)
    thread_type=pthread
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_threads for enable-threads])
    ;; 
esac
dnl
dnl enable-g
case "$enable_g" in 
    no|none)
    ;;
    mem|all)
    AC_DEFINE(USE_MEMORY_TRACING,,[Define to enable memory tracing])
    enable_g_mem=yes
    CFLAGS="$CFLAGS -g"
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_g for enable-g])
    ;;
esac
dnl
dnl with-device
if test "$with_device" = "default" ; then
    # Pick the device.  For now, always choose multi-method
    with_device=mm
fi
dnl Extract the device name from any options
device_name=`echo $with_device | sed -e 's/:.*//g'`
changequote(<<,>>)
device_args=`echo $with_device | sed -e 's/[^:]*://g'`
changequote([,])
if test ! -d $top_srcdir/src/mpid/$device_name ; then
dnl     WAIT UNTIL WE INCLUDE A DEVICE
dnl     AC_MSG_ERROR([Device $device_name is unknown)]
    AC_MSG_WARN([Device $device_name is unknown])
else 
    # Add the device to the configure list
    subsystems="$subsystems src/mpid/$devicename"
fi
dnl The recommended order for items in a configure.in file is
dnl     check for programs
dnl     check for libraries
dnl     check for header files
dnl     check for typedefs
dnl     check for structures
dnl     check for compiler characteristics
dnl     check for library functions
dnl     check for system services
dnl Here are some sample tests
dnl
dnl Find a C compiler (choose gcc first)
AC_PROG_CC
AC_PATH_PROG(AR,ar)
AC_PATH_PROG(RANLIB,ranlib)
dnl
dnl Find SSH.  If SSH is defined, use that instead
dnl AC_PATH_PROG(SSH,ssh)
dnl
dnl AC_PROG_MAKE_SET
PAC_PROG_MAKE
dnl
dnl     check for compiler characteristics
PAC_PROG_C_WEAK_SYMBOLS
AC_C_CONST
PAC_C_VOLATILE
PAC_C_RESTRICT
AC_C_INLINE
PAC_C_STRUCT_ALIGNMENT
dnl
dnl Get the size of the C types for encoding in the basic datatypes and for
dnl the specific-sized integers
AC_CHECK_SIZEOF(short,CROSS_SIZEOF_SHORT)
AC_CHECK_SIZEOF(int,CROSS_SIZEOF_INT)
AC_CHECK_SIZEOF(long,CROSS_SIZEOF_LONG)
AC_CHECK_SIZEOF(long long,CROSS_SIZEOF_LONG_LONG)
AC_CHECK_SIZEOF(float,CROSS_SIZEOF_FLOAT)
AC_CHECK_SIZEOF(double,CROSS_SIZEOF_DOUBLE)
AC_CHECK_SIZEOF(long double,CROSS_SIZEOF_LONG_DOUBLE)
AC_CHECK_SIZEOF(wchar_t,CROSS_SIZEOF_WCHAR_T)
AC_CHECK_SIZEOF(void *,CROSS_SIZEOF_VOID_P)
dnl
AC_CACHE_CHECK([for int16_t],pac_cv_int16_t,[
AC_TRY_COMPILE([#include <sys/types.h>],[int16_t a=0;],
pac_cv_int16_t=yes,pac_cv_int16_t=no)])
dnl
dnl If there is not int16_t, try to define one
if test "$pac_cv_int16_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_SHORT" ; then CROSS_SIZEOF_SHORT=2 ; fi
    AC_CHECK_SIZEOF(short,$CROSS_SIZEOF_SHORT)
    if test "$ac_cv_sizeof_short" = 2 ; then 
        INT16_T=short
    else
        INT16_T=int
    fi
    AC_SUBST(INT16_T)
else
    AC_DEFINE(HAVE_INT16_T,,[Define if int16_t is supported by the C compiler])
fi
AC_CACHE_CHECK([for int32_t],pac_cv_int32_t,[
AC_TRY_COMPILE([#include <sys/types.h>],[int32_t a=0;],
pac_cv_int32_t=yes,pac_cv_int32_t=no)])
dnl
dnl If there is not int32_t, try to define one
if test "$pac_cv_int32_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_INT" ; then CROSS_SIZEOF_INT=4 ; fi
    AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_INT)
    if test "$ac_cv_sizeof_int" = 4 ; then 
        INT32_T=int
    else
        # No good alternative
        INT32_T=int
    fi
    AC_SUBST(INT32_T)
else
    AC_DEFINE(HAVE_INT32_T,,[Define if int32_t is supported by the C compiler])
fi
dnl
dnl Generate a hex version of the size of each type
for type in short int long long_long float double long_double wchar_t ; do
    eval len=\$ac_cv_sizeof_$type
    if test -z "$len" ; then len=0 ; fi
    if test $len -le 0 ; then
         eval len_$type="00"
    elif test $len -le 9 ; then 
         eval len_$type="0$len" 
    elif test $len -le 15 ; then
         case $len in 
         10) char=a ;;
	 11) char=b ;;
	 12) char=c ;;
	 13) char=d ;;
	 14) char=e ;;
	 15) char=f ;;
         esac
         eval len_$type="0$char"
    else
         len=`expr $len - 16`
         eval len_$type="1$len"
    fi
done
# By definition, sizeof char is 1
MPI_CHAR="0x50000101"
MPI_UNSIGNED_CHAR="0x50000201"
MPI_SHORT="0x500003$len_short"
MPI_UNSIGNED_SHORT="0x500004$len_short"
MPI_INT="0x500005$len_int"
MPI_UNSIGNED_INT="0x500006$len_int"
MPI_LONG="0x500007$len_long"
MPI_UNSIGNED_LONG="0x500008$len_long"
MPI_LONG_LONG="0x500009$len_long_long"
MPI_FLOAT="0x50000b$len_float"
MPI_DOUBLE="0x50000d$len_double"
MPI_LONG_DOUBLE="0x50000f$len_long_double"
MPI_BYTE="0x50001101"
MPI_WCHAR_T="0x500013$len_wchar_t"
AC_SUBST(MPI_CHAR)
AC_SUBST(MPI_UNSIGNED_CHAR)
AC_SUBST(MPI_SHORT)
AC_SUBST(MPI_UNSIGNED_SHORT)
AC_SUBST(MPI_INT)
AC_SUBST(MPI_UNSIGNED_INT)
AC_SUBST(MPI_LONG)
AC_SUBST(MPI_UNSIGNED_LONG)
AC_SUBST(MPI_LONG_LONG)
AC_SUBST(MPI_FLOAT)
AC_SUBST(MPI_DOUBLE)
AC_SUBST(MPI_LONG_DOUBLE)
AC_SUBST(MPI_BYTE)
AC_SUBST(MPI_WCHAR_T)
dnl
dnl Is char * the byte address?
AC_CACHE_CHECK([if char * pointers use give byte addresses],
pac_cv_c_char_p_is_byte,[
AC_TRY_RUN([
int main(int argc, char **argv ){
char *a, buf;
a = &buf;
if ((long)(a-(char*)0) == (long)(a)) return 0; return 1;
}],pac_cv_c_char_p_is_byte=yes,pac_cv_char_p_is_byte=no,
pac_cv_char_p_is_byte=unknown)])
if test "$pac_cv_char_p_is_byte" = "yes" ; then
    AC_DEFINE(CHAR_PTR_IS_BYTE,,[define if char * is byte pointer])
fi
dnl
dnl check for library functions
if test -n "$thread_type" ; then
    case $thread_type in 
        pthread|posix)
	AC_SEARCH_LIBS(pthread_create,pthread,
	    AC_DEFINE(HAVE_PTHREAD_CREATE,,[Define for pthreads]))
	;;
	solaris|thr)
	AC_SEARCH_LIBS(thr_create,thread,
	    AC_DEFINE(HAVE_THR_CREATE,,[Define for Solaris threads]))
	;;
	*)
	AC_MSG_WARN([Unknown thread type $thread type]) 
	;;
    esac
fi
dnl Is there libnsl needed for gethostbyname?
dnl AC_SEARCH_LIBS(gethostbyname,nsl)
dnl
dnl Look for Standard headers
AC_HEADER_STDC
dnl Check for a specific header
AC_CHECK_HEADERS(sys/types.h)
dnl
dnl Check for functions.  This invokes another test if the function is 
dnl found.  The braces around the second test are essential. 
dnl AC_CHECK_FUNC(setpgrp,[AC_FUNC_SETPGRP])
if test "$enable_g_mem" != "yes" ; then
    dnl Strdup is needed only if memory tracing is not enabled.
    AC_CHECK_FUNCS(strdup)
else
    dnl search.h is used for fancier output from trmem.  Disabled for now,
    dnl since the tsearch routines have problematic prototypes.
    dnl AC_CHECK_HEADERS(search)
    dnl AC_CHECK_FUNCS(tsearch)
    dnl Check that we can compile tsearch without error
    dnl (not done yet)
    :
fi
dnl
dnl Specific checks that a function works correctly
dnl AC_FUNC_VFORK
dnl
dnl Check for support for long file names
dnl AC_SYS_LONG_FILE_NAMES
dnl
dnl
dnl Setup other replaceable values
MPILIBNAME=mpich
AC_SUBST(MPILIBNAME)
MPI_AINT=int
for type in int long long_long short ; do
    eval len=\$ac_cv_sizeof_$type
    if test "$len" = "$ac_cv_sizeof_void_p" ; then
        MPI_AINT=`echo $type | sed -e 's/_/ /'`
        break
    fi
done
AC_SUBST(MPI_AINT)
dnl
dnl Configure any subdirectories.  Note that config.status will *not* 
dnl reexecute these!
dnl Export any important variables first:
export AR
export RANLIB
export MPILIBNAME
export CC
PAC_SUBDIR_CACHE
AC_CONFIG_SUBDIRS(src/mpi/timer $subsystems )
dnl
# Temporary values for MPI_Fint (need help from the Fortran subsystem)
MPI_FINT=int
AC_SUBST(MPI_FINT)
dnl
dnl Temporary value for extra status information, from device subsystem
AC_SUBST(EXTRA_STATUS_DECL)
dnl
dnl Generate the Makefiles from Makefile.in
dnl Also generate mpi.h from mpi.h.in so that we can eliminate all ifdefs
dnl from the file.
AC_OUTPUT(Makefile src/Makefile \
          src/mpi/Makefile \
          src/mpi/attr/Makefile \
	  src/mpi/coll/Makefile \
          src/mpi/comm/Makefile \
	  src/mpi/datatype/Makefile \
          src/mpi/errhan/Makefile \
          src/mpi/group/Makefile \
          src/mpi/init/Makefile \
          src/mpi/io/Makefile \
          src/mpi/misc/Makefile \
          src/mpi/pt2pt/Makefile \
          src/mpi/rma/Makefile \
          src/mpi/spawn/Makefile \
          src/mpi/topo/Makefile \
	  src/util/Makefile \
	  src/util/info/Makefile \
	  src/util/mem/Makefile \
	  src/util/thread/Makefile \
          src/include/mpi.h \
	  test/Makefile test/util/Makefile \
	  test/util/info/Makefile \
	  test/mpi/Makefile \
	  test/mpi/util/Makefile \
	  test/mpi/datatype/Makefile \
	  examples/Makefile )
PAC_SUBDIR_CACHE_CLEANUP
