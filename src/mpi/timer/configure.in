dnl Process this file with autoconf to produce a configure script.
dnl
dnl aclocal_cache.m4, included by sowing/confdb/aclocal.m4, fixes 
dnl bugs in autoconf caching.
dnl
dnl The file name here refers to a file in the source being configured
AC_INIT(wtime.c)
dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
AC_CONFIG_HEADER(timerconf.h)
AC_CONFIG_AUX_DIR(../../../confdb)
dnl
echo "RUNNING CONFIGURE FOR TIMER"
dnl
dnl
dnl Use AC_ARG_ENABLE to look for --enable-feature and AC_ARG_WITH to look for
dnl --with-capability
dnl Enable better caching control
PAC_ARG_CACHING
AC_ARG_ENABLE(echo, 
[--enable-echo  - Turn on strong echoing. The default is enable=no.] ,set -x)
AC_ARG_ENABLE(strict,[--enable-strict - Turn on strict debugging with gcc],
CFLAGS="$CFLAGS -O -Wall -Wstrict-prototypes -Wmissing-prototypes")
dnl
dnl
dnl Get the "master" top srcdir if we are a subdir configure
if test -z "$top_srcdir" ; then
   use_top_srcdir=$srcdir   
else
   use_top_srcdir=$top_srcdir
fi
if test -z "$master_top_srcdir" ; then 
    master_top_srcdir=$use_top_srcdir
fi
AC_SUBST(master_top_srcdir)
export master_top_srcdir
dnl
dnl The recommended order for items in a configure.in file is
dnl     check for programs
dnl     check for libraries
dnl     check for header files
dnl     check for typedefs
dnl     check for structures
dnl     check for compiler characteristics
dnl     check for library functions
dnl     check for system services
dnl Here are some sample tests
dnl
dnl Find a C compiler (choose gcc first)
AC_PROG_CC
AC_PATH_PROG(AR,ar)
AC_PATH_PROG(RANLIB,ranlib)
dnl
dnl Find SSH.  If SSH is defined, use that instead
dnl AC_PATH_PROG(SSH,ssh)
dnl
dnl Is there libnsl needed for gethostbyname?
dnl AC_SEARCH_LIBS(gethostbyname,nsl)
dnl
dnl Look for Standard headers
AC_HEADER_STDC
dnl Check for a specific header
dnl AC_CHECK_HEADERS(sys/systeminfo.h)
dnl
dnl Default type for timer stamp.
MPID_TIMER_TYPE=long
dnl
dnl Check for functions.  This invokes another test if the function is 
dnl found.  The braces around the second test are essential. 
dnl AC_CHECK_FUNC(setpgrp,[AC_FUNC_SETPGRP])
# clock_gettime is the POSIX gettimeofday
# gethrtime is the Solaris high-resolution timer
dnl
dnl Specific checks that a function works correctly
dnl
dnl
dnl Now that we know what the options are, choose the timer to use
dnl
dnl The default preference is
dnl    Solaris gethrtime
dnl    Posix   clock_gettime
dnl    Unix    gettimeofday (one of two versions)
dnl
dnl Also available are various hardware time stamps
dnl    Linux-x86 cycle counter
dnl    Linux-alpha cycle counter
dnl
dnl We also allow --enable-timer-type=name to select a timer type
AC_ARG_ENABLE(timer-type,[--enable-timer-type=name - Select the timer to use
for MPI_Wtime and internal timestamps.  name may be one of
    gethrtime - Solaris timer (Solaris systems only)
    gettime   - Posix timer (where available)
    gettimeofday - Most Unix systems
    linux86_cycle - Linux x86; returns cycle counts, not time in seconds
    linuxalpha_cycle - Like linux86_cycle, but for Linux Alpha    
    ],timer_type=$enable_timer_type)
dnl
if test -z "$timer_type" ; then 
    AC_CHECK_FUNCS(clock_gettime clock_getres gethrtime gettimeofday)
    if test "$ac_cv_func_gethrtime" = "yes" ; then
        timer_type=gethrtime
    elif test "$ac_cv_func_clock_gettime" = "yes" ; then
        timer_type=gettime
    elif test "$ac_cv_func_gettimeofday" = "yes" ; then
        timer_type=gettimeofday
    fi
fi
if test -z "$timer_type" ; then
    AC_MSG_ERROR([No timer found])
fi
dnl
dnl Check for valid timer and select datatypes for the time stamp
case "$timer_type" in
    gethrtime)
    MPID_TIMER_TYPE=hrtime_t
    AC_CHECK_FUNC(gethrtime,,[
         AC_MSG_ERROR([Requested timer gethrtime is not available])
])
    ;;
    gettime)
    AC_CHECK_FUNCS(clock_gettime clock_getres)
    MPID_TIMER_TYPE="struct timespec"
    # FreeBSD 4.3 incorrectly puts the header into sys/time.h; 
    # time.h is required (see pages 45 and 46 in the POSIX standard).
    # See if we can compile
    AC_CACHE_CHECK([for CLOCK_REALTIME defined in time.h],pac_cv_posix_clock_realtime,[
    AC_TRY_COMPILE([
#include <time.h>],[
    clockid_t cid = CLOCK_REALTIME;],pac_cv_posix_clock_realtime=yes,
pac_cv_posix_clock_realtime=no)])
    if test "$pac_cv_posix_clock_realtime" = "no" ; then
         AC_MSG_ERROR([POSIX timer requires definitions in time.h])
    fi
    ;;

    gettimeofday)
    MPID_TIMER_TYPE="struct timeval"
    AC_CHECK_FUNC(gettimeofday,,[
         AC_MSG_ERROR([Requested timer gettimeofday is not available])
])
    ;;

    linux86_cycle)
    MPID_TIMER_TYPE="long long"
    ;;
    linuxalpha_cycle)
    MPID_TIMER_TYPE="long"
    ;;
    *)
    AC_MSG_ERROR([Invalid timer type $timer_type])
    ;;
esac
dnl Convert timer type to upper case
changequote(<<,>>)
timer_type=`echo $timer_type | tr '[a-z]' '[A-Z]'`
changequote([,])
MPICH_TIMER_KIND=USE_$timer_type
AC_SUBST(MPICH_TIMER_KIND)
dnl
dnl Setup other replaceable values
dnl MPILIBNAME is exported from the calling environment
dnl
dnl Choose the timer type (e.g., long, double, array).  long is the default
AC_SUBST(MPILIBNAME)
AC_SUBST(MPID_TIMER_TYPE)
dnl Generate the Makefile from Makefile.in
AC_OUTPUT_COMMANDS(cp mpichtimer.h ../../include)
AC_OUTPUT(Makefile mpichtimer.h)
