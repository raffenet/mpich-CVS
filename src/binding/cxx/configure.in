AC_INIT(initcxx.cpp)
AC_CONFIG_HEADER(mpicxxconf.h)
dnl We need install.sh, config.guess, etc. for the code that
dnl finds the Fortran libraries
AC_CONFIG_AUX_DIR(../../../confdb)

dnl [--enable-coverage - Turn on coverage analysis using g++ and gcov],,
dnl gcov Aborts on our files!
AC_ARG_ENABLE(coverage,
[--enable-coverage - Turn on coverage analysis],,
enable_coverage=no)

# First check that we have a clean build if we are doing a VPATH build
# Test for derived files as well and config.status to detect "dirty" 
# source directory in a VPATH build
PAC_VPATH_CHECK(mpicxx mpicxx.h mpicxx.conf cov2html)

if test -z "$MPILIBNAME" ; then MPILIBNAME=mpich ; fi
AC_SUBST(MPILIBNAME)
saveCXXFLAGS=$CXXFLAGS
AC_PROG_CXX
# Misfeature in autoconf.  When using gcc, PROG_CXX insists on setting 
# CXXFLAGS to -g -O2 if CXXFLAGS is not set.  This may be appropriate for
# many tools built with configure and gcc, but not always.  In particular,
# there seems to be no way to get gcc to use no extra flags if that is desired.
if test -z "$saveCXXFLAGS" -a -n "$CXXFLAGS" ; then
    # restore CXXFLAGS
    # Note: This may not be correct if PROG_CXX decided to add other 
    # flags to CXXFLAGS to enforce some behavior (such as ANSI/ISO C++),
    # But we haven't seen that in practice.  It would be better
    # if the CXXFLAGS were decomposed into flags-that-change-the-language
    # that the compiler accepts from optimizations
    CXXFLAGS=$saveCXXFLAGS
fi
AC_PATH_PROG(AR,ar)
# Note that we set RANLIB to true if we don't find it (some systems neither
# need it nor provide it)
AC_CHECK_PROGS(RANLIB,ranlib,true)
AC_PROG_INSTALL
PAC_PROG_MKDIR_P
AC_LANG_CPLUSPLUS
dnl     checks for libraries
dnl     checks for header files
dnl     checks for typedefs
dnl     checks for structures
dnl     checks for compiler characteristics
AC_CXX_EXCEPTIONS
AC_CXX_BOOL
AC_CXX_NAMESPACES
if test "$ac_cv_cxx_namespaces" != "yes" ; then
    AC_MSG_ERROR([Namespaces are required for the MPI C++ interface])
fi
HAVE_CXX_EXCEPTIONS=0
AC_SUBST(HAVE_CXX_EXCEPTIONS)
if test "$ac_cv_cxx_exceptions" = "yes" ; then
    HAVE_CXX_EXCEPTIONS=1
fi

dnl Check for support of enable-coverage.  Put this near the end of the tests
dnl because the coverage options may affect the other tests.
if test "$enable_coverage" = "yes" ; then
    if test "$ac_cv_prog_gxx" = "yes" ; then
        # gcov aborts on the data create by our files!  Instead, we
	# use our own, very simple (and just barely adequate) tool
        # CXXFLAGS="$CXXFLAGS -ftest-coverage -fprofile-arcs"
        # To get coverage data, we need to include these options
	# in the mpicxx script
        # MPI_CXXFLAGS="$MPI_CXXFLAGS -ftest-coverage -fprofile-arcs"
        #CXXFLAGS="$CXXFLAGS -DUSE_COVERAGE_SIMPLE"
        #MPI_CXXFLAGS="$MPI_CXXFLAGS -DUSE_COVERAGE_SIMPLE"
	# We make these defines here rather than with the ac_define
	# so that the mpicxx.h file does not depend on any external 
	# definitions.
	DEFINE_FOR_COVERAGE="#define USE_COVERAGE 1"
	DEFINE_FOR_COVERAGE_KIND="#define USE_COVERAGE_SIMPLE"
	AC_PATH_PROG(PERL,perl)
    else
        AC_MSG_WARN([--enable-coverage only supported for G++])
    fi
fi
AC_SUBST(DEFINE_FOR_COVERAGE)
AC_SUBST(DEFINE_FOR_COVERAGE_KIND)
AC_SUBST(COVERAGE_SRC)
AC_SUBST(COVERAGE_OBJ)
builddir=`pwd`
AC_SUBST(builddir)

# Here are the commands to substitute the compilers to be used to create
# shared libraries.  The choices for the first two come down from the
# top-level configure.  CXX_SHL must be determined in this configure
if test -z "$ENABLE_SHLIB" ; then
    ENABLE_SHLIB=none
fi
AC_SUBST(CC_SHL)
AC_SUBST(ENABLE_SHLIB)
AC_SUBST(CXX_SHL)
AC_SUBST(CXX_LINKPATH_SHL)
if test "$ENABLE_SHLIB" = "gcc" ; then
   # Assume that the compiler is g++ if gcc style shared libraries chosen
   CXX_SHL="$CXX -shared -fpic"
   CXX_LINKPATH_SHL="-Wl,-rpath -Wl,"
fi
AC_SUBST(LIBTOOL)
dnl     checks for library functions
dnl     checks for system services

AC_SUBST(MPI_CXXFLAGS)
if test -z "$MPI_LDFLAGS" ; then
    # Pickup any flags from LDFLAGS.
    MPI_LDFLAGS="$LDFLAGS"
fi
AC_SUBST(MPI_LDFLAGS)

if test -z "$top_build_dir" ; then
    top_build_dir=`cd ../../.. ; pwd`
fi
if test -z "$includebuild_dir" ; then
    includebuild_dir=$top_build_dir/src/include
fi
if test -z "$libbuild_dir" ; then
    libbuild_dir=$top_build_dir/lib
fi
dnl
dnl Dependency handling
AC_SUBST(MAKE_DEPEND_C)
dnl
dnl Weak-symbol handling (imported from upper-level configure)
AC_SUBST(NEEDSPLIB)
dnl
dnl Copy mpicxx and the header files to the local bin and include
dnl directories to simplify some testing.
eval evalsrcdir=$srcdir
AC_OUTPUT_COMMANDS([chmod a+x mpicxx cov2html ;
   if test ! -d ../../../bin  ; then mkdir ../../../bin ; fi 
   sed -e 's%includedir=.*%includedir='$includebuild_dir% \
       -e 's%libdir=.*%libdir='$libbuild_dir% mpicxx > ../../../bin/mpicxx ;
   chmod a+x ../../../bin/mpicxx 
   cp mpicxx.h ../../../src/include/mpicxx.h 
   if test "$enable_coverage" = "yes" -a -s mpicxxcov.h ; then
      cp $evalsrcdir/mpicxxcov.h ../../../src/include/mpicxxcov.h
      cp $evalsrcdir/mpicovsimple.h ../../../src/include/mpicovsimple.h
   fi
],
includebuild_dir=$includebuild_dir
libbuild_dir=$libbuild_dir
enable_coverage=$enable_coverage
evalsrcdir=$evalsrcdir
)
AC_OUTPUT(Makefile mpicxx mpicxx.h mpicxx.conf cov2html) 
