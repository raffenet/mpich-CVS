AC_INIT(Makefile.in)
dnl
dnl A C_PRE REQ(2.13) dnl needed for SHELL, added in 2.13
dnl If you include the PREREQ 2.13, the cygwin configure chooses EXACTLY
dnl the 2.13 autoconf.  We're comfortable with later versions as well as
dnl 2.13, and since the *command line arguments to autoconf changed*,
dnl we need to use a consistent choice of version.
dnl We need install.sh, config.guess, etc. for the code that
dnl finds the Fortran libraries
AC_CONFIG_AUX_DIR(../../../confdb)
dnl
PAC_ARG_CACHING

AC_ARG_ENABLE(strict,
[--enable-strict  - Turn on strict compilation testing when using gcc],
COPTIONS="${COPTIONS} -Wall -O -Wstrict-prototypes -Wmissing-prototypes -DGCC_WALL")

AC_ARG_ENABLE(echo,
[--enable-echo    - Turn on echoing from within the configure script],
set -x)

AC_ARG_WITH(cross,
[--with-cross=file - Specify the values of variables that configure cannot
determine in a cross-compilation environment],,with_cross=no)

AC_ARG_WITH(mpichconfig,
[--with-mpichconfig=file - Use file for the MPICH configuration.
              Normally, this file is mpichlib.conf, but other files
              may be used.],
[if test -z "$withval" -o "X$withval" = "Xyes" ; then 
    mpichconfig_file=../../util/mpichlib.conf
else 
    mpichconfig_file=$withval
fi
],mpichconfig_file="")

AC_ARG_WITH(subname,
[--with-subname=name - Use this name for forming the names of the 
              directories to install the mpif.h include file and 
              libraries, as well as the mpif77-name.conf file.  This
              should be used to support multiple Fortran compilers with
              a single MPICH build.  It must be used in conjunction with
              --with-mpichconfig],
subname=$withval,subname="")

dnl
dnl First check that we have a clean build if we are doing a VPATH build
if test "`cd $srcdir && pwd`" != "`pwd`" && test -f $srcdir/config.status ; then
    AC_MSG_ERROR([You cannot do a VPATH build if the source directory has been
    configured.  Run "make distclean" in $srcdir first.])
fi

dnl
dnl Get the "master" top srcdir if we are a subdir configure
if test -z "$top_srcdir" ; then
   use_top_srcdir=$srcdir   
else
   use_top_srcdir=$top_srcdir
fi
if test -z "$master_top_srcdir" ; then 
    master_top_srcdir=$use_top_srcdir
fi
AC_SUBST(master_top_srcdir)
export master_top_srcdir

AC_PROG_INSTALL
PAC_PROG_MKDIR_P

# Find a Fortran 90 compiler.  Sets F90
PAC_PROG_F90

if test -z "$F90" ; then
   AC_MSG_ERROR([Could not find a usable F90 compiler])
fi

# Find the extension that this compiler uses for modules.
# Sets F90MODEXT (and adds it to the list substed)
# Sets F90MODINCFLAG (and adds it to the list substed)
PAC_F90_MODULE
#
# For now, assume that all f90 compilers accept -I for include directories
F90INC=-I

#
# Determine the extension for f90 files (it isn't always .f90)
PAC_F90_EXT
F90EXT=$pac_cv_f90_ext
AC_SUBST(F90EXT)
#
# Most systems allow the Fortran compiler to process .F and .F90 files
# using the C preprocessor.  However, some systems either do not
# allow this or have serious bugs (OSF Fortran compilers have a bug
# that generates an error message from cpp).  The following test
# checks to see if .F works, and if not, whether "cpp -P -C" can be used
rm -f conftest*
AC_MSG_CHECKING([whether Fortran 90 compiler processes .F90 files with C preprocessor])
cat >conftest.F90 <<EOF
        program main
#define ASIZE 10
        integer a(ASIZE)
        end
EOF
pac_cv_f90_accepts_F90=no
pac_F90compile='${F90} -c $F90FLAGS $CPPFLAGS conftest.F90 1>&AC_FD_CC'

if AC_TRY_EVAL(pac_F90compile) && test -s conftest.o ; then
   pac_cv_f90_accepts_F90=yes
else
    # Can we use cpp?
    pac_F90cpp='${CPP} -C -P $CPPFLAGS conftest.F90 >conftest.$pac_cv_f90_ext 2>&AC_FD_CC'
    if AC_TRY_EVAL(pac_F90cpp) && test -s conftest.$pac_cv_f90_ext ; then
        pac_fF90compile='${F90} -c $F90FLAGS $CPPFLAGS conftest.$pac_cv_f90_ext 1>&AC_FD_CC'
	if AC_TRY_EVAL(pac_fF90compile) && test -s conftest.o ; then
	    pac_cv_f90_accepts_F90="no, use cpp"
	fi
    fi
fi
rm -f conftest.*
AC_MSG_RESULT($pac_cv_f90_accepts_F90)
case "$pac_cv_f90_accepts_F90" in 
    yes)
    F90CPP=""
    ;;
    "no, use cpp")
    F90CPP="$CPP -C -P"
    ;;
    no) 
    F90CPP="false"
    ;;
esac
AC_SUBST(F90CPP)

#
# Determine the kind parameters for the MPI integer types
if test -z "$sizeof_mpi_offset" ; then
    AC_MSG_WARN([Size of MPI_Offset not specified; using 4])
    sizeof_mpi_offset=4
fi
PAC_PROG_F90_INT_KIND(mpi_offset_kind,$sizeof_mpi_offset,$CROSS_SIZEOF_MPI_OFFSET)

dnl Check for other Fortran 90 features, such as different include/use
dnl module directory and special flags.  Build modules if requested
AC_SUBST(F90_SUFFIX)
f90includedir='${includedir}'
f90libdir='${libdir}'
AC_SUBST(f90includedir)
AC_SUBST(f90libdir)
AC_SUBST(F90_LDFLAGS)
AC_SUBST(F90INC)
AC_SUBST(F90_MODINCFLAG)
AC_SUBST(F90MODINCSPEC)
F90INCFLAG=-I
AC_SUBST(F90INCFLAG)
AC_SUBST(F90FLAGS)
AC_SUBST(F90LINKER)
AC_SUBST(F90LIB_PATH)
if test -z "$F90_LIBDIR_LEADER" ; then 
    F90_LIBDIR_LEADER="-L"
fi
AC_SUBST(F90_LIBDIR_LEADER)
AC_SUBST(MPIVERSION)

#
# The following variables are used in mpif90.in and reflect the MPI
# implementation that is in use.
# 
AC_SUBST(MPILIBNAME)
# These last 2 sets of flags are used to pass flags needed only to compile
# and use MPI programs, not to build the MPI library itself.
AC_SUBST(MPI_F90FLAGS)
AC_SUBST(MPI_LDFLAGS)
if test -z "$top_build_dir" ; then
    top_build_dir=`cd ../../.. ; pwd`
fi
if test -z "$includebuild_dir" ; then
    includebuild_dir=$top_build_dir/src/include
fi
if test -z "$libbuild_dir" ; then
    libbuild_dir=$top_build_dir/lib
fi

AC_OUTPUT_COMMANDS([if test "$enable_echo" ; then set -x ; fi ;
   chmod a+x mpif90 ;
   if test ! -d ../../../bin  ; then mkdir ../../../bin ; fi 
   sed -e 's%includedir=.*%includedir='$includebuild_dir% \
       -e 's%libdir=.*%libdir='$libbuild_dir% mpif90 > ../../../bin/mpif90 ;
   chmod a+x ../../../bin/mpif90 ],
includebuild_dir=$includebuild_dir
libbuild_dir=$libbuild_dir
)

AC_OUTPUT(Makefile mpif90.conf mpif90)

