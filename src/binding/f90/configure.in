AC_INIT(Makefile.in)
dnl
dnl A C_PRE REQ(2.13) dnl needed for SHELL, added in 2.13
dnl If you include the PREREQ 2.13, the cygwin configure chooses EXACTLY
dnl the 2.13 autoconf.  We're comfortable with later versions as well as
dnl 2.13, and since the *command line arguments to autoconf changed*,
dnl we need to use a consistent choice of version.
dnl We need install.sh, config.guess, etc. for the code that
dnl finds the Fortran libraries
AC_CONFIG_AUX_DIR(../../../confdb)
dnl
PAC_ARG_CACHING

AC_ARG_ENABLE(strict,
[--enable-strict  - Turn on strict compilation testing when using gcc],,
enable_strict=no)

AC_ARG_ENABLE(weak-symbols,
[--enable-weak-symbols - Use weak symbols to provide the profiling interface
    (default)],
enable_weak=$enableval,enable_weak="yes")

AC_ARG_ENABLE(echo,
[--enable-echo    - Turn on echoing from within the configure script],
set -x)

AC_ARG_WITH(cross,
[--with-cross=file - Specify the values of variables that configure cannot
determine in a cross-compilation environment],,with_cross=no)

AC_ARG_WITH(mpichconfig,
[--with-mpichconfig=file - Use file for the MPICH configuration.
              Normally, this file is mpichlib.conf, but other files
              may be used.],
[if test -z "$withval" -o "X$withval" = "Xyes" ; then 
    mpichconfig_file=../../util/mpichlib.conf
else 
    mpichconfig_file=$withval
fi
],mpichconfig_file="")

AC_ARG_WITH(subname,
[--with-subname=name - Use this name for forming the names of the 
              directories to install the mpif.h include file and 
              libraries, as well as the mpif77-name.conf file.  This
              should be used to support multiple Fortran compilers with
              a single MPICH build.  It must be used in conjunction with
              --with-mpichconfig],
subname=$withval,subname="")

dnl
dnl First check that we have a clean build if we are doing a VPATH build
if test "`cd $srcdir && pwd`" != "`pwd`" && test -f $srcdir/config.status ; then
    AC_MSG_ERROR([You cannot do a VPATH build if the source directory has been
    configured.  Run "make distclean" in $srcdir first.])
fi

dnl
dnl Get the "master" top srcdir if we are a subdir configure
if test -z "$top_srcdir" ; then
   use_top_srcdir=$srcdir   
else
   use_top_srcdir=$top_srcdir
fi
if test -z "$master_top_srcdir" ; then 
    master_top_srcdir=$use_top_srcdir
fi
AC_SUBST(master_top_srcdir)
export master_top_srcdir
#
# Get the master builddir (which may be imported from above)
if test -z "$master_top_builddir" ; then
    master_top_builddir=`pwd`
fi
export master_top_builddir
AC_SUBST(master_top_builddir)

PAC_PROG_MAKE
AC_PATH_PROG(AR,ar)
# Note that we set RANLIB to true if we don't find it (some systems neither
# need it nor provide it)
AC_CHECK_PROGS(RANLIB,ranlib,true)
AC_PROG_INSTALL
PAC_PROG_MKDIR_P

# Get the C compiler (needed for type_create_f90_xxx functions)
PAC_PROG_CC
dnl Set CFLAGS for enable strict if necessary
PAC_CC_STRICT
AC_C_CONST
#
# Try for weak symbols for the profiling interface.
if test "$enable_weak" = "yes" ; then
    PAC_PROG_C_WEAK_SYMBOLS(AC_DEFINE(HAVE_WEAK_SYMBOLS,1,[Define if weak symbols supported]))
    # Check for the ability to support multiple weak symbols
    if test "$pac_cv_prog_c_weak_symbols" = "pragma weak" ; then
       PAC_PROG_C_MULTIPLE_WEAK_SYMBOLS(AC_DEFINE(HAVE_MULTIPLE_PRAGMA_WEAK,1,[Define if multiple weak symbols may be defined]))
    fi
fi
# These values are exported from the upper-layer configure.
AC_SUBST(PROFILE_DEF_MPI)
AC_SUBST(NO_WEAK_SYM)
AC_SUBST(NO_WEAK_SYM_TARGET)
AC_SUBST(NEEDSPLIB)
#

# Find a Fortran 90 compiler.  Sets F90
PAC_PROG_F90

if test -z "$F90" ; then
   AC_MSG_ERROR([Could not find a usable F90 compiler])
fi

# Find the extension that this compiler uses for modules.
# Sets F90MODEXT (and adds it to the list substed)
# Sets F90MODINCFLAG (and adds it to the list substed)
PAC_F90_MODULE
#
# For now, assume that all f90 compilers accept -I for include directories
F90INC=-I

#
# Determine the extension for f90 files (it isn't always .f90)
PAC_F90_EXT
F90EXT=$pac_cv_f90_ext
AC_SUBST(F90EXT)
#
# Most systems allow the Fortran compiler to process .F and .F90 files
# using the C preprocessor.  However, some systems either do not
# allow this or have serious bugs (OSF Fortran compilers have a bug
# that generates an error message from cpp).  The following test
# checks to see if .F works, and if not, whether "cpp -P -C" can be used
rm -f conftest*
AC_MSG_CHECKING([whether Fortran 90 compiler processes .F90 files with C preprocessor])
cat >conftest.F90 <<EOF
        program main
#define ASIZE 10
        integer a(ASIZE)
        end
EOF
pac_cv_f90_accepts_F90=no
pac_F90compile='${F90} -c $F90FLAGS $CPPFLAGS conftest.F90 1>&AC_FD_CC'

if AC_TRY_EVAL(pac_F90compile) && test -s conftest.o ; then
   pac_cv_f90_accepts_F90=yes
else
    # Can we use cpp?
    pac_F90cpp='${CPP} -C -P $CPPFLAGS conftest.F90 >conftest.$pac_cv_f90_ext 2>&AC_FD_CC'
    if AC_TRY_EVAL(pac_F90cpp) && test -s conftest.$pac_cv_f90_ext ; then
        pac_fF90compile='${F90} -c $F90FLAGS $CPPFLAGS conftest.$pac_cv_f90_ext 1>&AC_FD_CC'
	if AC_TRY_EVAL(pac_fF90compile) && test -s conftest.o ; then
	    pac_cv_f90_accepts_F90="no, use cpp"
	fi
    fi
fi
rm -f conftest.*
AC_MSG_RESULT($pac_cv_f90_accepts_F90)
case "$pac_cv_f90_accepts_F90" in 
    yes)
    F90CPP=""
    ;;
    "no, use cpp")
    F90CPP="$CPP -C -P"
    ;;
    no) 
    F90CPP="false"
    ;;
esac
AC_SUBST(F90CPP)

#
# Determine the kind parameters for the MPI integer types
if test -z "$sizeof_mpi_offset" ; then
    AC_MSG_WARN([Size of MPI_Offset not specified; using 4])
    sizeof_mpi_offset=4
fi
PAC_PROG_F90_INT_KIND(mpi_offset_kind,$sizeof_mpi_offset,$CROSS_SIZEOF_MPI_OFFSET)

#
# Get the sizes of the standard types.  These are used 
# to implement MPI_SIZEOF, among other things.
#
# Set likely defaults
CROSS_F90_SIZEOF_INTEGER=${CROSS_F90_SIZEOF_INTEGER:-4}
CROSS_F90_SIZEOF_REAL=${CROSS_F90_SIZEOF_REAL:-4}
CROSS_F90_SIZEOF_CHARACTER=${CROSS_F90_SIZEOF_CHARACTER:-1}
CROSS_F90_SIZEOF_DOUBLE_PRECISION=${CROSS_F90_SIZEOF_DOUBLE_PRECISION:-4}

PAC_PROG_F90_CHECK_SIZEOF(INTEGER,$CROSS_F90_SIZEOF_INTEGER)
PAC_PROG_F90_CHECK_SIZEOF(REAL,$CROSS_F90_SIZEOF_REAL)
PAC_PROG_F90_CHECK_SIZEOF(CHARACTER,$CROSS_F90_SIZEOF_CHARACTER)
#
# We check the size of double precision even though it should be
# twice the size of a real because some environments allow the user
# to set real and double precision to the same size.  This is no longer
# Fortran, but this check helps make us more robust
PAC_PROG_F90_CHECK_SIZEOF(DOUBLE PRECISION,$CROSS_F90_SIZEOF_DOUBLE_PRECISION)

# We also want to substitute for these values, not just define them
SIZEOF_F90_INTEGER=$pac_cv_f90_sizeof_INTEGER
SIZEOF_F90_REAL=$pac_cv_f90_sizeof_REAL
SIZEOF_F90_CHARACTER=$pac_cv_f90_sizeof_CHARACTER
SIZEOF_F90_DOUBLE_PRECISION=$pac_cv_f90_sizeof_DOUBLE_PRECISION
AC_SUBST(SIZEOF_F90_INTEGER)
AC_SUBST(SIZEOF_F90_REAL)
AC_SUBST(SIZEOF_F90_CHARACTER)
AC_SUBST(SIZEOF_F90_DOUBLE_PRECISION)

#
# Determine the precision and range of the standard Fortran types.  This
# isn't quite enough for a full implementation of the Type_create_f90_xxx
# routines, but will handle most programs.  We can extend this by trying to
# find (through selected_real_kind and selected_int_kind) types with larger or
# smaller precisions and/or ranges than the basic types.
if test -z "$CROSS_F90_REAL_MODEL" ; then
    AC_MSG_CHECKING([for precision and range of reals])
    rm -f conftest*
    cat > conftest.$ac_f90ext <<EOF
       program main
       real a
       print *, precision(a), ",", range(a)
       end
EOF
    if AC_TRY_EVAL(ac_f90link) && test -s conftest${ac_exeext} ; then
        ./conftest > conftest.out 2>&AC_FD_CC
        if test -s conftest.out ; then
            F90_REAL_MODEL=`cat conftest.out | sed -e 's/  */ /g'`
	    AC_MSG_RESULT($F90_REAL_MODEL)
        else
            AC_MSG_WARN([No output from test program])
        fi
    else
        AC_MSG_WARN([Could not build program to determine precision and range of reals])
    fi
    rm -f conftest*
else
    F90_REAL_MODEL=$CROSS_F90_REAL_MODEL
fi
AC_SUBST(F90_REAL_MODEL)
#
if test -z "$CROSS_F90_DOUBLE_MODEL" ; then
    AC_MSG_CHECKING([for precision and range of double precision])
    rm -f conftest*
    cat > conftest.$ac_f90ext <<EOF
       program main
       double precision a
       print *, precision(a), ",", range(a)
       end
EOF
    if AC_TRY_EVAL(ac_f90link) && test -s conftest${ac_exeext} ; then
        ./conftest > conftest.out 2>&AC_FD_CC
        if test -s conftest.out ; then
            F90_DOUBLE_MODEL=`cat conftest.out | sed -e 's/  */ /g'`
	    AC_MSG_RESULT($F90_DOUBLE_MODEL)
        else
            AC_MSG_WARN([No output from test program])
        fi
    else
        AC_MSG_WARN([Could not build program to determine precision and range of double precision data])
    fi
    rm -f conftest*
else
    F90_DOUBLE_MODEL=$CROSS_F90_DOUBLE_MODEL
fi
AC_SUBST(F90_DOUBLE_MODEL)
#
if test -z "$CROSS_F90_INTEGER_MODEL" ; then
    AC_MSG_CHECKING([for range of integers])
    rm -f conftest*
    cat > conftest.$ac_f90ext <<EOF
       program main
       integer a
       print *, range(a)
       end
EOF
    if AC_TRY_EVAL(ac_f90link) && test -s conftest${ac_exeext} ; then
        ./conftest > conftest.out 2>&AC_FD_CC
        if test -s conftest.out ; then
            F90_INTEGER_MODEL=`cat conftest.out | sed -e 's/  */ /g'`
	    AC_MSG_RESULT($F90_INTEGER_MODEL)
        else
            AC_MSG_WARN([No output from test program])
        fi
    else
        AC_MSG_WARN([Could not build program to determine range of integer])
    fi
    rm -f conftest*
else
    F90_INTEGER_MODEL=$CROSS_F90_INTEGER_MODEL
fi
AC_SUBST(F90_INTEGER_MODEL)
#
# Try to find the available integer kinds by using selected_int_kind
# This produces a table of range,kind
if test -z "$CROSS_F90_INTEGER_MODEL_MAP" ; then
    AC_MSG_CHECKING([for available integer kinds and ranges])
    rm -f conftest.*
    # First, create a C routine to provide the size in bytes 
    # of a variable
    cat <<EOF > conftestc.c
#include <stdio.h>
#include "confdefs.h"
#ifdef F77_NAME_UPPER
#define cisize_ CISIZE
#define isize_ ISIZE
#elif defined(F77_NAME_LOWER) || defined(F77_NAME_MIXED)
#define cisize_ cisize
#define isize_ isize
#endif
int cisize_(char *,char*);
int cisize_(char *i1p, char *i2p)
{ 
    int isize_val=0;
    isize_val = (int)(i2p - i1p);
    return isize_val;
}
EOF
    pac_tmp_compile='$CC -c $CFLAGS $CPPFLAGS conftestc.c >&5'

    # Now, create the program to find the kinds and sizes
    cat >conftest.$ac_f90ext <<EOF
      program main
      integer r, lastkind
      lastkind=selected_int_kind(1)
      do r=2,30
           k = selected_int_kind(r)
           if (k .ne. lastkind) then
	        sz = getintsize( lastkind )
                print *, r-1,",",lastkind,",",sz,","    
                lastkind = k
           endif
           if (k .le. 0) then
               exit
           endif
      enddo
      end 
      integer function getintsize( k )
      integer (kind=k) a(2)
      getintsize = cisize( a(1), a(2) )
      return
      end
EOF
    if AC_TRY_EVAL(ac_f90link) && test -s conftest${ac_exeext} ; then
        ./conftest > conftest.out 2>&AC_FD_CC
        if test -s conftest.out ; then
            F90_INTEGER_MODEL_MAP=`cat conftest.out | tr '\012' ' '  | \
				       sed -e 's/  */ /g'`
	    AC_MSG_RESULT($F90_INTEGER_MODEL_MAP)
        else
            AC_MSG_WARN([No output from test program])
        fi
    else
        AC_MSG_WARN([Could not build program to determine available integer kinds and ranges])
    fi
    rm -f conftest*
else
    F90_INTEGER_MODEL_MAP="$CROSS_F90_INTEGER_MODEL_MAP"
fi
AC_SUBST(F90_INTEGER_MODEL_MAP)    


dnl Check for other Fortran 90 features, such as different include/use
dnl module directory and special flags.  Build modules if requested

AC_SUBST(F90_SUFFIX)
f90includedir='${includedir}'
f90libdir='${libdir}'
AC_SUBST(f90includedir)
AC_SUBST(f90libdir)
AC_SUBST(F90_LDFLAGS)
AC_SUBST(F90INC)
AC_SUBST(F90_MODINCFLAG)
AC_SUBST(F90MODINCSPEC)
F90INCFLAG=-I
AC_SUBST(F90INCFLAG)
AC_SUBST(F90FLAGS)
AC_SUBST(F90LINKER)
AC_SUBST(F90LIB_PATH)
if test -z "$F90_LIBDIR_LEADER" ; then 
    F90_LIBDIR_LEADER="-L"
fi
AC_SUBST(F90_LIBDIR_LEADER)
AC_SUBST(MPIVERSION)

#
# The following variables are used in mpif90.in and reflect the MPI
# implementation that is in use.
# NEEDSPLIB is imported from the upper-level configure
AC_SUBST(NEEDSPLIB)
# 
AC_SUBST(MPILIBNAME)
# Here are the commands to substitute the compilers to be used to create
# shared libraries.  The choices for the first two come down from the
# top-level configure.  FC_SHL must be determined in this configure
AC_SUBST(CC_SHL)
AC_SUBST(ENABLE_SHLIB)
dnl AC_SUBST(FC_SHL)
dnl AC_SUBST(FC_LINKPATH_SHL)
dnl if test "$ENABLE_SHLIB" = "gcc" ; then
dnl    # Assume that the compiler is g77 if gcc style shared libraries chosen
dnl    FC_SHL="$FC -shared -fpic"
dnl    FC_LINKPATH_SHL="-Wl,-rpath -Wl,"
dnl fi
AC_SUBST(LIBTOOL)

# These last 2 sets of flags are used to pass flags needed only to compile
# and use MPI programs, not to build the MPI library itself.
AC_SUBST(MPI_F90FLAGS)
AC_SUBST(MPI_LDFLAGS)
if test -z "$top_build_dir" ; then
    top_build_dir=`cd ../../.. ; pwd`
fi
if test -z "$includebuild_dir" ; then
    includebuild_dir=$top_build_dir/src/include
fi
if test -z "$libbuild_dir" ; then
    libbuild_dir=$top_build_dir/lib
fi

AC_OUTPUT_COMMANDS([if test "$enable_echo" ; then set -x ; fi ;
   chmod a+x mpif90 ;
   if test ! -d ../../../bin  ; then mkdir ../../../bin ; fi 
   sed -e 's%includedir=.*%includedir='$includebuild_dir% \
       -e 's%libdir=.*%libdir='$libbuild_dir% mpif90 > ../../../bin/mpif90 ;
   chmod a+x ../../../bin/mpif90 ],
includebuild_dir=$includebuild_dir
libbuild_dir=$libbuild_dir
)

AC_OUTPUT(Makefile mpif90.conf mpif90 mpif90conf.h mpi_sizeofs.f90)
