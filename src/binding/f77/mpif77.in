#! /bin/sh
#
# mpif77
# Simple script to compile and/or link MPI programs.
# This script knows the default flags and libraries, and can handle
# alternative C compilers and the associated flags and libraries.
# The important terms are:
#    includedir, libdir - Directories containing an *installed* mpich2
#    prefix, execprefix - Often used to define includedir and libdir
#    FC                 - Fortran 77 compiler
#    MPI_FFLAGS         - Any special flags needed to compile 
#    MPI_LDFLAGS        - Any special flags needed to link
#    MPILIBNAME         - Name of the MPI library
#    MPI_OTHERLIBS      - Other libraries needed in order to link 
#    
# We assume that (a) the C compiler can both compile and link programs
# We use MPI_xxx so that the user may continue to use CFLAGS, LIBS, etc
# to modify the behavior of the compiler and linker.
#
# Handling of command-line options:
#   This is a little tricky because some options may contain blanks.
#
# Special issues with shared libraries - todo
#
#
# Directory locations: Fixed for any MPI implementation
prefix=@prefix@
exec_prefix=@exec_prefix@
sysconfdir=@sysconfdir@
includedir=@includedir@
libdir=@libdir@
#
# Default settings for compiler, flags, and libraries
FC="@FC@"
F77CPP="@F77CPP@"
MPI_FFLAGS="@MPI_FFLAGS@"
MPI_LDFLAGS="@MPI_LDFLAGS@"
MPILIBNAME="@MPILIBNAME@"
MPI_OTHERLIBS="@LIBS@"
#
mpilibs=-l$MPILIBNAME
#
# Concatenate the user flags with the ones needed by MPI
FFLAGS="$FFLAGS $MPI_FFLAGS"
LDFLAGS="$LDFLAGS $MPI_LDFLAGS"
#
# Look through the arguments for arguments that indicate compile only.
# If these are *not* found, add the library options
linking=yes
for arg in "$@" ; do
    case $arg in 
    -c|-S|-E|-M)
    linking=no
    ;;
    esac
done
#
# A temporary statement to invoke the compiler
# Place the -L before any args incase there are any mpi libraries in there.
# Eventually, we'll want to move this after any non-MPI implementation 
# libraries
# If F77CPP is not empty, then we need to do the following:
#    If any input files have the .F or .F90 extension, then    
#        If F77CPP = false, then
#            generate an error message and exit
#        Use F77CPP to convert the file from .F to .f, using 
#            $TMPDIR/f$$-$count.f as the output file name
#            Replace the input file with this name in the args
# This is needed only for very broken systems
#     
rmfiles=""
if [ -n "$F77CPP" ] ; then
    count=1
    allargs=""
    TMPDIR=${TMPDIR:-/tmp}
    # FIXME: does not handle spaces or misbalanced quotes
    for arg in "$@" ; do
        case $arg in
	    -*)
	    allargs="$allargs $arg"
	    ;;
	    *.F|*.F90)
	    if [ "$F77CPP" = "false" ] ; then
	        echo "This Fortran compiler does not accept .F or .F90 files"
		exit 1
	    fi
	    bfile=`basename $arg .F`
	    tmpfile=$TMPDIR/f$$-$bfile.f
	    if $F77CPP $arg > $tmpfile ; then
	        # Add this file to the commandline list
		count=`expr $count + 1`
		allargs="$allargs $tmpfile"
		rmfiles="$rmfiles $tmpfile"
	    else
		echo "Aborting compilation"
		exit 1
	    fi
	    ;;
	    *)
	    allargs="$allargs $arg"
	    ;;
	esac
    done      
    # Reset the parameter list.  The "--" is a fence that allows the
    # arguments to be reset from allargs, even for those arguments
    # that start with a dash.
    set -- $allargs 
fi
#
#
if [ "$linking" = yes ] ; then
    $FC $FFLAGS $LDFLAGS -I$includedir -L$libdir "$@" $mpilibs $MPI_OTHERLIBS
    rc=$?
else
    $FC $FFLAGS -I$includedir "$@" 
    rc=$?
fi
if [ -n "$rmfiles" ] ; then
    for file in $rmfiles ; do
        objfile=`basename $file .f`
	if [ -s "${objfile}.o" ] ; then
	    # Rename 
	    destfile=`echo $objfile | sed -e "s/.*$$-//"`
	    mv -f ${objfile}.o ${destfile}.o
	fi
        rm -f $file
    done
    rm -f $rmfiles
fi
exit $rc

