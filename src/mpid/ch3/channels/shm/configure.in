AC_INIT(configure.in)

dnl
dnl Set the directory that contains support scripts such as install-sh and
dnl config.guess
dnl
AC_CONFIG_AUX_DIR(../../../../../confdb)

dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
dnl
AC_CONFIG_HEADER(include/mpidi_ch3i_shm_conf.h)

echo "RUNNING CONFIGURE FOR THE SHARED MEMORY CHANNEL"

dnl
dnl First check that we have a clean build if we are doing a VPATH build
if test "`cd $srcdir && pwd`" != "`pwd`" && test -f $srcdir/config.status ; then
    AC_MSG_ERROR([You cannot do a VPATH build if the source directory has been
    configured.  Run "make distclean" in $srcdir first.])
fi

PAC_PROG_MAKE

AC_DEFINE(USE_PROCESS_LOCKS,,[Define to use process locks])
dnl AC_DEFINE(HAVE_SHARED_PROCESS_READ,,[Define to use /proc directory for shared process reads])

AC_CHECK_FUNCS( sysconf shmget shmat shmdt shmctl )

AC_CHECK_HEADERS(				\
    assert.h					\
    errno.h					\
    fcntl.h					\
    stdlib.h					\
    sys/param.h					\
    sys/types.h					\
    unistd.h    \
    pthread.h   \
    sys/ipc.h sys/shm.h sys/param.h \
    sys/socket.h netinet/in.h \
    fcntl.h \
)

AC_MSG_CHECKING([for x86 mfence instruction])
AC_TRY_RUN([
int main(int argc, char *argv[])
{
    __asm__ __volatile__  ( ".byte 0x0f, 0xae, 0xf0" ::: "memory" );
    exit(0);
}
],
AC_MSG_RESULT(yes); lac_cv_have_gcc_asm_and_x86_mfence=yes,
AC_MSG_RESULT(no); lac_cv_have_gcc_asm_and_x86_mfence=no,
AC_MSG_RESULT(not checking when cross compiling), lac_cv_have_gcc_asm_and_x86_mfence=no)
if test "$lac_cv_have_gcc_asm_and_x86_mfence" = "yes" ; then
    AC_DEFINE(HAVE_GCC_ASM_AND_X86_MFENCE, 1, [Define if using gcc on a x86 system with the mfence instruction])
fi

AC_MSG_CHECKING([for x86 sfence instruction])
AC_TRY_RUN([
int main(int argc, char *argv[])
{
    __asm__ __volatile__  ( ".byte 0x0f, 0xae, 0xf8" ::: "memory" );
    exit(0);
}
],
AC_MSG_RESULT(yes); lac_cv_have_gcc_asm_and_x86_sfence=yes,
AC_MSG_RESULT(no); lac_cv_have_gcc_asm_and_x86_sfence=no,
AC_MSG_RESULT(not checking when cross compiling), lac_cv_have_gcc_asm_and_x86_sfence=no)
if test "$lac_cv_have_gcc_asm_and_x86_sfence" = "yes" ; then
    AC_DEFINE(HAVE_GCC_ASM_AND_X86_SFENCE, 1, [Define if using gcc on a x86 system with the sfence instruction])
fi

AC_MSG_CHECKING([for x86 lfence instruction])
AC_TRY_RUN([
int main(int argc, char *argv[])
{
    __asm__ __volatile__  ( ".byte 0x0f, 0xae, 0xe8" ::: "memory" );
    exit(0);
}
],
AC_MSG_RESULT(yes); lac_cv_have_gcc_asm_and_x86_lfence=yes,
AC_MSG_RESULT(no); lac_cv_have_gcc_asm_and_x86_lfence=no,
AC_MSG_RESULT(not checking when cross compiling), lac_cv_have_gcc_asm_and_x86_lfence=no)
if test "$lac_cv_have_gcc_asm_and_x86_lfence" = "yes" ; then
    AC_DEFINE(HAVE_GCC_ASM_AND_X86_LFENCE, 1, [Define if using gcc on a x86 system with the lfence instruction])
fi

AC_SUBST(device_name)
AC_SUBST(channel_name)

if test -z "$ENABLE_SHLIB" ; then
    CC_SHL="$CC"
    ENABLE_SHLIB=none
fi

AC_SUBST(CC_SHL)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(MPILIBNAME)
AC_SUBST(CC)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(CC_SHL)
AC_SUBST(C_LINK_SHL)
AC_SUBST(ENABLE_SHLIB)
AC_SUBST(master_top_srcdir)

AC_OUTPUT(Makefile src/Makefile localdefs)
