dnl
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
dnl
dnl
AC_INIT()
AC_CONFIG_HEADER(mpe_conf.h)
#
echo "Configuring MPE Profiling Libraries with $ac_configure_args"
dnl
dnl  Set top_srcdir_abs to be the ABSOLUTE path to the home directory of MPE
dnl  top_srcdir is in relative path.
if test "X$srcdir" != "X." -a -s $srcdir/include/mpe.h ; then
    top_srcdir_abs=$srcdir
else
    PAC_GETWD( top_srcdir_abs, include/mpe.h )
fi
AC_SUBST(top_srcdir_abs)

# Determine this package's name based on its directory name
changequote(,)dnl
tmpname="`echo $top_srcdir_abs | sed -e 's%\(.*\)/\([^/]*\)%\2%'`"
pkgname="`echo $tmpname | sed -e 'y%abcdefghijklmnopqrstuvwxyz/%ABCDEFGHIJKLMNOPQRSTUVWXYZ_%'`"
changequote([,])dnl
if test "x$pkgname" = "x" ; then
    pkgname="MPE-2"
fi

AC_ARG_ENABLE( echo,
[--enable-echo                      - Turn on strong echoing.
                                     The default is enable=no.],
set -x )

AC_ARG_ENABLE( softerror,
[--enable-softerror                 - Turn on soft error, i.e. instead of
                                     issuing MSG_ERROR, MSG_WARN + exit 0
                                     are used.  The default is enable=no.],
, enable_softerror=${mpe_enable_softerror:-no} )

VERSION=""
CC=${CC:-cc}
F77=${F77:-f77}
MPI_INC=""
MPI_LIBS=""
MPE_CFLAGS=""
MPE_FFLAGS=""
MPE_LIBNAME=""

dnl Read FROM_MPICHx variables from the environment
MAKE=${MAKE:-make}
FROM_MPICH=${FROM_MPICH:-no}
FROM_MPICH2=${FROM_MPICH2:-no}
FROM_LAM=${FROM_LAM:-no}


dnl Fixup for make
PAC_MAKE_IS_GNUMAKE
PAC_MAKE_IS_BSD44
PAC_MAKE_IS_OSF
PAC_MAKE_VPATH
AC_SUBST(MAKE)
 
dnl If we are relying on vpath and no vpath is set, then we must exit
if test ! -s include/mpe.h -a -z "$VPATH" ; then
    AC_MSG_ERROR( [No virtual MAKE path command found.
	You may need to set your make command
	The GNU make (sometimes available as gnumake) can be used.] )
fi

dnl CPRP is the version of cp that accepts -r and -p arguments.
MKDIR=mkdir
CPRP=cp
RM=rm
MV=mv
AC_SUBST(MKDIR)
AC_SUBST(CPRP)
AC_SUBST(RM)
AC_SUBST(MV)

AC_ARG_ENABLE( strict,
[--enable-strict                    - Turn on strict compilation testing
                                     when using gcc],
COPTIONS="${COPTIONS} -Wall -O -Wstrict-prototypes -Wmissing-prototypes -DGCC_WALL" )
dnl
AC_ARG_ENABLE( g,
[--enable-g                         - Turn on/off the compilation flag -g.
                                     The default is enable=no.] )
dnl
AC_ARG_ENABLE( f77,
[--enable-f77                       - Compile routines that require a Fortran
                                     compiler.  If configuring with MPICH, the
                                     configure in the top-level MPICH directory
                                     will choose the appropriate value for you.
                                     The default is enable=yes.], ,
enable_f77=yes )
if test "$enable_f77" = "yes" ; then
    MPE_BUILD_FORTRAN2C=yes
else
    MPE_BUILD_FORTRAN2C=no
fi

AC_ARG_ENABLE( mpich,
[--enable-mpich                     - Indicates if this MPE will be built as
                                     part of the MPICH build.  The default is
                                     enable=no.], ,
enable_mpich=no )

dnl  Translating FROM_MPICHx into MPI_IMPL.  So don't pass FROM_MPICHx down
dnl  to subpackages.  All subpackages will use MPI_IMPL instead.
dnl  BUILDING_MPI=yes disables the linkage test during building, i.e. make
dnl  BUILDING_MPI=yes when MPI_IMPL=MPICH or MPI_IMPL=MPICH2
dnl  MPE_KNOWN_MPI_IMPL can be tested by testing MPI_IMPL = MPICH, MPICH2
if test "$enable_mpich" = "yes" -o "$FROM_MPICH" = "yes" ; then
    AC_MSG_RESULT([This MPE build is part of the MPICH build])
    MPI_IMPL="MPICH"
dnl BUILDING_MPI=yes & MPE_KNOWN_MPI_IMPL=yes
elif test "$FROM_MPICH2" = yes ; then
    AC_MSG_RESULT([This MPE build is part of the MPICH2 build])
    MPI_IMPL="MPICH2"
    if test -d "$includebuild_dir" ; then
        MPICPPFLAGS="$MPICPPFLAGS -I$includebuild_dir"
    else
        MPICPPFLAGS="$MPICPPFLAGS -I$master_top_srcdir/src/include -I$master_top_builddir/src/include"
    fi
dnl BUILDING_MPI=yes & MPE_KNOWN_MPI_IMPL=yes
dnl elif test "$FROM_LAM" = yes ; then
dnl    AC_MSG_RESULT([This MPE build is part of the LAM build])
dnl    MPI_IMPL="LAM"
dnl BUILDING_MPI=yes & MPE_KNOWN_MPI_IMPL=yes
else
    AC_MSG_RESULT([User supplied MPI implmentation (Good Luck!)])
    MPI_IMPL="UserSupplied"
dnl BUILDING_MPI=no & MPE_KNOWN_MPI_IMPL=no
fi

AC_ARG_ENABLE( checkMPI,
[--enable-checkMPI                  - Turn on/off the linking test for the MPI
                                     include files, MPI libraries and MPI_CC
                                     compiler. The default is enable=yes.], ,
enable_checkMPI=yes )

AC_ARG_ENABLE( checkMPIwtime,
[--enable-checkMPIwtime             - Turn on/off the linking test for the
                                     MPI_Wtime(). The default is enable=no.], ,
enable_checkMPIwtime=no )

dnl
dnl  Set the MPE Libraries name
dnl
AC_ARG_WITH( mpelibname,
[--with-mpelibname=MPE_LIBNAME      - Set the MPE library name instead of the
                                     default 'mpe', e.g. if MPE_LIBNAME=mpe_new,
                                     then the libraries generated will be
                                     libmpe_new.a, liblmpe_new.a, libtmpe_new.a
                                     and libampe_new.a.],
MPE_LIBNAME="$withval" )

dnl
dnl  Set the Fortran Library Leading Character
dnl
AC_ARG_WITH( flib_path_leader,
[--with-flib_path_leader=FLIB_PATH_LEADER - Specify a Fortran library path
                                     for linking, default value is -L.],
FLIB_PATH_LEADER="$withval" )
if test -z "$FLIB_PATH_LEADER" ; then
    FLIB_PATH_LEADER=-L
fi

dnl
dnl  Get the user supplied CFLAGS and FFLAGS
dnl
AC_ARG_WITH( cflags,
[--with-cflags=MPE_CFLAGS           - supply extra MPE CFLAGS to the CC
                                     compiler],
MPE_CFLAGS="$withval" )

AC_ARG_WITH( fflags,
[--with-fflags=MPE_FFLAGS           - supply extra MPE FFLAGS to the Fortran
                                     compiler],
MPE_FFLAGS="$withval" )

#
# Append "-g" to MPE_CFLAGS and MPE_FFLAGS if enable_g=yes
if test "$enable_g" = "yes" ; then
    if test -z "`echo $MPE_CFLAGS | grep '\-g'`" ; then
        MPE_CFLAGS="-g $MPE_CFLAGS"
    fi
    if test -z "`echo $MPE_FFLAGS | grep '\-g'`" ; then
        MPE_FFLAGS="-g $MPE_FFLAGS"
    fi
fi

# Set the various build directories and export them as environmental variables.
#
# [mpe_]includebuild_dir is for all user header files
# [mpe_]libbuild_dir is for building the libraries in before they are installed.
# [mpe_]binbuild_dir is for the scripts/programs
# [mpe_]sbinbuild_dir is for all system admin stuffs
#
rootbuild_dir=`pwd`
for dir in include lib bin sbin src ; do
    dirname=${dir}build_dir
    eval dirvalue=\$"$dirname"
    eval $dirname=$rootbuild_dir/$dir
    mpe_dirname=mpe_$dirname
    eval $mpe_dirname=\$"$dirname"
    export $mpe_dirname
done

for dir in include lib bin sbin src ; do
    dirname=${dir}build_dir
    eval dirvalue=\$"$dirname"
    if test -n "$dirvalue" ; then
        if test ! -d $dirvalue ; then
            if mkdir -p $dirvalue ; then
                :
            else
                PAC_MSG_ERROR( $enable_softerror,
                               [Could not create directory $dirvalue] )
            fi
        fi
    fi
done

AC_SUBST(includebuild_dir)
AC_SUBST(libbuild_dir)
AC_SUBST(binbuild_dir)
AC_SUBST(sbinbuild_dir)


dnl
dnl  Unknown MPI implmentation, i.e. User defined MPI_LIBS and MPI_INC
dnl
AC_ARG_WITH( mpicc,
[--with-mpicc=MPI_CC                - C compiler used to compile MPI program
                                     and to create parallel executable,
                                     e.g. mpcc for IBM MPI.],
MPI_CC="$withval" )
 
AC_ARG_WITH( mpif77,
[--with-mpif77=MPI_F77              - F77 compiler used to compile MPI program
                                     and to create parallel executable,
                                     e.g. mpxlf for IBM MPI.],
MPI_F77="$withval" )
 
AC_ARG_WITH( mpiinc,
[--with-mpiinc=MPI_INC              - compiler's include flag with prefix
                                     -I used in the MPI implementation, usually
                                     it specifies where mpi.h and mpif.h are
                                     located, e.g. -I/pkgs/MPI/include.],
MPI_INC="$withval" )
 
AC_ARG_WITH( mpilibs,
[--with-mpilibs=MPI_LIBS            - compiler's full library flags with prefix
                                     -L to the library path and prefix -l to
                                     the name of the libraries used in the MPI
                                     implementation, usually specify where MPI
                                     libraries is located.
                                     e.g. -L/pkgs/MPI/lib -lpmpich -lmpich.],
MPI_LIBS="$withval" )

PAC_PROG_CC
dnl Check for broken handling of common symbols
dnl PAC_PROG_C_BROKEN_COMMON

dnl  MPI_CC is only use for MPI programs.  
dnl  CC should be the same compiler that is used within the MPI_CC
dnl  environment.  MPI_LIBS should also be set for linking MPI programs
AC_MSG_CHECKING( whether MPI_CC has been set )
if test -z "$MPI_CC" ; then
    MPI_CC="$CC $MPICPPFLAGS"
fi
AC_MSG_RESULT( $MPI_CC )

if test "$MPE_BUILD_FORTRAN2C" = "yes" ; then
    AC_PROG_F77
    if test "x$F77" = "x" ; then
        MPE_BUILD_FORTRAN2C=no
    fi
    AC_MSG_CHECKING( whether MPI_F77 has been set )
    if test -z "$MPI_F77" ; then
        # FIXME: Temporary for F77 accepting the same flags as CC for 
        # file includes
        MPI_F77="$F77 $MPICPPFLAGS"
    fi
    AC_MSG_RESULT( $MPI_F77 )
fi

# Determine the name of the various library being built
if test -z "$MPE_LIBNAME" ; then
    MPE_LIBNAME=mpe
fi



dnl
dnl  Check if MPI_INC, MPI_LIBS and MPI_CC provide a linkable environment
dnl  for a simple MPI program
dnl
if test "$MPI_IMPL" != "MPICH" -a "$MPI_IMPL" != "MPICH2" ; then
    if test "$enable_checkMPI" = "yes" ; then
        AC_MSG_CHECKING( [for the linkage of the supplied MPI C definitions] )
        PAC_MPI_LINK_CC_FUNC( $MPI_CC, [$CFLAGS $MPI_INC], $MPI_LIBS, , ,
                              [ mpe_link_ok=yes ], [ mpe_link_ok=no ] )
        if test "$mpe_link_ok" = "yes" ; then
            AC_MSG_RESULT(yes)
        else
            AC_MSG_RESULT(no)
            PAC_MSG_ERROR( $enable_softerror,
                           [Cannot link with basic MPI C program!
	Check your MPI include paths, MPI libraries and MPI CC compiler] )
        fi
    fi
    if test "$enable_checkMPI" = "yes" -a "$MPE_BUILD_FORTRAN2C" = "yes" ; then
        AC_MSG_CHECKING( [for the linkage of the supplied MPI F77 definitions] )
        PAC_MPI_LINK_F77_FUNC( $MPI_F77, [$FFLAGS $MPI_INC], $MPI_LIBS, [
        integer mytid
        integer ierr
    ], [ call MPI_Comm_rank( MPI_COMM_WORLD, mytid, ierr ) ],
        [ mpe_link_ok=yes ], [ mpe_link_ok=no ] )
        if test "$mpe_link_ok" = "yes" ; then
            AC_MSG_RESULT(yes)
        else
            AC_MSG_RESULT(no)
            PAC_MSG_ERROR( $enable_softerror,
                           [Cannot link with basic MPI F77 program!
	    Check your MPI include paths, MPI libraries and MPI F77 compiler ] )
        fi
    fi

    #
    # Some MPI's seem to have trouble with
    # MPI_Wtime, PMPI_Wtime, and MPI_Attr_get
    # (Fujitsu for MPI_Wtime and MPI_Attr_get; IBM's PMPI_Wtime returned 0)
    # Check at least that we can link with MPI_Wtime and MPI_Attr_get
    #
    if test "$enable_checkMPI" = "yes" -a "$enable_checkMPIwtime" = "yes" ; then
        AC_MSG_CHECKING( [for the C version of MPI_Wtime()] )
        PAC_MPI_LINK_CC_FUNC( $MPI_CC, [$CFLAGS $MPI_INC], $MPI_LIBS,
                              [ double d ],
                              [ d=MPI_Wtime() ],
                              [ mpe_link_ok=yes ], [ mpe_link_ok=no ] )
        if test "$mpe_link_ok" = "yes" ; then
            AC_MSG_RESULT(yes)
            AC_DEFINE( HAVE_MPI_WTIME,1,[Define if MPI_Wtime available] )
        else
            AC_MSG_RESULT(no)
            PAC_MSG_ERROR( $enable_softerror, [Cannot link with MPI_Wtime()!
	Check your MPI include paths, MPI libraries and MPI CC compiler ] )
        fi
    fi
fi

if test -z "$CC" -o -z "$MPI_CC"; then
    PAC_MSG_ERROR( $enable_softerror,
                   [You must configure MPE with a specific MPI] )
fi
 
if test -n "$F77" -a "$MPE_BUILD_FORTRAN2C" = "yes" ; then 
    AC_F77_LIBRARY_LDFLAGS
    PAC_PROG_F77_CHECK_FLIBS
    PAC_PROG_F77_NAME_MANGLE
fi

dnl  We need to check that this has worked.  The autoconf macro is broken
AC_PROG_CPP
if test "$CPP" = "/lib/cpp" -a ! -x /lib/cpp ; then
    AC_MSG_ERROR( [configure could not find a working C preprocessor] )
fi

dnl  check for "ln -s" exists.  It is for install program, mpeinstall
AC_PROG_LN_S

dnl
MPE_CFLAGS="$MPE_CFLAGS $COPTIONS"
dnl
if test -z "$CLINKER" ; then CLINKER="$CC" ; fi
if test -z "$FLINKER" ; then FLINKER="$F77" ; fi
AC_SUBST(MPI_IMPL)
AC_SUBST(MPE_LIBNAME)
AC_SUBST(MPE_BUILD_FORTRAN2C)
AC_SUBST(CC)
AC_SUBST(CLINKER)
AC_SUBST(MPE_CFLAGS)
AC_SUBST(MPI_CC)
AC_SUBST(F77)
AC_SUBST(FLINKER)
AC_SUBST(MPE_FFLAGS)
AC_SUBST(MPI_F77)
AC_SUBST(MPI_INC)
AC_SUBST(MPI_LIBS)
AC_SUBST(LDFLAGS)

dnl  Make the directories that do not contain Makefiles (should they?) but 
dnl  are needed for the subsequent directories.
$RM -f $srcdir/mpe_conf.h

export MPI_IMPL
export MPE_LIBNAME
export MPE_BUILD_FORTRAN2C
export CC
export CLINKER
export MPI_CC
export MPE_CFLAGS
export F77
export FLINKER
export MPE_FFLAGS
export MPI_F77
export MPI_INC
export MPI_LIBS
export LDFLAGS
export FLIB_PATH_LEADER

mpe_enable_softerror=yes
export mpe_enable_softerror


misc_dirname="src/misc"
logging_dirname="src/logging"
wrappers_dirname="src/wrappers"
graphics_dirname="src/graphics"
slog2_dirname="src/slog2sdk"

dnl trial_pkgs="graphics wrappers logging misc"
trial_pkgs="misc logging wrappers graphics"

dnl
AC_ARG_ENABLE( misc,
[--enable-misc                      - build MPE miscellaneous routines, e.g.
                                     MPE_Errors_xxx(), MPE_Seq_xxx(),
                                     MPE_xxxTags() and MPE_GetHostName()....
                                     The default enable=yes.], ,
enable_misc=yes )

dnl
AC_ARG_ENABLE( logging,
[--enable-logging                   - build MPE logging routines related to
                                     CLOG-2, e.g.  MPE_Log_xxx()...
                                     The default enable=yes.], ,
enable_logging=yes )

dnl
AC_ARG_ENABLE( wrappers,
[--enable-wrappers                  - build MPE various MPI wrapper libraries.
                                     MPI logging library, liblmpe.a;
                                     MPI tracing library, libtmpe.a;
                                     Fortran to C MPI library, libmpe_f2cmpi.a],
, enable_wrappers=yes )
dnl  src/wrappers requires at least src/logging
if test "$enable_wrappers" = "yes" ; then
    enable_logging=yes
fi

dnl  Determine if the X graphics is going to be configured
AC_ARG_ENABLE( graphics,
[--enable-graphics                  - build MPE graphics routines.  If disabled
                                     then the MPE routines that make use of X11
                                     graphics will NOT be built.  This is
                                     appropriate for systems that either do not
                                     have the X11 include files or that do not
                                     support X11 graphics.
                                     The default enable=yes.], ,
enable_graphics=yes )

PKGS=""
selected_pkgs=""
for pkg in $trial_pkgs ; do
    dirname=${pkg}_dirname
    eval dirvalue=\$"$dirname"
    flagname=enable_${pkg}
    eval flagvalue=\$"$flagname"
    if test "$flagvalue" = "yes" -a -s $srcdir/$dirvalue/configure ; then
        PKGS="$PKGS $dirvalue"
        selected_pkgs="$selected_pkgs $pkg"
    fi
done

dnl  Determine if the slog2sdk directory is going to be configured.
AC_ARG_ENABLE( slog2,
[--enable-slog2[=build]             - Configure all the SLOG-2 tools.
                                     --enable-slog2 without any argument will
                                     use the prebuilt jar files.
                                     --enable-slog2=build will rebuild all the
                                     jar files from the source code.
                                     The default is enable=yes.], ,
enable_slog2=yes )


dnl if SLOG-2 is here, configure it
if test -s $srcdir/$slog2_dirname/configure ; then
    if test "$enable_slog2" = "yes" -o "$enable_slog2" = "build" ; then
        SLOG2TOOLS=1
        if test "$enable_slog2" = "build" ; then
            slog2_enable_source=yes
        else
            slog2_enable_source=no
        fi
        export slog2_enable_source
        # Enabling softerror in SLOG2 configure won't abort the entire process
        slog2_enable_softerror=yes
        export slog2_enable_softerror
        PKGS="$PKGS $slog2_dirname"
        selected_pkgs="$selected_pkgs slog2"
    else
        slog2_dirname=
        SLOG2TOOLS=0
    fi
else
    slog2_dirname=
    SLOG2TOOLS=0
fi
AC_CONFIG_SUBDIRS($PKGS)
AC_SUBST(SLOG2TOOLS)

AC_OUTPUT_COMMANDS( [
if test ! -x ./sbin/mpeinstall -a -s ./sbin/mpeinstall; then
    chmod u+x ./sbin/mpeinstall
fi
] )
AC_OUTPUT( Makefile sbin/mpeinstall )

configured_pkgs=""
for pkg in $selected_pkgs ; do
    dirname=${pkg}_dirname
    eval dirvalue=\$"$dirname"
    if test -s $dirvalue/Makefile ; then
        configured_pkgs="$configured_pkgs \"$dirvalue\""
    fi
done

if test -z "$configured_pkgs" ; then
    AC_MSG_WARN([$pkgname: No sub-package has been configured])
else
    AC_MSG_RESULT([$pkgname: $configured_pkgs have been configured])
fi
