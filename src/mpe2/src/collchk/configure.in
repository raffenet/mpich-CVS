dnl
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
dnl
dnl
AC_INIT()
AC_PREREQ(2.52)
AC_CONFIG_HEADER(mpe_collchk_conf.h)
dnl
echo "Configuring MPE MPI-Collective Checking Library with $ac_configure_args"
dnl
dnl Set top_srcdir_abs to be the ABSOLUTE path to the home directory of MPE
dnl top_srcdir is in relative path.
if test "X$srcdir" != "X." -a -s $srcdir/include/collchk.h ; then
    top_srcdir_abs=$srcdir
else
    PAC_GETWD( top_srcdir_abs, include/collchk.h )
fi
AC_SUBST(top_srcdir_abs)

AC_ARG_ENABLE( echo,
[--enable-echo                      - Turn on strong echoing.
                                     The default is enable=no.],
set -x )

AC_ARG_ENABLE( softerror,
[--enable-softerror                 - Turn on soft error, i.e. instead of
                                     issuing MSG_ERROR, MSG_WARN + exit 0
                                     are used.  The default is enable=no.],
, enable_softerror=${mpe_enable_softerror:-no} )

MAKE=${MAKE:-make}
CC=${CC:-cc}
CLINKER=${CLINKER:-$CC}
MPE_CFLAGS=${MPE_CFLAGS}
MPI_CC=${MPI_CC:-${CC}}
MPI_INC=${MPI_INC}
MPI_LIBS=${MPI_LIBS}

MPE_LIBNAME=${MPE_LIBNAME:-mpe}
COLLCHK_LIBNAME="${MPE_LIBNAME}_collchk"
COLLCHK_LIBS="-l$COLLCHK_LIBNAME"

dnl Fixup for make
PAC_MAKE_IS_GNUMAKE
PAC_MAKE_IS_BSD44
PAC_MAKE_IS_OSF
PAC_MAKE_VPATH
AC_SUBST(MAKE)

dnl If we are relying on vpath and no vpath is set, then we must exit
if test ! -s src/log_mpi_core.c -a -z "$VPATH" ; then
    AC_MSG_ERROR( [No virtual MAKE path command found.
        You may need to set your make command
        The GNU make (sometimes available as gnumake) can be used.] )
fi

dnl CPRP is the version of cp that accepts -r and -p arguments.
MKDIR=mkdir
CPRP=cp
RM=rm
MV=mv
AC_SUBST(MKDIR)
AC_SUBST(CPRP)
AC_SUBST(RM)
AC_SUBST(MV)

AC_ARG_WITH( mpiio,
[--with-mpiio                       - Include/exclude MPI-IO from Verification.
                                     The default is yes.], ,
with_mpiio=yes )

AC_ARG_ENABLE( checkMPI,
[--enable-checkMPI                  - Turn on/off the linking test for the MPI
                                     include files, MPI libraries and MPI_CC
                                     compiler. The default is enable=yes.], ,
enable_checkMPI=yes )

AC_ARG_WITH( checkMPIO,
[--enable-checkMPIO                 - Turn on/off the linking test for MPI-IO
                                     routines in MPI implementation.
                                     The default is enable=yes.], ,
enable_checkMPIO=yes )

if test -z "$nonopt" ; then nonopt=NONE ; fi
AC_CANONICAL_HOST

dnl Set the various build directories from their mpe_ prefixed env variables.
dnl
dnl includebuild_dir is for all user header files
dnl libbuild_dir is used to build the libraries in before they are installed.
dnl binbuild_dir is for the scripts/programs
dnl sbinbuild_dir is for all system admin stuffs
dnl
rootbuild_dir=`pwd`
for dir in include lib bin ; do
    dirname=${dir}build_dir
    mpe_dirname=mpe_${dirname}
    eval dirvalue=\$"$dirname"
    eval $dirname=\$\{${mpe_dirname}\}
done

for dir in include lib bin ; do
    dirname=${dir}build_dir
    eval dirvalue=\$"$dirname"
    if test -n "$dirvalue" ; then
        if test ! -d $dirvalue ; then
            if mkdir -p $dirvalue ; then
                :
            else
                PAC_MSG_ERROR( $enable_softerror,
                               [Could not create directory $dirvalue] )
            fi
        fi
    fi
done

AC_SUBST(includebuild_dir)
AC_SUBST(libbuild_dir)
AC_SUBST(binbuild_dir)

AC_SUBST(includebuild_dir)
AC_SUBST(libbuild_dir)
AC_SUBST(binbuild_dir)

AC_PROG_CC
AC_OBJEXT
AC_EXEEXT
dnl Check for broken handling of common symbols
dnl PAC_PROG_C_BROKEN_COMMON
AC_CHECK_PROG(AR, ar, ar, ;)
AC_PROG_RANLIB

dnl We need to check that this has worked.  The autoconf macro is broken
AC_PROG_CPP
if test "$CPP" = "/lib/cpp" -a ! -x /lib/cpp ; then
   AC_MSG_ERROR( [configure could not find a working C preprocessor] )
fi

dnl  Invoking AC_CHECK_LIB before AC_PROG_CC makes AC_PROG_CC fail
dnl  in autoconf 2.59
DEBUG_LIBS=""
if test "$enable_debugcheck" = "yes" ; then
    AC_CHECK_LIB( efence, malloc, DEBUG_LIBS="-lefence" )
fi
AC_SUBST(DEBUG_LIBS)

AC_HEADER_STDC
AC_C_CONST

dnl  Checking Headers
AC_CHECK_HEADERS( stdio.h stdlib.h string.h unistd.h )

dnl Check MPI-IO
if test "$MPI_IMPL" != "MPICH" -a "$MPI_IMPL" != "MPICH2" ; then
    if test "$enable_checkMPI" = "yes" -a "$enable_checkMPIO" = "yes" ; then
        AC_MSG_CHECKING( [for the C version of MPI_File_open()] )
        PAC_MPI_LINK_CC_FUNC( $MPI_CC, [$CFLAGS $MPI_INC], $MPI_LIBS,
                              [ int itmp; MPI_File fh ],
                              [ itmp=MPI_File_open( MPI_COMM_WORLD, "mpiiotest", MPI_MODE_CREATE | MPI_MODE_RDWR, MPI_INFO_NULL, &fh ) ],
                              [ mpe_link_ok=yes ], [ mpe_link_ok=no ] )
        if test "$mpe_link_ok" = "yes" ; then
            AC_MSG_RESULT(yes)
            AC_MSG_CHECKING( [for the C version of PMPI_File_open()] )
            PAC_MPI_LINK_CC_FUNC( $MPI_CC, [$CFLAGS $MPI_INC], $MPI_LIBS,
                                  [ int itmp; MPI_File fh ],
                                  [ itmp=PMPI_File_open( MPI_COMM_WORLD, "mpiiotest", MPI_MODE_CREATE | MPI_MODE_RDWR, MPI_INFO_NULL, &fh ) ],
                                  [ mpe_link_ok=yes ], [ mpe_link_ok=no ] )
            if test "$mpe_link_ok" = "yes" ; then
                AC_MSG_RESULT(yes)
                AC_DEFINE( HAVE_MPI_IO, 1, [Define if MPI-IO available] )
                AC_MSG_CHECKING( [for ROMIO's MPIO_Request] )
                PAC_MPI_LINK_CC_FUNC( $MPI_CC, [$CFLAGS $MPI_INC], $MPI_LIBS,
                                      [ MPIO_Request  io_request], ,
                                      [ mpe_link_ok=yes ], [ mpe_link_ok=no ] )
                if test "$mpe_link_ok" = "yes" ; then
                    AC_MSG_RESULT(yes)
                else
                    AC_MSG_RESULT(no)
                    AC_DEFINE( HAVE_NO_MPIO_REQUEST, 1,
                               [Define if no MPIO_Request] )
                fi
            else
                AC_MSG_RESULT([no, assumed No MPI-IO routines])
            fi
        else
            AC_MSG_RESULT([no, assumed No MPI-IO routines])
        fi
    fi
else
dnl When it is built with MPICHx, MPE configure observes --with[out]-mpiio
dnl if test \( "$MPI_IMPL" = "MPICH" -o "$MPI_IMPL" = "MPICH2" \) \
    if test "$with_mpiio" = "yes" ; then
        AC_DEFINE( HAVE_MPI_IO, 1, [Define if MPI-IO available] )
    fi
fi

dnl Check MPI-RMA
if test "$MPI_IMPL" != "MPICH" -a "$MPI_IMPL" != "MPICH2" ; then
    if test "$enable_checkMPI" = "yes" ; then
        AC_MSG_CHECKING( [for the C version of MPI_Win_create] )
        PAC_MPI_LINK_CC_FUNC( $MPI_CC, [$CFLAGS $MPI_INC], $MPI_LIBS,
                              [ int itmp; MPI_Win win ],
                              [
#ifndef NULL
#define NULL 0
#endif
    itmp=MPI_Win_create( NULL, 0, 1, MPI_INFO_NULL, MPI_COMM_WORLD, &win )
                              ],
                              [ mpe_link_ok=yes ], [ mpe_link_ok=no ] )
        if test "$mpe_link_ok" = "yes" ; then
            AC_MSG_RESULT(yes)
            AC_MSG_CHECKING( [for the C version of PMPI_Win_create] )
            PAC_MPI_LINK_CC_FUNC( $MPI_CC, [$CFLAGS $MPI_INC], $MPI_LIBS,
                                  [ int itmp; MPI_Win win ],
                                  [
#ifndef NULL
#define NULL 0
#endif
    itmp=PMPI_Win_create( NULL, 0, 1, MPI_INFO_NULL, MPI_COMM_WORLD, &win )
                                  ],
                                  [ mpe_link_ok=yes ], [ mpe_link_ok=no ] )
            if test "$mpe_link_ok" = "yes" ; then
                AC_MSG_RESULT(yes)
                AC_DEFINE( HAVE_MPI_RMA, 1, [Define if MPI-RMA available] )
            else
                AC_MSG_RESULT([no, assumed No MPI-RMA routines])
            fi
        else
            AC_MSG_RESULT([no, assumed No MPI-RMA routines])
        fi
    fi
else
dnl if MPICH2, assume MPI-RMA is available.
    if test "$MPI_IMPL" = "MPICH2" ; then
        AC_DEFINE( HAVE_MPI_RMA, 1, [Define if MPI-RMA available] )
    fi
fi

AC_SUBST(MPI_IMPL)
AC_SUBST(CC)
AC_SUBST(CLINKER)
AC_SUBST(MPE_CFLAGS)
AC_SUBST(MPI_CC)
AC_SUBST(MPI_INC)
AC_SUBST(MPI_LIBS)

AC_SUBST(COLLCHK_LIBNAME)
AC_SUBST(COLLCHK_LIBS)

AC_OUTPUT( Makefile src/Makefile )
