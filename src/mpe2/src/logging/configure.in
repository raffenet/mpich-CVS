dnl
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
dnl
dnl
AH_BOTTOM([
/* Define WINDOWS specific features */
/*
   Windows' open() opens an ASCII file by default, add Windows specific
   flag O_BINARY to open()'s argument
*/
#ifdef HAVE_WINDOWS_H
#define OPEN( a, b, c )    open( a, b | O_BINARY, c )
#else

#ifdef _LARGEFILE64_SOURCE

#ifdef HAVE_O_BINARY
#define OPEN( a, b, c )    open( a, b | O_LARGEFILE | O_BINARY, c )
#else
#define OPEN( a, b, c )    open( a, b | O_LARGEFILE, c )
#endif

#else

#ifdef HAVE_O_BINARY
#define OPEN( a, b, c )    open( a, b | O_BINARY, c )
#else
#define OPEN( a, b, c )    open( a, b, c )
#endif

#endif

#endif
])
AC_INIT()
AC_PREREQ(2.52)
AC_CONFIG_HEADER(mpe_logging_conf.h)
dnl
echo "Configuring MPE Logging Library with $ac_configure_args"
dnl
dnl Set top_srcdir_abs to be the ABSOLUTE path to the home directory of MPE
dnl top_srcdir is in relative path.
if test "X$srcdir" != "X." -a -s $srcdir/include/mpe_log.h ; then
    top_srcdir_abs=$srcdir
else
    PAC_GETWD( top_srcdir_abs, include/mpe_log.h )
fi
AC_SUBST(top_srcdir_abs)
 
AC_ARG_ENABLE( echo,
[--enable-echo                      - Turn on strong echoing.
                                     The default is enable=no.],
set -x )

AC_ARG_ENABLE( softerror,
[--enable-softerror                 - Turn on soft error, i.e. instead of
                                     issuing MSG_ERROR, MSG_WARN + exit 0
                                     are used.  The default is enable=no.],
, enable_softerror=${mpe_enable_softerror:-no} )

MAKE=${MAKE:-make}
MPE_BUILD_FORTRAN2C=${MPE_BUILD_FORTRAN2C:-no}
CC=${CC:-cc}
CLINKER=${CLINKER:-$CC}
MPE_CFLAGS=${MPE_CFLAGS}
MPI_CC=${MPI_CC:-${CC}}
MPI_INC=${MPI_INC}
MPI_LIBS=${MPI_LIBS}

MPE_LIBNAME=${MPE_LIBNAME:-mpe}
PROF_LIBNAME="$MPE_LIBNAME"
PROF_LIBS="-l$PROF_LIBNAME"
 
dnl Fixup for make
PAC_MAKE_IS_GNUMAKE
PAC_MAKE_IS_BSD44
PAC_MAKE_IS_OSF
PAC_MAKE_VPATH
AC_SUBST(MAKE)
 
dnl If we are relying on vpath and no vpath is set, then we must exit
if test ! -s include/mpe_log.h -a -z "$VPATH" ; then
    AC_MSG_ERROR( [No virtual MAKE path command found.
	You may need to set your make command
	The GNU make (sometimes available as gnumake) can be used.] )
fi

dnl CPRP is the version of cp that accepts -r and -p arguments.
MKDIR=mkdir
CPRP=cp
RM=rm
MV=mv
AC_SUBST(MKDIR)
AC_SUBST(CPRP)
AC_SUBST(RM)
AC_SUBST(MV)
 
if test -z "$nonopt" ; then nonopt=NONE ; fi
AC_CANONICAL_HOST
case "$host" in
   *cray*)
        host=cray
        MPE_CFLAGS="$MPE_CFLAGS -DMPI_CRAY"
        ;;
esac

dnl Set the various build directories from their mpe_ prefixed env variables.
dnl
dnl includebuild_dir is for all user header files
dnl libbuild_dir is used to build the libraries in before they are installed.
dnl binbuild_dir is for the scripts/programs
dnl sbinbuild_dir is for all system admin stuffs
dnl
rootbuild_dir=`pwd`
for dir in include lib bin ; do
    dirname=${dir}build_dir
    mpe_dirname=mpe_${dirname}
    eval dirvalue=\$"$dirname"
    eval $dirname=\$\{${mpe_dirname}\}
done

for dir in include lib bin ; do
    dirname=${dir}build_dir
    eval dirvalue=\$"$dirname"
    if test -n "$dirvalue" ; then
        if test ! -d $dirvalue ; then
            if mkdir -p $dirvalue ; then
                :
            else
                PAC_MSG_ERROR( $enable_softerror,
                               [Could not create directory $dirvalue] )
            fi
        fi
    fi
done

AC_SUBST(includebuild_dir)
AC_SUBST(libbuild_dir)
AC_SUBST(binbuild_dir)

AC_PROG_CC
AC_OBJEXT
AC_EXEEXT
dnl Check for broken handling of common symbols
dnl PAC_PROG_C_BROKEN_COMMON
AC_CHECK_PROG( AR, ar, ar, ; )
AC_PROG_RANLIB

dnl We need to check that this has worked.  The autoconf macro is broken
AC_PROG_CPP
if test "$CPP" = "/lib/cpp" -a ! -x /lib/cpp ; then
   AC_MSG_ERROR( [configure could not find a working C preprocessor] )
fi

AC_HEADER_STDC
AC_C_CONST

dnl   -- Check if byteswapping needs to be done.
if test "$cross_compiling" = "yes" -o "$cross_compiling" = 1 ; then
    AC_MSG_CHECKING([for byte ordering])
    if test "X$CROSS_BIGENDIAN" != "X" ; then
        if test "$CROSS_BIGENDIAN" = "true" \
             -o "$CROSS_BIGENDIAN" = "false" ; then
            if test "$CROSS_BIGENDIAN" = "true" ; then
                AC_DEFINE( WORDS_BIGENDIAN, 1,
                           [Define if byte order is bigendian] )
                AC_MSG_RESULT( [defined to be big endian] )
            else
                AC_MSG_RESULT( [defined to be little endian] )
            fi
        else
            AC_DEFINE( WORDS_BIGENDIAN, 1,
                       [Define if byte order is bigendian] )
            AC_MSG_RESULT( [Unknown CROSS_BIGENDIAN, $CROSS_BIGENDIAN! Assumed big endian] )
        fi
    else
        AC_DEFINE( WORDS_BIGENDIAN, 1, [Define if byte order is bigendian] )
        AC_MSG_RESULT( [Undefined CROSS_BIGENDIAN! Assumed big endian] )
    fi
else
    AC_C_BIGENDIAN
fi

dnl ****   Checking for specific functions needed for the package.
dnl mkstemp() is a better replacement for mktemp()
AC_HAVE_FUNCS(mkstemp)

dnl check if Large File support is available for 32-bit OS
AC_CHECK_HEADERS( unistd.h,
    AC_MSG_CHECKING( [for large file support in 32-bit OS] )
    AC_TRY_COMPILE( [
        #define _LARGEFILE64_SOURCE 1
        #include <unistd.h>
        ], [
        #ifndef _LFS64_LARGEFILE
        #error no largefile support
        #endif
        ],
        AC_DEFINE( _LARGEFILE64_SOURCE, 1,
                   [Define if 64-bit file address support in 32-bit OS] )
        AC_DEFINE( _FILE_OFFSET_BITS, 64,
                   [Define if 64-bit file address support in 32-bit OS] )
        AC_MSG_RESULT(yes),
        AC_MSG_RESULT(none)
    )
)

AC_CHECK_HEADERS( fcntl.h,
    AC_MSG_CHECKING( [for O_BINARY for open()] )
    AC_TRY_LINK( [
        #include <fcntl.h>
        ], [
        open( "tmpfile", O_CREAT | O_BINARY );
        ],
        AC_DEFINE( HAVE_O_BINARY, 1,
                   [Define to 1 if O_BINARY flag for open() exists.] )
        AC_MSG_RESULT(yes),
        AC_MSG_RESULT(no)
    )
)

AC_CHECK_HEADERS( stdlib.h string.h )

AC_SUBST(MPE_BUILD_FORTRAN2C)
AC_SUBST(CC)
AC_SUBST(CLINKER)
AC_SUBST(MPE_CFLAGS)
AC_SUBST(MPI_CC)
AC_SUBST(MPI_INC)
AC_SUBST(MPI_LIBS)
AC_SUBST(PROF_LIBNAME)

AC_OUTPUT( Makefile src/Makefile )
