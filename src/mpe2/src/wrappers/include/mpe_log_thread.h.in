/*
   (C) 2001 by Argonne National Laboratory.
       See COPYRIGHT in top-level directory.
*/

@PTHREAD_IN_MPI_DEF@

#if defined( HAVE_PTHREAD_IN_MPI )

#include <pthread.h>

#define MPE_ThreadID_t   int

/* MPE coarse-grained lock support mechanism */
extern pthread_mutex_t  MPE_Thread_mutex;
extern pthread_key_t    MPE_ThreadID_key;
extern MPE_ThreadID_t   MPE_Thread_count;

#define MPE_LOG_THREAD_DECL \
    MPE_ThreadID_t *thdID_ptr = NULL; \
    MPE_ThreadID_t  thdID; \
    int             thd_fn_rc;

#define MPE_LOG_THREAD_LOCK  \
    thd_fn_rc = pthread_mutex_lock( &MPE_Thread_mutex ); \
    if ( thd_fn_rc != 0 ) { \
        perror( "pthread_mutex_lock() fails!" ); \
        pthread_exit( NULL ); \
    }

#define MPE_LOG_THREAD_UNLOCK \
    thd_fn_rc = pthread_mutex_unlock( &MPE_Thread_mutex ); \
    if ( thd_fn_rc != 0 ) { \
        perror( "pthread_mutex_unlock() fails!" ); \
        pthread_exit( NULL ); \
    }

#define MPE_LOG_THREADID_SET \
    thdID_ptr  = (MPE_ThreadID_t *) malloc( sizeof(MPE_ThreadID_t) ); \
    *thdID_ptr = MPE_Thread_count ; \
    thd_fn_rc  = pthread_setspecific( MPE_ThreadID_key, thdID_ptr ); \
    if ( thd_fn_rc != 0 ) { \
        perror( "pthread_setspecific() fails!" ); \
        pthread_exit( NULL ); \
    } \
    MPE_Thread_count++;

#define MPE_LOG_THREADID_GET \
    thdID_ptr = (MPE_ThreadID_t *) pthread_getspecific( MPE_ThreadID_key ); \
    if ( thdID_ptr == NULL ) { \
        MPE_LOG_THREADID_SET \
    } \
    thdID = *thdID_ptr ;

#define MPE_LOG_THREAD_INIT      MPE_Log_thread_init();
#define MPE_LOG_THREAD_FINALIZE  MPE_Log_thread_sync( MPE_Thread_count );

void MPE_Log_thread_init( void );

#else

#define MPE_ThreadID_t   int
#define MPE_LOG_THREAD_DECL \
    MPE_ThreadID_t *thdID_ptr = NULL; \
    MPE_ThreadID_t  thdID; \
    int             thd_fn_rc;
    
#define MPE_LOG_THREAD_LOCK
#define MPE_LOG_THREAD_UNLOCK
#define MPE_LOG_THREADID_SET
#define MPE_LOG_THREADID_GET
#define MPE_LOG_THREAD_INIT
#define MPE_LOG_THREAD_FINALIZE

#endif
