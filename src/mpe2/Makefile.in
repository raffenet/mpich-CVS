ALL: all

MAKE   = @MAKE@
SHELL  = /bin/sh
MKDIR  = @MKDIR@
RM     = @RM@
CP     = @CPRP@

top_srcdir        = @top_srcdir@
srcdir            = @srcdir@

# Build directories
includebuild_dir  = @includebuild_dir@
libbuild_dir      = @libbuild_dir@
binbuild_dir      = @binbuild_dir@
sbinbuild_dir     = @sbinbuild_dir@

# Building Fortran to C interface
MPE_BUILD_FORTRAN2C  = @MPE_BUILD_FORTRAN2C@
# MPI implementation: used to turn on/off of certain feature
MPI_IMPL             = @MPI_IMPL@
# MPE header files that are needed by endusers
MPE_HEADERS          = mpe.h mpe_misc.h mpe_log.h mpe_graphics.h

# The empty string, "", in PKGS is needed to avoid /bin/sh from complaining
# when PKGS is really empty.
PKGS = "" @subdirs@

all-redirect: 
all: build_include build_lib_bin

#######  Building from the source
build_include:
	-@if [ -n "$(includebuild_dir)" ] ; then \
	      if [ ! -d $(includebuild_dir) ] ; then \
	          $(MKDIR) -p $(includebuild_dir) ; \
	      fi ; \
	      cd $(top_srcdir)/include ; \
	      for file in $(MPE_HEADERS) ; do \
	          if [ -f $$file -a ! -f $(includebuild_dir)/$$file ] ; then \
	              $(CP) $$file $(includebuild_dir) ; \
	          fi ; \
	      done ; \
	  fi

build_lib_bin: clean_bin clean_lib 
	@for pkg in $(PKGS) ; do \
             if [ -n "$$pkg" -a -s $$pkg/Makefile ] ; then \
	         echo "Making $$pkg ...." ; \
	         ( cd $$pkg ; $(MAKE) ) ; \
             fi ; \
	 done

########  Linkage Tests
linktest_all: linktest_C linktest_F77

linktest_C:
	@if [ "$(MPI_IMPL)" != "MPICH" -a "$(MPI_IMPL)" != "MPICH2" ] ; then \
	     ( cd contrib/test && $(MAKE) linktest_C ) ; \
	 fi

linktest_F77:
	@if [ "$(MPE_BUILD_FORTRAN2C)" = "yes" ] ; then \
	     if [    "$(MPI_IMPL)" != "MPICH" \
	          -a "$(MPI_IMPL)" != "MPICH2" ] ; then \
	         ( cd contrib/test && $(MAKE) linktest_F77 ) ; \
	     fi ; \
	 fi
	@echo

#  For backward compatibility
linktest: linktest_C

#  For backward compatibility
fortran_test: linktest_F77
########

#  Tagets to build all the SLOG-2 related tools, i.e. jumpshot-4 ...  
slog2tools:
	@-if [ -s ./slog2sdk/Makefile ] ; then \
	      ( cd ./slog2sdk && $(MAKE) ) \
	  fi

########  Installing
install:
	@if [ -n "$(PREFIX)" ] ; then \
	     ./sbin/mpeinstall -prefix=$(PREFIX) ; \
	 else \
	     ./sbin/mpeinstall ; \
	 fi

uninstall:
	@./sbin/mpeuninstall

########  Cleaning
clean_include:
	@-if [ -n "$(includebuild_dir)" \
	       -a "$(includebuild_dir)" != "$(top_srcdir)/include" ] ; then \
	      cd $(includebuild_dir) ; \
	      for file in $(MPE_HEADERS) ; do \
	          $(RM) -f $$file ; \
	      done ; \
	  fi

clean_bin:
	 -cd $(binbuild_dir) ; \
	  files=`/bin/ls` ; \
	  for file in ${files} ; do \
	      if [ ! -d "$$file" ] ; then \
	          $(RM) -f $$file ; \
	      fi ; \
	  done;

clean_lib:
	 -$(RM) -f $(libbuild_dir)/lib*
	 -$(RM) -f $(libbuild_dir)/*.jar
	 -$(RM) -f $(libbuild_dir)/*.o

clean: clean_bin clean_lib
	@-$(RM) -f work.pc work.pcl
	@-for pkg in $(PKGS) ; do \
              if [ -n "$$pkg" -a -s $$pkg/Makefile ] ; then \
	          ( cd $$pkg ; $(MAKE) clean ) ; \
              fi ; \
	  done

distclean: clean_bin clean_lib
	@-for pkg in $(PKGS) ; do \
              if [ -n "$$pkg" -a -s $$pkg/Makefile ] ; then \
	          ( cd $$pkg ; $(MAKE) distclean ) ; \
              fi ; \
	  done
	@-$(RM) -f sbin/mpeinstall sbin/mpeuninstall
	@-$(RM) -f Makefile mpe_conf.h config.log config.status

configure: configure.in aclocal_core.m4 aclocal_f77.m4 aclocal_make.m4 \
	aclocal_mpi.m4 aclocal.m4
	autoheader
	autoconf

# Allow dependencies target
dependencies:

# Allow a coverage target
coverage:
