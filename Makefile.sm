SUBDIRS = . src examples
# Do not include test in the basic build.
OTHER_DIRS = test
DOC_SUBDIRS = doc
# The all-local target makes sure that when different subsystems are selected
# for the configure step, the libraries are removed and the object files 
# cleaned out.  Without this step, it is possible to run make and encounter
# errors caused by out-of-date objects in the directories and in the 
# library.  We do not replace the pkglist file until the make completes,
# using the all-postamble target.
all-local:
	if [ ! -d lib ] ; then mkdir lib ; \
	else \
	    echo "@subsystems@" > lib/pkglist.new ; \
	    echo "@CC@" >>lib/pkglist.new ;\
	    echo "@CONFIGURE_ARGUMENTS@" >>lib/pkglist.new ; \
	    if diff lib/pkglist lib/pkglist.new >/dev/null 2>&1 ; then \
	        rm -f lib/pkglist.new ; \
            else \
	        rm -f lib/lib${MPILIBNAME}.a lib/libp${MPILIBNAME}.a ; \
		rm -f lib/lib${MPILIBNAME}.so* lib/libp${MPILIBNAME}.so* ; \
		rm -f lib/lib${MPILIBNAME}.la* lib/libp${MPILIBNAME}.la* ; \
		rm -f lib/pkglist ; \
		${MAKE} clean ; cd test && ${MAKE} clean ; \
	    fi ; \
	fi
all-preamble:
	@echo "Beginning make"
# Add any final extras.  Move the "pkglist.new" file to "pkglist" on 
# successful completion
all-postamble:
	if [ "@BUILD_TVDLL@" = "yes" ] ; then \
	( cd src/mpi/debugger && $(MAKE) ./libtvmpich.so ) ; fi
	@if [ -s lib/pkglist.new ] ; then mv -f lib/pkglist.new lib/pkglist ; fi
	@echo "Make completed"

distclean-local:
	-@rm -f lib/lib${MPILIBNAME}.a lib/pkglist lib/pkglist.new
	-@rm -f lib/lib${MPILIBNAME}.so* lib/lib${MPILIBNAME}.la
	-@rm -f src/include/${MPILIBNAME}conf.h
	-@rm -f src/include/mpio.h
	-@rm -f bin/mpicc
	-@rm -f bin/mpich2version
	-@cd test && $(MAKE) distclean

PACKAGE = mpich2
# Version < 1 is pre MPI-1 release.
# Version >= 2 contains MPI-2
# Version between 1 and 2 contains all of MPI1 and parts of MPI-2
# Version is now set in the Configure file so that we can easily include the
# version on the configure output and to match the common practice of
# current autoconfs
VERSION = @VERSION@
MPICVSHOME = @MPICVSHOME@
#
# Build a distribution tarfile
#  Extract into a temporary directory
#     cvs update output into cvsexp.log to reduce the volume of noise
#     in the output
#  Rename the directory
#  Run updatefiles with distribution options
#  Tar it up
dist: dist-check
	@version=${VERSION} ; \
	prever=`echo ${VERSION} | sed -e 's/^[^-]*//'` ; \
	if test "$$prever" = "-CVS" ; then version=$${version}-`date "+%Y%m%d%H%M"` ; fi ; \
	if test -z "${TAG}" ; then tag=HEAD ; else tag=${TAG}; fi ; \
	$(MAKE) version=$${version} tag=$${tag} doc=yes dist-with-version

# snap creates a simple snapshot of the currently checked in MPICH2 sources.
# No documentation is included.
snap:
	@version=snap-`date "+%Y%m%d%H%M"` ; \
	$(MAKE) version=$${version} tag=HEAD doc=no dist-with-version
	
dist-with-version:
	@if [ -z "$(version)" ] ; then \
	    echo "Must invoke with make version=value tag=value dist-with-version" ;\
	    exit 1 ; fi 
	@if [ -z "$(tag)" ] ; then \
	    echo "Must invoke with make version=value tag=value dist-with-version" ;\
	    exit 1 ; fi 
	@echo ""; echo "Cutting version ${version} of the MPICH2 distribution from tag ${tag}" ; echo ""
	if [ ! -d tmpdir ] ; then mkdir tmpdir ; fi 
	rm -f cvsexp.log 
	( cd tmpdir && cvs -d $(MPICVSHOME) export -r "${tag}" mpich2allWithMPE >cvsexp.log 2>&1 ) ;\
	( cd tmpdir/mpich2 && sed -e "s/^VERSION = .*/VERSION = ${version}/" Makefile.sm >.tmp && mv .tmp Makefile.sm )
	echo "${version}" >tmpdir/mpich2/maint/Version
	mv tmpdir/mpich2 tmpdir/${PACKAGE}-${version}
	( cd tmpdir/${PACKAGE}-${version} && maint/updatefiles )
	if test "$(doc)" = "yes" ; then \
	    cp -r tmpdir/${PACKAGE}-${version} tmpdir2 ; \
	    rm -f manlog.txt ; \
	    ( cd tmpdir2 && ./configure && ${MAKE} mandoc && ${MAKE} htmldoc && ${MAKE} latexdoc ) >manlog.txt 2>&1 ; \
	    if [ ! -d tmpdir2/man ] ; then echo "WARNING: unable to build manpages" ; \
		(cd tmpdir2 && ls ) ; \
	    fi ; \
	    cp -r tmpdir2/man tmpdir/${PACKAGE}-${version}/man ; \
	    cp -r tmpdir2/www tmpdir/${PACKAGE}-${version}/www ; \
	    cp tmpdir2/doc/userguide/user.pdf tmpdir/${PACKAGE}-${version}/doc/userguide/user.pdf ; \
	    cp tmpdir2/doc/installguide/install.pdf tmpdir/${PACKAGE}-${version}/doc/installguide/install.pdf ; \
	    cp tmpdir2/doc/smpd/smpd_pmi.pdf tmpdir/${PACKAGE}-${version}/doc/smpd/smpd_pmi.pdf ; \
	    cp tmpdir2/doc/logging/logging.pdf tmpdir/${PACKAGE}-${version}/doc/logging/logging.pdf ; \
	    rm -rf tmpdir2 ; \
	fi
	( cd tmpdir/${PACKAGE}-${version} && maint/updatefiles -distrib --without-codecheck )
	( cd tmpdir/${PACKAGE}-${version}/src/mpid && /bin/rm -rf mm rdma)
	( cd tmpdir/${PACKAGE}-${version}/doc && /bin/rm -rf notes develop )
	( cd tmpdir/${PACKAGE}-${version} && rm -f ToDo* )
	( cd tmpdir && tar cf ${PACKAGE}-${version}.tar ${PACKAGE}-${version} )
	mv -f tmpdir/${PACKAGE}-${version}.tar . 
	rm -rf tmpdir

# Check that all modules are present in the development version
MODULE_DIRS = doc/notes src/mpi/romio src/pm/winmpd src/pm/mpd
dist-check:
	@for dir in $(MODULE_DIRS) ; do \
	    if [ ! -d $(master_top_srcdir)/$$dir ] ; then \
		echo "Missing $$dir in $(master_top_srcdir) !" ; \
		exit 1 ; \
	    fi ; \
	done

# Set the document sources and types (empty lists still cause recursion)
# These should be empty; any source files should be described in the
# directory that contains those source files.  The presence of these
# items simply indicates that there are such documents
doc_HTML_SOURCES  =
doc_MAN_SOURCES   = 
doc_LATEX_SOURCES = 

# Add the www index pages
htmldoc-local:
	doc/mansrc/createhtmlindex

# Testing requires installation first
testing:
	(cd test && $(MAKE) testing)

install_LIB = lib/lib${MPILIBNAME}.a
install_INCLUDE = src/include/mpi.h
optinstall_LIB = lib/libp${MPILIBNAME}.a
optinstall_SHLIB = lib/lib${MPILIBNAME}.so
optinstall_INCLUDE = src/mpi/romio/include/mpiof.h src/mpi/romio/include/mpio.h
optinstall_LIB = lib/libf${MPILIBNAME}.a
optinstall_SHLIB = lib/libf${MPILIBNAME}.so

# Some of the subsidiary packages may need to be installed.  This target will
# invoke their install targets as part of the installation process
INSTALL_SUBDIRS = src/env src/pm/@pm_name@ @bindings_dirs@ @other_install_dirs@

install-local:
	-if [ "@BUILD_TVDLL@" = "yes" ] ; then \
	    $(INSTALL_DATA) src/mpi/debugger/libtvmpich.so \
			${libdir}/libtvmpich.so ; fi
	if test ! -d ${exec_prefix}/examples ; then \
	    $(MKDIR_P) ${exec_prefix}/examples ; \
	fi
	$(INSTALL_PROGRAM) examples/cpi ${exec_prefix}/examples/cpi

install_DOC = 
optinstall_DOC = \
    doc/userguide/user.pdf \
    doc/installguide/install.pdf \
    doc/smpd/smpd_pmi.pdf \
    doc/logging/logging.pdf
installdir_HTML = www
installdir_MAN  = man
#install_BIN = 
#install_SBIN = 	
